<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Software Factory - Fabien Boucher</title><link href="https://www.softwarefactory-project.io/" rel="alternate"></link><link href="https://www.softwarefactory-project.io/feeds/fabien-boucher.atom.xml" rel="self"></link><id>https://www.softwarefactory-project.io/</id><updated>2023-05-15T00:00:00+00:00</updated><entry><title>Monocle Operator - OLM</title><link href="https://www.softwarefactory-project.io/monocle-operator-olm.html" rel="alternate"></link><published>2023-05-15T00:00:00+00:00</published><updated>2023-05-15T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2023-05-15:/monocle-operator-olm.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to introduce the &lt;a class="reference external" href="https://olm.operatorframework.io/"&gt;Operator Lifecycle Management (OLM)&lt;/a&gt;
and how we integrated the &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator"&gt;Monocle Operator&lt;/a&gt; as an OLM package into the
&lt;a class="reference external" href="https://operatorhub.io"&gt;operatorhub.io&lt;/a&gt; catalog.&lt;/p&gt;
&lt;p&gt;This article is a follow up post of &amp;quot;&lt;a class="reference external" href="https://www.softwarefactory-project.io/monocle-operator-phase-1-basic-install.html"&gt;Monocle Operator - Phase 1 â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to introduce the &lt;a class="reference external" href="https://olm.operatorframework.io/"&gt;Operator Lifecycle Management (OLM)&lt;/a&gt;
and how we integrated the &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator"&gt;Monocle Operator&lt;/a&gt; as an OLM package into the
&lt;a class="reference external" href="https://operatorhub.io"&gt;operatorhub.io&lt;/a&gt; catalog.&lt;/p&gt;
&lt;p&gt;This article is a follow up post of &amp;quot;&lt;a class="reference external" href="https://www.softwarefactory-project.io/monocle-operator-phase-1-basic-install.html"&gt;Monocle Operator - Phase 1 - Basic
Install&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="what-is-olm"&gt;
&lt;h2&gt;What is OLM&lt;/h2&gt;
&lt;p&gt;The Operator Lifecycle Management (OLM) is an approach to simplify
Kubernetes operators deployment, updates and lifecycle management.&lt;/p&gt;
&lt;p&gt;OLM is composed of two main components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Catalogs&lt;/strong&gt;: These are collections of Operators that can be
installed on a Kubernetes cluster. Catalogs can be public or private,
and can be hosted on container registries. Each Operator in a catalog
has a corresponding manifest that describes its deployment,
configuration, and management. Catalogs allow users to easily
discover, install and upgrade Operators on their cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Operator Lifecycle Manager&lt;/strong&gt;: This is the control plane
component of OLM that manages the installation, upgrade, and removal
of Operators on a Kubernetes cluster. The Operator Lifecycle Manager
is responsible for ensuring that Operators are deployed and managed
according to their defined lifecycle. It monitors the status of
Operators, handles upgrades and rollbacks, and ensures that
dependencies between Operators are resolved correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OLM can be seen as a Linux Package Manager like &lt;strong&gt;DNF&lt;/strong&gt;, indeed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;both rely on a manifest to ensure proper installation and
configuration of the package (the operator).&lt;/li&gt;
&lt;li&gt;OLM and DNF package managers ensure that dependencies are resolved
and the component is deployed and managed according to its defined
lifecycle.&lt;/li&gt;
&lt;li&gt;both systems offer a standardized approach to managing software
components, improving system stability and efficiency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a &lt;a class="reference external" href="https://olm.operatorframework.io/docs/glossary/"&gt;glossary&lt;/a&gt; of the OLM terminology.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="olm-installation"&gt;
&lt;h2&gt;OLM installation&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://sdk.operatorframework.io/"&gt;operator-sdk&lt;/a&gt; tool provides a command to deploy OLM on a
Kubernetes deployment. This command creates various k8s resources to
spawn OLM components and associated roles, role bindinds, service users,
...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;operator-sdk olm install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the Ansible role &lt;a class="reference external" href="https://github.com/openstack-k8s-operators/ansible-microshift-role"&gt;ansible-microshift-role&lt;/a&gt; provides an easy
way to deploy a lightweight OpenShift environment (using &lt;a class="reference external" href="https://github.com/openshift/microshift"&gt;Microshift&lt;/a&gt;)
with OLM enabled.&lt;/p&gt;
&lt;p&gt;This command creates two namespaces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;olm&lt;/strong&gt;: It contains the OLM system with the &lt;strong&gt;catalog-operator&lt;/strong&gt;,
&lt;strong&gt;olm-operator&lt;/strong&gt; and the &lt;strong&gt;packageserver&lt;/strong&gt; deployments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;operators&lt;/strong&gt;: It is the placeholder where one can subscribe to one
or more operators. No resource is populated here by the OLM
installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n olm get deployment
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
catalog-operator   &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           17d
olm-operator       &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           17d
packageserver      &lt;span class="m"&gt;2&lt;/span&gt;/2     &lt;span class="m"&gt;2&lt;/span&gt;            &lt;span class="m"&gt;2&lt;/span&gt;           17d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are able to extend our k8s instance by installing operators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="olm-usage"&gt;
&lt;h2&gt;OLM usage&lt;/h2&gt;
&lt;p&gt;In order to learn more about OLM, we will deploy the &lt;a class="reference external" href="https://operatorhub.io/operator/cert-manager"&gt;cert-manager
operator&lt;/a&gt; from OLM.&lt;/p&gt;
&lt;p&gt;The OLM installation should come with the &lt;strong&gt;Community Operators&lt;/strong&gt;
catalog installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n olm get catalogsources operatorhubio-catalog
NAME                    DISPLAY               TYPE   PUBLISHER        AGE
operatorhubio-catalog   Community Operators   grpc   OperatorHub.io   17d

kubectl -n olm get -o json catalogsources operatorhubio-catalog &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.spec&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;displayName&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Community Operators&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;grpcPodConfig&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;securityContextConfig&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;restricted&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;quay.io/operatorhubio/catalog:latest&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;publisher&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;OperatorHub.io&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;sourceType&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;grpc&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;updateStrategy&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;registryPoll&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;60m&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can explore the catalog for available operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# There is more than 300 operators listed so let&amp;#39;s grep for cert-manager&lt;/span&gt;
kubectl -n olm get packagemanifests &lt;span class="p"&gt;|&lt;/span&gt; grep cert-manager
cert-manager                               Community Operators   17d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;strong&gt;PackageManifest&lt;/strong&gt; resource describes the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The name and description of the package being managed.&lt;/li&gt;
&lt;li&gt;The package's installation process and any dependencies required.&lt;/li&gt;
&lt;li&gt;The default channel and available channels through which different
versions of the package can be installed.&lt;/li&gt;
&lt;li&gt;A list of all versions of the package available through each channel.&lt;/li&gt;
&lt;li&gt;The latest version of the package available by channel
(&lt;tt class="docutils literal"&gt;currentCSV&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;A list of CRDs that are installed along with the package.&lt;/li&gt;
&lt;li&gt;A list of global configuration variables for the package.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;PackageManifest&lt;/strong&gt; resource could be heavy to inspect, here are
some commands to help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Show the package provider&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.provider&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;The cert-manager maintainers&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;https://cert-manager.io/&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Show available channels for that package&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.channels[].name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;candidate&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;stable&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Show the default install channel of that package&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.defaultChannel&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;stable&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Last version available (package head) in the stable channel&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.channels[] | select(.name == &amp;quot;stable&amp;quot;) | .currentCSV&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;cert-manager.v1.11.0&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Versions from the stable channel&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.channels[] | select(.name == &amp;quot;stable&amp;quot;) | .entries&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;cert-manager.v1.11.0&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.11.0&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;cert-manager.v1.10.2&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.10.2&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  ...
&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# And finally, to show the CSV of the last stable version&lt;/span&gt;
kubectl -n olm get -o json  packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.channels[] | select(.name == &amp;quot;stable&amp;quot;) | .currentCSVDesc&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;PackageManifest&lt;/strong&gt; is built from a list of &lt;a class="reference external" href="https://docs.openshift.com/container-platform/4.12/operators/understanding/olm-common-terms.html#olm-common-terms-csv_olm-common-terms"&gt;ClusterServiceVersion
definition&lt;/a&gt;. The &lt;strong&gt;ClusterServiceVersion&lt;/strong&gt; resource defines information
that is required to run the Operator, like the RBAC rules it requires
and which custom resources (CRs) it manages or depends on.&lt;/p&gt;
&lt;p&gt;To install the &lt;strong&gt;cert-manager&lt;/strong&gt; operator from the &lt;strong&gt;stable&lt;/strong&gt; channel we
need to create a &lt;a class="reference external" href="https://olm.operatorframework.io/docs/concepts/crds/subscription/"&gt;Subscription&lt;/a&gt;. It describes which channel of an
operator package to subscribe to, and whether to perform updates
automatically or manually.&lt;/p&gt;
&lt;p&gt;Create the file &lt;em&gt;cert-manager.yaml&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;operators.coreos.com/v1alpha1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-cert-manager&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;operators&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stable&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cert-manager&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;operatorhubio-catalog&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;sourceNamespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;olm&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# By default is automatic upgrade plan&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# installPlanApproval: Manual&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then apply it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Apply the subscription&lt;/span&gt;
kubectl apply -f cert-manager.yaml

&lt;span class="c1"&gt;# Get the subscription&lt;/span&gt;
kubectl -n operators get sub
NAME                  PACKAGE            SOURCE                  CHANNEL
my-cert-manager       cert-manager       operatorhubio-catalog   stable

&lt;span class="c1"&gt;# Ensure the CSV is now available&lt;/span&gt;
kubectl -n operators get csv
NAME                       DISPLAY            VERSION   REPLACES                   PHASE
cert-manager.v1.11.0       cert-manager       &lt;span class="m"&gt;1&lt;/span&gt;.11.0    cert-manager.v1.10.2       Succeeded
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that an &lt;a class="reference external" href="https://olm.operatorframework.io/docs/concepts/crds/installplan/"&gt;InstallPlan&lt;/a&gt; resource has been created too. This is where
you can inspect installation steps on the operator. This resource could
be inspected in case the requested operator failed to be installed, for
instance when the &lt;tt class="docutils literal"&gt;csv&lt;/tt&gt; resource has not been created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n operators describe installplan install-tkcrn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default the &lt;strong&gt;Subscription&lt;/strong&gt; set the &lt;strong&gt;installPlanApproval&lt;/strong&gt; as
automatic. However if you decide to set it as manual, when OLM detects a
possible upgrade (because of a new version available in the &lt;tt class="docutils literal"&gt;stable&lt;/tt&gt;
channel), then the &lt;tt class="docutils literal"&gt;InstallPlan&lt;/tt&gt; will need to be manually updated to
approve the upgrade. The process is described &lt;a class="reference external" href="https://olm.operatorframework.io/docs/concepts/crds/subscription/#manually-approving-upgrades-via-subscriptions"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beside the fact that the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cert-manager.v1.11.0&lt;/span&gt;&lt;/tt&gt; CSV phase is
&lt;tt class="docutils literal"&gt;Succeeded&lt;/tt&gt; we can verify that the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cert-manager&lt;/span&gt;&lt;/tt&gt; operator is
running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n operators get all &lt;span class="p"&gt;|&lt;/span&gt; grep cert-manager
pod/cert-manager-68c79ccf94-hkbp8                               &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          62m
pod/cert-manager-cainjector-86c79dd959-q6x2q                    &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          62m
pod/cert-manager-webhook-b685d8cd4-9q6jj                        &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          62m
service/cert-manager                                          ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.43.98.149    &amp;lt;none&amp;gt;        &lt;span class="m"&gt;9402&lt;/span&gt;/TCP   63m
service/cert-manager-webhook                                  ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.43.18.198    &amp;lt;none&amp;gt;        &lt;span class="m"&gt;443&lt;/span&gt;/TCP    63m
service/cert-manager-webhook-service                          ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.43.34.128    &amp;lt;none&amp;gt;        &lt;span class="m"&gt;443&lt;/span&gt;/TCP    62m
deployment.apps/cert-manager                               &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           62m
deployment.apps/cert-manager-cainjector                    &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           62m
deployment.apps/cert-manager-webhook                       &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           62m
replicaset.apps/cert-manager-68c79ccf94                               &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;       62m
replicaset.apps/cert-manager-cainjector-86c79dd959                    &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;       62m
replicaset.apps/cert-manager-webhook-b685d8cd4                        &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;       62m
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The requested operator is installed in the same namespace as its
&lt;tt class="docutils literal"&gt;Subscription&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We can also ensure that the CRDs provided by the operator are available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl api-resources &lt;span class="p"&gt;|&lt;/span&gt; grep cert-manager
challenges                                     acme.cert-manager.io/v1                      &lt;span class="nb"&gt;true&lt;/span&gt;         Challenge
orders                                         acme.cert-manager.io/v1                      &lt;span class="nb"&gt;true&lt;/span&gt;         Order
certificaterequests               cr,crs       cert-manager.io/v1                           &lt;span class="nb"&gt;true&lt;/span&gt;         CertificateRequest
certificates                      cert,certs   cert-manager.io/v1                           &lt;span class="nb"&gt;true&lt;/span&gt;         Certificate
clusterissuers                                 cert-manager.io/v1                           &lt;span class="nb"&gt;false&lt;/span&gt;        ClusterIssuer
issuers                                        cert-manager.io/v1                           &lt;span class="nb"&gt;true&lt;/span&gt;         Issuer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, let's create a &lt;tt class="docutils literal"&gt;namespace&lt;/tt&gt; and request an &lt;tt class="docutils literal"&gt;Issuer&lt;/tt&gt; resource
to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cert-manager&lt;/span&gt; operator&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;Create the file &lt;em&gt;issuer.yaml&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cert-manager.io/v1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Issuer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;example-issuer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;selfSigned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then apply the resource in a new namespace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl ceate ns test-cert-manager

kubectl -n test-cert-manager apply -f issuer.yaml
issuer.cert-manager.io/example-issuer created

kubectl -n test-cert-manager get issuers
NAME             READY   AGE
example-issuer   True    7s
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="packaging-monocle-for-olm"&gt;
&lt;h2&gt;Packaging Monocle for OLM&lt;/h2&gt;
&lt;p&gt;Recently we wrote an &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator"&gt;Operator&lt;/a&gt; for the Monocle project and we were
curious about how to leverage OLM to make it easily consumable.&lt;/p&gt;
&lt;p&gt;An &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator/tree/6b8a02f9087f83798f732ede85cbe35c0304cb58/install"&gt;operator.yaml&lt;/a&gt; file was generated by the
&lt;tt class="docutils literal"&gt;kustomize build config/default&lt;/tt&gt; command, then it was possible to
apply the Monocle CRD and to &lt;em&gt;install&lt;/em&gt; the required resources
(namespace, serviceuser, roles, role bindings, deployments, ...) to get
the operator running.&lt;/p&gt;
&lt;p&gt;From there the process was to create the &lt;a class="reference external" href="https://olm.operatorframework.io/docs/glossary/#bundle"&gt;bundle&lt;/a&gt; (or the package)
using the &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt; target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make bundle
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates a directory called &lt;strong&gt;bundle&lt;/strong&gt; which contains some
sub-directories:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;manifests&lt;/em&gt;: containing mainly the CRD(s), and the
ClusterServiceVersion.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;metadata&lt;/em&gt;: this is some annotations to describe the bundle.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tests/scorecard&lt;/em&gt;: this describes various validation tests to be
performed on the bundle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we would like to &lt;strong&gt;validate our bundle&lt;/strong&gt;, so we need to perform the
following steps.&lt;/p&gt;
&lt;p&gt;First we need to &lt;strong&gt;build and publish&lt;/strong&gt; the &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt;'s container image.
To do so, our &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; provides the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bundle-build&lt;/span&gt;&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bundle-push&lt;/span&gt;&lt;/tt&gt; targets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;BUNDLE_IMG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;quay.io/change-metrics/monocle-operator-bundle:v0.0.1
make bundle-build bundle-push
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;operator-sdk&lt;/span&gt; run bundle&lt;/tt&gt; &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/cli/operator-sdk_run_bundle/"&gt;command&lt;/a&gt; to &lt;strong&gt;validate
the bundle&lt;/strong&gt;. The command drives these steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create an &lt;tt class="docutils literal"&gt;operator catalog&lt;/tt&gt; containing only our &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Run the &lt;tt class="docutils literal"&gt;registry&lt;/tt&gt; pod to serve the new &lt;tt class="docutils literal"&gt;catalog&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;tt class="docutils literal"&gt;CatalogSource&lt;/tt&gt; resource to make the new &lt;tt class="docutils literal"&gt;catalog&lt;/tt&gt;
available&lt;/li&gt;
&lt;li&gt;Create a &lt;tt class="docutils literal"&gt;Subscription&lt;/tt&gt; and wait for the &lt;tt class="docutils literal"&gt;ClusterServiceVersion&lt;/tt&gt;
to be available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this command needs to pull the bundle image from a real
container registry thus we run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bundle-push&lt;/span&gt;&lt;/tt&gt; to publish it. Running a
&lt;a class="reference external" href="https://hub.docker.com/_/registry"&gt;local registry&lt;/a&gt; could ease that process by avoiding the need to push
the bundle image on &lt;tt class="docutils literal"&gt;dockerhub&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;quay.io&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create ns test-bundle
oc adm policy add-scc-to-user privileged system:serviceaccount:test-bundle:default
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;BUNDLE_IMG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;quay.io/change-metrics/monocle-operator-bundle:v0.0.1
operator-sdk run bundle &lt;span class="nv"&gt;$BUNDLE_IMG&lt;/span&gt; --namespace test-bundle --security-context-config restricted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0010&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Creating a File-Based Catalog of the bundle &lt;span class="s2"&gt;&amp;quot;quay.io/change-metrics/monocle-operator-bundle:v0.0.1&amp;quot;&lt;/span&gt;
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0011&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Generated a valid File-Based Catalog
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0016&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Created registry pod: quay-io-change-metrics-monocle-operator-bundle-v0-0-1
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0016&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Created CatalogSource: monocle-operator-catalog
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0016&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; OperatorGroup &lt;span class="s2"&gt;&amp;quot;operator-sdk-og&amp;quot;&lt;/span&gt; created
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0016&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Created Subscription: monocle-operator-v0-0-1-sub
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0022&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Approved InstallPlan install-74dzl &lt;span class="k"&gt;for&lt;/span&gt; the Subscription: monocle-operator-v0-0-1-sub
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0022&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Waiting &lt;span class="k"&gt;for&lt;/span&gt; ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; to reach &lt;span class="s1"&gt;&amp;#39;Succeeded&amp;#39;&lt;/span&gt; phase
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0022&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Waiting &lt;span class="k"&gt;for&lt;/span&gt; ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; to appear
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0035&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Found ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; phase: Pending
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0036&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Found ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; phase: InstallReady
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0037&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Found ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; phase: Installing
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0046&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Found ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; phase: Succeeded
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0047&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; OLM has successfully installed &lt;span class="s2"&gt;&amp;quot;monocle-operator.v0.0.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;test-bundle&lt;/span&gt;&lt;/tt&gt; namespace can be cleaned using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;operator-sdk cleanup --namespace test-bundle monocle-operator
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0001&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; subscription &lt;span class="s2"&gt;&amp;quot;monocle-operator-v0-0-1-sub&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0001&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; customresourcedefinition &lt;span class="s2"&gt;&amp;quot;monocles.monocle.monocle.change-metrics.io&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0002&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; clusterserviceversion &lt;span class="s2"&gt;&amp;quot;monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0002&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; catalogsource &lt;span class="s2"&gt;&amp;quot;monocle-operator-catalog&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0003&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; operatorgroup &lt;span class="s2"&gt;&amp;quot;operator-sdk-og&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0003&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Operator &lt;span class="s2"&gt;&amp;quot;monocle-operator&amp;quot;&lt;/span&gt; uninstalled
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At that point, we have a &lt;em&gt;validated&lt;/em&gt; &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt;. The next step is to
publish/distribute it. To do so, either:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;we need to &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/olm-integration/tutorial-bundle/#deploying-bundles-in-production"&gt;maintain a catalog image&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;or we distribute the bundle via an existing catalog like
&lt;a class="reference external" href="https://operatorhub.io"&gt;operatorhub.io&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="monocle-operator-on-operatorhub-io"&gt;
&lt;span id="monocle-operator-on-operatorhubio"&gt;&lt;/span&gt;&lt;h2&gt;Monocle operator on OperatorHub.io&lt;/h2&gt;
&lt;p&gt;We decided to propose the operator to the &lt;strong&gt;Community Catalog&lt;/strong&gt;. This
section explains the process we followed to publish the Monocle Operator
on &lt;a class="reference external" href="https://operatorhub.io"&gt;operatorhub.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we ensured that the &lt;strong&gt;required bundle CSV fields are present&lt;/strong&gt;
(see the &lt;a class="reference external" href="https://k8s-operatorhub.github.io/community-operators/packaging-required-fields/"&gt;required fields&lt;/a&gt;). If not the CSV template needs to be
adapted in
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;config/manifests/bases/monocle-operator.clusterserviceversion.yaml&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;make bundle&lt;/tt&gt; command must be run to apply changes to the
&lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt; directory.&lt;/p&gt;
&lt;p&gt;We also &lt;strong&gt;validated the bundle&lt;/strong&gt; with the &lt;tt class="docutils literal"&gt;validate&lt;/tt&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;operator-sdk bundle validate ./bundle --select-optional &lt;span class="nv"&gt;suite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;operatorframework
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; All validation tests have completed successfully
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore we &lt;strong&gt;run the scorecard validation&lt;/strong&gt; (built-in basic and OLM
tests. See &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/testing-operators/scorecard/"&gt;scorecard&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;operator-sdk scorecard bundle -o text --pod-security restricted -n scorecard
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally we created a &lt;a class="reference external" href="https://github.com/k8s-operatorhub/community-operators/pull/2668"&gt;Pull Request&lt;/a&gt; on the
&lt;a class="reference external" href="https://github.com/k8s-operatorhub/community-operators"&gt;k8s-operatorhub/community-operators&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;This Pull Request includes a copy of the &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt; located in a new
directory called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;operators/monocle-operator/0.0.1&lt;/span&gt;&lt;/tt&gt;. The
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;operators/monocle-operator/ci.yaml&lt;/span&gt;&lt;/tt&gt; file was also needed to define
&lt;a class="reference external" href="https://k8s-operatorhub.github.io/community-operators/operator-ci-yaml/#operator-versioning"&gt;various settings&lt;/a&gt; for the operatorhub.io's CI pipelines.&lt;/p&gt;
&lt;p&gt;After some back and forth, mainly thanks to the operatorhub.io's CI
catching issues, the Monocle Operator Pull Request landed and few
minutes later (propably the time required by the CD pipeline to update
and publish the catalog) it &lt;a class="reference external" href="https://operatorhub.io/operator/monocle-operator"&gt;appeared on the operatorhub.io website&lt;/a&gt;,
and was available on our Microshift installation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n olm get packagemanifests monocle-operator
NAME               CATALOG               AGE
monocle-operator   Community Operators   18d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Feel free to refer to the upstream &lt;a class="reference external" href="https://k8s-operatorhub.github.io/community-operators/"&gt;Add your operator - documentation&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-conclude"&gt;
&lt;h2&gt;To conclude&lt;/h2&gt;
&lt;p&gt;As we are working closer with OpenShift and the Go Operator pattern, our
team decided to investigate OLM to gather knowledge. After some readings
and experimentations we were able to figure out how to leverage OLM to
distribute a Kubernetes operator. We used the Monocle Operator to
perform that experimentation because it was almost &lt;em&gt;ready to bundle&lt;/em&gt;.
This experimentation will help us to better align our further
developments for &lt;strong&gt;SF 4.X&lt;/strong&gt; aka the &lt;a class="reference external" href="https://github.com/softwarefactory-project/sf-operator"&gt;sf-operator&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Reproducible Shell environments via Nix Flakes</title><link href="https://www.softwarefactory-project.io/reproducible-shell-environments-via-nix-flakes.html" rel="alternate"></link><published>2023-01-24T00:00:00+00:00</published><updated>2023-01-24T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2023-01-24:/reproducible-shell-environments-via-nix-flakes.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to help you getting started with Nix Flakes in order to
ease the distribution of reproducible shell environments.&lt;/p&gt;
&lt;div class="section" id="what-is-nix-flakes-1"&gt;
&lt;span id="what-is-nix-flakes"&gt;&lt;/span&gt;&lt;h2&gt;What is Nix Flakes ?&lt;/h2&gt;
&lt;p&gt;In a previous &lt;a class="reference external" href="https://www.softwarefactory-project.io/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html"&gt;blog post about nix-shell&lt;/a&gt; we have introduced &lt;a class="reference external" href="https://nixos.org/"&gt;Nix&lt;/a&gt; and
how â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to help you getting started with Nix Flakes in order to
ease the distribution of reproducible shell environments.&lt;/p&gt;
&lt;div class="section" id="what-is-nix-flakes-1"&gt;
&lt;span id="what-is-nix-flakes"&gt;&lt;/span&gt;&lt;h2&gt;What is Nix Flakes ?&lt;/h2&gt;
&lt;p&gt;In a previous &lt;a class="reference external" href="https://www.softwarefactory-project.io/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html"&gt;blog post about nix-shell&lt;/a&gt; we have introduced &lt;a class="reference external" href="https://nixos.org/"&gt;Nix&lt;/a&gt; and
how to benefit from the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nix-shell&lt;/span&gt;&lt;/tt&gt; feature to manage shareable and
reproducible shell environments.&lt;/p&gt;
&lt;p&gt;However defining an environment using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nix-shell&lt;/span&gt;&lt;/tt&gt; lacks of
standardization. The new Nix &lt;a class="reference external" href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-flake.html"&gt;flake&lt;/a&gt; standardizes the usage of Nix
artifacts. The Nix project provides a new command called &lt;tt class="docutils literal"&gt;nix flake&lt;/tt&gt;
which handles &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-enable-nix-flake"&gt;
&lt;h2&gt;How to enable nix flake&lt;/h2&gt;
&lt;p&gt;To install Nix please refer to the &lt;a class="reference external" href="https://www.softwarefactory-project.io/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html#how-to-install-nix"&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;flake&lt;/tt&gt; feature is still considered experimental thus a specific
Nix configuration is necessary in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/nix/nix.conf&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
experimental-features = nix-command flakes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="a-shell-environment-described-as-a-flake"&gt;
&lt;h2&gt;A Shell environment described as a Flake&lt;/h2&gt;
&lt;p&gt;Based on the &lt;a class="reference external" href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-flake.html#flake-format"&gt;format definition for a flake&lt;/a&gt; we can rewrite our
&lt;a class="reference external" href="https://www.softwarefactory-project.io/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html#a-simple-shell-nix-definition"&gt;previous simple shell&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
  description = &amp;quot;My-project build environment&amp;quot;;
  nixConfig.bash-prompt = &amp;quot;[nix(my-project)] &amp;quot;;
  inputs = { nixpkgs.url = &amp;quot;github:nixos/nixpkgs/22.11&amp;quot;; };

  outputs = { self, nixpkgs }:
    let
      pkgs = nixpkgs.legacyPackages.x86_64-linux.pkgs;
      fooScript = pkgs.writeScriptBin &amp;quot;foo.sh&amp;quot; ''
        #!/bin/sh
        echo $FOO
      '';
    in {
      devShells.x86_64-linux.default = pkgs.mkShell {
        name = &amp;quot;My-project build environment&amp;quot;;
        buildInputs = [
          pkgs.python39
          pkgs.python39Packages.tox
          pkgs.python39Packages.flake8
          pkgs.python39Packages.requests
          pkgs.python39Packages.ipython
          fooScript
        ];
        shellHook = ''
          echo &amp;quot;Welcome in $name&amp;quot;
          export FOO=&amp;quot;BAR&amp;quot;
        '';
      };
    };
}
&lt;/pre&gt;
&lt;p&gt;Then by running &lt;tt class="docutils literal"&gt;nix develop&lt;/tt&gt; we enter the shell (&lt;tt class="docutils literal"&gt;devShell&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Note that, when working inside a Git repository, Nix expects that the
&lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; file is known by git (at least staged with
&lt;tt class="docutils literal"&gt;git add flake.nix&lt;/tt&gt;) or it will ignore it.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;nix flake check&lt;/tt&gt; command can be used to validate the flake file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nix develop
Welcome in My-project-build-environment
[nix(my-project)] python --version
Python 3.9.15
[nix(my-project)] which ipython
/nix/store/1kgkssy7lkgsxpjii618ddjq2v03473x-python3.9-ipython-8.4.0/bin/ipython
&lt;/pre&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; file must follow a specific format based on the &lt;a class="reference external" href="https://nixos.org/guides/nix-language.html"&gt;Nix
language&lt;/a&gt;. The base structure in an &lt;tt class="docutils literal"&gt;attribute set&amp;nbsp; { ... }&lt;/tt&gt; with
specific attributes such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;description: a simple string that defines the flake's purpose.&lt;/li&gt;
&lt;li&gt;inputs: an attribute set that defines the flake's dependencies.&lt;/li&gt;
&lt;li&gt;outputs: a function that returns an attribute set with arbitratry
attributes. However nix' subcommands expect to find specific
attributes in the flake's output. For instance the &lt;tt class="docutils literal"&gt;nix develop&lt;/tt&gt;
expects to find the &lt;tt class="docutils literal"&gt;devShells&lt;/tt&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that we pin the &lt;tt class="docutils literal"&gt;nixpkgs&lt;/tt&gt; version to the &lt;tt class="docutils literal"&gt;22.11&lt;/tt&gt; tag by
overiding the nixpkgs's url in the input attribute. For better
reproducibility, nix creates a &lt;tt class="docutils literal"&gt;flake.lock&lt;/tt&gt; file to pin dependencies
to specific git hashes. This &lt;tt class="docutils literal"&gt;lock&lt;/tt&gt; file should be distributed along
with the &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;The nix flake &lt;tt class="docutils literal"&gt;metadata&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;show&lt;/tt&gt; subcommands can be used to
display flake' dependencies and output.&lt;/p&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;flake&lt;/tt&gt; can be easily shared via a git repository. For instance the
&lt;a class="reference external" href="https://github.com/change-metrics/monocle"&gt;Monocle&lt;/a&gt; project provides a flake with a &lt;tt class="docutils literal"&gt;devShell&lt;/tt&gt; output then to
get the same development environment than Monocle' developers, then
simply run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Note that the first run might take long to fetch binary dependencies from the
# nix cache and to build unavailable binary dependencies (from the cache).

$ nix develop github:change-metrics/monocle
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="a-flake-to-build-the-software-factory-website"&gt;
&lt;h2&gt;A flake to build the Software Factory website&lt;/h2&gt;
&lt;p&gt;Our website requires some dependencies available on the system in order
to be built. To ensure that each teams' member can build the website
locally, without spending time understanding which dependencies are
needed and then struggling with versions/incompatibility issues, we
provide a &lt;tt class="docutils literal"&gt;flake&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;Here is the &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; we are using:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
  description = &amp;quot;sf.io site builder flake&amp;quot;;
  inputs = { nixpkgs.url = &amp;quot;github:nixos/nixpkgs/22.11&amp;quot;; };

  outputs = { self, nixpkgs }:
    let
      pkgs = nixpkgs.legacyPackages.x86_64-linux.pkgs;
      buildScript = pkgs.writeScriptBin &amp;quot;build-site.sh&amp;quot; ''
        #!/bin/sh

        pushd src
        ./blog-htmx.sh
        ./blog-practical-haskell-use-cases.sh
        ./blog-introducing-effects.sh
        ./blog-introducing-functional-programming-to-pythonistas.sh
        ./blog-sf-resources-in-reason.sh
        ./blog-nix-shell.sh
        ./blog-nix-shell-flakes.sh
        popd

        pushd website
        pelican content -o output
        popd
      '';
    in {
      devShells.x86_64-linux.default = pkgs.mkShell {
        name = &amp;quot;Website toolings shell&amp;quot;;
        buildInputs = [ pkgs.pandoc pkgs.python39Packages.pelican buildScript ];
        shellHook = ''
          echo &amp;quot;Welcome in the nix shell for $name&amp;quot;
          echo &amp;quot;Run the build-site.sh command to build the website in website/output&amp;quot;
          echo &amp;quot;Then run: firefox website/output/index.html&amp;quot;
        '';
      };
    };
}
&lt;/pre&gt;
&lt;p&gt;It is then really easy to build the website:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nix develop
$ build-site.sh
&lt;/pre&gt;
&lt;div class="section" id="package-override"&gt;
&lt;h3&gt;Package override&lt;/h3&gt;
&lt;p&gt;If a specific package version is needed in the shell, then it is
possible to override a package' attributes to make a new &lt;a class="reference external" href="https://nixos.org/manual/nix/stable/language/derivations.html"&gt;derivation&lt;/a&gt;.
For instance, let's say that we need, for some reason, to stick to
&lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; version 4.7.2 instead of 4.8.0 version provided in
&lt;tt class="docutils literal"&gt;nixpkgs&lt;/tt&gt; 22.11. Then, we can override the &lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/22.11/pkgs/development/python-modules/pelican/default.nix"&gt;current definition&lt;/a&gt; in
our &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; using the &lt;tt class="docutils literal"&gt;overridePythonAttrs&lt;/tt&gt; function this way:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
let pelican = pkgs.python39Packages.pelican.overridePythonAttrs (old: rec {
  version = &amp;quot;4.7.2&amp;quot;;
  src = pkgs.fetchFromGitHub {
    owner = &amp;quot;getpelican&amp;quot;;
    repo = old.pname;
    rev = &amp;quot;refs/tags/${version}&amp;quot;;
    hash = &amp;quot;sha256-ZBGzsyCtFt5uj9mpOpGdTzGJET0iwOAgDTy80P6anRU=&amp;quot;;
    postFetch = ''
      rm -r $out/pelican/tests/output/custom_locale/posts
    '';
  };
});
&lt;/pre&gt;
&lt;p&gt;and finally use the new &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; derivation in the &lt;tt class="docutils literal"&gt;buildInputs&lt;/tt&gt; of
the &lt;tt class="docutils literal"&gt;mkShell&lt;/tt&gt; function' attributes.&lt;/p&gt;
&lt;p&gt;Note that you might need to set &lt;tt class="docutils literal"&gt;hash&lt;/tt&gt; to an empty string to force Nix
to provide you the new hash to be set in the override.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>CI/CD workflow offered by Zuul/Nodepool on Software Factory</title><link href="https://www.softwarefactory-project.io/cicd-workflow-offered-by-zuulnodepool-on-software-factory.html" rel="alternate"></link><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2019-01-31:/cicd-workflow-offered-by-zuulnodepool-on-software-factory.html</id><summary type="html">&lt;div class="section" id="high-level-overview-of-software-factory"&gt;
&lt;h2&gt;High level overview of Software Factory&lt;/h2&gt;
&lt;p&gt;Zuul and Nodepool are at the core of Software Factory.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zuul is a job scheduler/runner.&lt;/li&gt;
&lt;li&gt;Nodepool is the node provisioner on which Zuul executes jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Software Factory provides a fully functional Zuul and Nodepool platform out of
the box through default settings and â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="high-level-overview-of-software-factory"&gt;
&lt;h2&gt;High level overview of Software Factory&lt;/h2&gt;
&lt;p&gt;Zuul and Nodepool are at the core of Software Factory.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zuul is a job scheduler/runner.&lt;/li&gt;
&lt;li&gt;Nodepool is the node provisioner on which Zuul executes jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Software Factory provides a fully functional Zuul and Nodepool platform out of
the box through default settings and addionnal (optional) components like
a logserver or an ELK stack. These components are deployed and configured to
efficiently integrate with Zuul and Nodepool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory-components"&gt;
&lt;h2&gt;Software Factory components&lt;/h2&gt;
&lt;p&gt;The diagram, below, shows the deployed components as part of Software Factory.
Grey boxes are mandatory components and blue boxes are optional components.&lt;/p&gt;
&lt;img alt="None" src="images/sf-arch.png" /&gt;
&lt;div class="section" id="mandatory-components"&gt;
&lt;h3&gt;Mandatory components&lt;/h3&gt;
&lt;p&gt;These components are essential parts of Software Factory and are installed as
part of every deployment.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Apache: HTTP frontend on top of the APIs and serve WEB UI.&lt;/li&gt;
&lt;li&gt;Zuul: The job scheduler and runner that is used to define and run jobs.&lt;/li&gt;
&lt;li&gt;Nodepool: Zuul's companion pool manager that provides clean
and re-producible node contexts to Zuul for job execution.&lt;/li&gt;
&lt;li&gt;Zookeeper: The distributed database for Zuul and Nodepool.&lt;/li&gt;
&lt;li&gt;MariaDB: SQL database backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="optional-components"&gt;
&lt;h3&gt;Optional components&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gerrit: A git hosting and code review service.&lt;/li&gt;
&lt;li&gt;Logserver: A simple job logs/artifacts storage and publication service.&lt;/li&gt;
&lt;li&gt;ELK: The ElasticSearch, Logstash, Kibana stack. It can be used to
index job's artifacts and search through.&lt;/li&gt;
&lt;li&gt;ARA: Service to create comprehensive html Zuul/Ansible job execution reports.&lt;/li&gt;
&lt;li&gt;Log-analyse: Service to ease anomalies detection on job failures based on
baselines of previous succeeded jobs.&lt;/li&gt;
&lt;li&gt;Code-Search: Service that provides a code search accross git repositories
hosted by Software Factory.&lt;/li&gt;
&lt;li&gt;repoXplorer: Service that provides metrics on code contributions.&lt;/li&gt;
&lt;li&gt;Storyboard: A story/issue tracker.&lt;/li&gt;
&lt;li&gt;cgit: A fast git repositories web browser.&lt;/li&gt;
&lt;li&gt;Grafana/InfluxDB: The stack that provide Software Factory usage metrics.&lt;/li&gt;
&lt;li&gt;Paste: A pastie like service.&lt;/li&gt;
&lt;li&gt;Etherpad: A collaborative editor.&lt;/li&gt;
&lt;li&gt;Mumble: An audio chat service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Software Factory can integrate with existing Code Review systems such as Gerrit
or Github as well as regular Git source code repositories.&lt;/p&gt;
&lt;p&gt;Software Factory relies on a &lt;em&gt;config&lt;/em&gt; git repository
(configuration as code) where configuration is validated and deployed via
Zuul. Two Zuul jobs handle this configuration as code workflow:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;em&gt;config-chek&lt;/em&gt; job ensures the proposed configuration is valid before the
configuration change is merged.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;config-update&lt;/em&gt; job deploys, after review and approval,
the configuration on Software Factory. For instance, a change on the
Nodepool configuration, will be deployed on the Nodepool services
and services will be reload without any operator intervention.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-nodepool"&gt;
&lt;h3&gt;Zuul/Nodepool&lt;/h3&gt;
&lt;div class="section" id="the-architecture"&gt;
&lt;h4&gt;The architecture&lt;/h4&gt;
&lt;p&gt;This diagram shows Zuul and Nodepool's components as well as external
services involved in the architecture.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-nodepool-arch.png" /&gt;
&lt;p&gt;Zuul receives events from code review systems which act as source stimuli
from which Zuul makes job triggering decisions.&lt;/p&gt;
&lt;p&gt;Example events:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pull-Request/Review created,&lt;/li&gt;
&lt;li&gt;Pull-Request/Review updated,&lt;/li&gt;
&lt;li&gt;Pull-Request/Review commented,&lt;/li&gt;
&lt;li&gt;Pull-Request/Review merged,&lt;/li&gt;
&lt;li&gt;Tag created,&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Zuul's scheduler, based on its configuration and the received events,
requests services from other Zuul components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zuul's mergers prepare project(s)'s (to be tested) source code by
rebasing or merging the PR/Code-review X on top of master branch of
the repository.&lt;/li&gt;
&lt;li&gt;Zuul's executors, prepare the Ansible workspace, and run ansible-playbook
against the test node(s).&lt;/li&gt;
&lt;li&gt;The Zuul web service provides the REST API. The API is mainly used by
the Zuul UI to provide jobs execution status and projects configuration
overview.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Gearman bus is the communication channel between Zuul's services.&lt;/p&gt;
&lt;p&gt;Nodepool manages nodes/containers' lifecycle and communicates with the
Zuul scheduler via the Zookeeper service. Zookeeper stores node requests and
statuses. Zuul stores a node request in Zookeeper to acquire a node for a job
execution. Nodepool's launchers look for requests and fullfil them
by spawning a node or a container on the PaaS/CaaS or static node provider.
Nodepool destroys the ephemeral node(s) after the job(s) execution.&lt;/p&gt;
&lt;p&gt;Furthermore, Nodepool is able to build cloud images from a Disk Image Builder
definition. When a new image is created, Nodepool uploads it to each cloud
provider configured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-execution-workflow"&gt;
&lt;h4&gt;Job execution workflow&lt;/h4&gt;
&lt;p&gt;This sequence diagram shows Zuul and Nodepool components involved in
the run of a single job from the trigger stimuli (the Code-Review proposed
patch), to the job result returned to the patch author.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-nodepool-workflow.png" /&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;An event is received (PR/Review created/updated).&lt;/li&gt;
&lt;li&gt;Zuul requests a node from Nodepool in order to execute a job.&lt;/li&gt;
&lt;li&gt;Nodepool reserves an existing one or spawns a new node and notifies
that the node is available.&lt;/li&gt;
&lt;li&gt;Zuul executor runs the job (an Ansible playbook) against the node.&lt;/li&gt;
&lt;li&gt;Zuul releases the node to be deleted.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If multiple jobs are configured to be run, then the scheduler will request
the corresponding amount of nodes to Nodepool. A single job may require
multiple nodes (multi-nodes job), Zuul will fullfil the requirement by
requesting the resources to Nodepool.&lt;/p&gt;
&lt;p&gt;Note that fresh nodes are requested from Nodepool for each job execution. This
ensures an healthy workspace and reduces job flakiness. Furthermore Nodepool
is quota awared then it is capable of notifying Zuul to wait for resources
to become available.&lt;/p&gt;
&lt;p&gt;Now look at how the executor handles a job execution.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-executor-workflow.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zuul executor creates an Ansible workspace with:&lt;ul&gt;
&lt;li&gt;An inventory file&lt;/li&gt;
&lt;li&gt;The playbooks (pre-run, run, post-run)&lt;/li&gt;
&lt;li&gt;Additional roles (pull from git repositories)&lt;/li&gt;
&lt;li&gt;Fetch dependant repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Zuul Ansible runs Ansible playbooks (job phases) isolated in bubblewrap&lt;ul&gt;
&lt;li&gt;pre-run&lt;ul&gt;
&lt;li&gt;push source code on the test node&lt;/li&gt;
&lt;li&gt;validate the test node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;run&lt;ul&gt;
&lt;li&gt;unittest&lt;/li&gt;
&lt;li&gt;functional test&lt;/li&gt;
&lt;li&gt;code style&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;post-run&lt;ul&gt;
&lt;li&gt;build the job ARA report&lt;/li&gt;
&lt;li&gt;export the logs/artifacts to the logserver&lt;/li&gt;
&lt;li&gt;export the logs/artifacts to the ELK stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="architecture-of-zuul-job"&gt;
&lt;h4&gt;Architecture of Zuul job&lt;/h4&gt;
&lt;p&gt;A Zuul job is a YAML definition that describes (non-exhaustive list):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The job name.&lt;/li&gt;
&lt;li&gt;Its parent job.&lt;/li&gt;
&lt;li&gt;The required Ansible roles for the job playbooks.&lt;/li&gt;
&lt;li&gt;The secrets required (if any) (i.e.: passwords/private keys).&lt;/li&gt;
&lt;li&gt;The nodeset, required Nodepool nodes for the job playbooks.&lt;/li&gt;
&lt;li&gt;The pre-run phase: the preparation playbook (if any).&lt;ul&gt;
&lt;li&gt;Any actions that must be performed before the real
job such as installing dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The run phase: the job playbook.&lt;/li&gt;
&lt;li&gt;The post-run phase: the post action playbook.&lt;ul&gt;
&lt;li&gt;Any action that must be performed after the real
job such as artifacts retrieval.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is the Zuul &lt;em&gt;base&lt;/em&gt; job created as part of a standard Software Factory
installation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;null&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;The base job.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pre-run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/base/pre.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;post-run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/base/post.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;zuul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sf-jobs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;zuul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;zuul-jobs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1800&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;attempts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;site_sflogs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;container&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;runc-centos&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pre-run playbook is used to synchronize repository sources to the test node.
The post-run playbook is used to fetch artifacts from the test node,
copy them to the log server and index them into ELK.&lt;/p&gt;
&lt;p&gt;This base job may be simply inherited by any other job.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run tox pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/tox.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This concludes this quick overview of the workflow offered by Zuul and Nodepool
using Software Factory.&lt;/p&gt;
&lt;p&gt;Some useful links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/"&gt;Zuul documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zuul-ci.org/docs/nodepool/"&gt;Nodepool documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.softwarefactory-project.io/docs/3.2/operator/quickstart.html"&gt;Software Factory documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul Hands-On blog post series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software Factory in action on &lt;a class="reference external" href="https://softwarefactory-project.io"&gt;softwarefactory-project.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Pagure Driver Update</title><link href="https://www.softwarefactory-project.io/zuul-pagure-driver-update.html" rel="alternate"></link><published>2018-12-18T00:00:00+00:00</published><updated>2018-12-18T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-12-18:/zuul-pagure-driver-update.html</id><summary type="html">&lt;p&gt;Zuul brings lots of advanced features for Continuous Integration and deserves to
be usable by more projects, I decided to start the implementation of a Pagure
driver for Zuul.&lt;/p&gt;
&lt;div class="section" id="zuul"&gt;
&lt;h2&gt;Zuul&lt;/h2&gt;
&lt;p&gt;Zuul is a powerful gating system that helps project maintainers to never break
development branches. Thanks to unique features such â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Zuul brings lots of advanced features for Continuous Integration and deserves to
be usable by more projects, I decided to start the implementation of a Pagure
driver for Zuul.&lt;/p&gt;
&lt;div class="section" id="zuul"&gt;
&lt;h2&gt;Zuul&lt;/h2&gt;
&lt;p&gt;Zuul is a powerful gating system that helps project maintainers to never break
development branches. Thanks to unique features such as speculative merging and
support for dependencies between repositories, Zuul leverages CI at scale. It also
provides out the box support for Ansible (Zuul jobs are Ansible playbooks).
Currently Zuul interfaces with Gerrit and Github as input sources. To learn more
about Zuul you can access &lt;a class="reference external" href="https://zuul-ci.org/"&gt;the Zuul website&lt;/a&gt; and
&lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-1-what-is-zuul.html"&gt;the Zuul Hands-on blog post series&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pagure"&gt;
&lt;h2&gt;Pagure&lt;/h2&gt;
&lt;p&gt;Pagure is a git-centered forge written in Python, mainly but not only
used by the Fedora project. The pagure API provides most of the features needed
by Zuul to gate Pull-Requests. You can see Pagure in action &lt;a class="reference external" href="https://pagure.io/browse/projects/"&gt;here&lt;/a&gt;
and learn more about it on &lt;a class="reference external" href="https://pagure.io/pagure"&gt;the project's page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pagure is quite similar to Github as it handles Pull-Requests, where a PR is a branch
composed of one or more commits. A PR can be commented, reviewed, updated,
CI flagged, and merged via the API. CI results for a PR are reported via the
flag mechanism (success/failure/pending). Code review is done via comments with
a :thumbsup: or a :thumbsdown: emoji. Pagure computes a score based on those emoji
and only permits a maintainer to merge a PR if &lt;em&gt;that score beats a minimum value set in
the repository's settings&lt;/em&gt;. Pagure publishes repository events via web hooks and provides
repository API tokens to perform authenticated calls like merging a PR or adding
a CI flag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-zuul-pagure-driver"&gt;
&lt;h2&gt;The Zuul Pagure driver&lt;/h2&gt;
&lt;p&gt;Here is a link to the patch on OpenStack's code review server: &lt;a class="reference external" href="https://review.openstack.org/#/c/604404/"&gt;https://review.openstack.org/#/c/604404/&lt;/a&gt;.
It provides, for a single repository, a check/gate/post workflow and has been validated
with Pagure's current master branch at the time of writing (future Pagure 5.2).&lt;/p&gt;
&lt;p&gt;The driver makes use of the web hooks to receive repository events such as
&lt;em&gt;Pull Request Opened&lt;/em&gt; or &lt;em&gt;Pull Request Commented&lt;/em&gt;. Events are received via Zuul
Web and sent to the Zuul scheduler. The driver is able to read Pull-Requests
status to get the Review score via the count of :thumbsup:/:thumbsdown:
emoji, the CI status (flags) and the merge state. It is also able to set CI status
and Pull-Request comments.&lt;/p&gt;
&lt;p&gt;The driver provides &lt;strong&gt;Triggers&lt;/strong&gt; and &lt;strong&gt;Requires&lt;/strong&gt; filter attributes that can be used
to define a Zuul pipeline. Below is an example of a Zuul pipeline for a Pagure
source called &lt;em&gt;pagure.sftests.com&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;independent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;False&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_pull_request&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;comment&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(?i)^\s*recheck\s*$&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_pull_request&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;opened&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;changed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pending&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;failure&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;gate&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;dependent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;precedence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;high&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;False&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;success&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_pull_request&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;status&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;success&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_pull_request_review&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;thumbsup&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pending&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;failure&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;post-review&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;independent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;precedence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;low&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_push&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;^refs/heads/.*$&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Currently three type of events can be used as triggers in pipelines:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pg_pull_request: when a Pull-Request change&lt;/li&gt;
&lt;li&gt;pg_pull_request_review: when a comment is added to a Pull-Request&lt;/li&gt;
&lt;li&gt;pg_push: when a git branch is updated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following requirements are supported:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;merged: the Pull-Request merged status&lt;/li&gt;
&lt;li&gt;status: the CI flag success/failure/pending&lt;/li&gt;
&lt;li&gt;score: the score based on thumbsup/thumbsdown count&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="first-pr-gated-by-zuul-on-pagure-io"&gt;
&lt;h2&gt;First PR gated by Zuul on pagure.io&lt;/h2&gt;
&lt;img alt="None" src="images/zuul-pagure-1.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-a-pagure-repository-for-zuul"&gt;
&lt;h2&gt;Setting up a Pagure repository for Zuul&lt;/h2&gt;
&lt;p&gt;The API token ACLs must allow at least:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Comment on a pull-request&lt;/li&gt;
&lt;li&gt;Flag a pull-request&lt;/li&gt;
&lt;li&gt;Merge a pull-request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The web hook target must be (in repository settings):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http:/"&gt;http:/&lt;/a&gt;/&amp;lt;zuul-web&amp;gt;/zuul/api/connection/&amp;lt;conn-name&amp;gt;/payload&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The repository settings to be set:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Always merge (? better to match internal merge strategy of Zuul)&lt;/li&gt;
&lt;li&gt;Minimum score to merge Pull-Request&lt;/li&gt;
&lt;li&gt;Notify on Pull-Request flag&lt;/li&gt;
&lt;li&gt;Pull-Requests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The connection to define in /etc/zuul/zuul.conf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[connection pagure.sftests.com]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pagure&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;webhook_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;XXXXX&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;baseurl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;https://pagure.sftests.com/pagure&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;cloneurl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;https://pagure.sftests.com/pagure/git&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;api_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;YYYYY&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rfe-merged-on-pagure-to-support-zuul"&gt;
&lt;h2&gt;RFE merged on Pagure to support Zuul&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/3857"&gt;https://pagure.io/pagure/pull-request/3857&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/3832"&gt;https://pagure.io/pagure/pull-request/3832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/3980"&gt;https://pagure.io/pagure/pull-request/3980&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/4024"&gt;https://pagure.io/pagure/pull-request/4024&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/4121"&gt;https://pagure.io/pagure/pull-request/4121&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="current-issues"&gt;
&lt;h2&gt;Current issues&lt;/h2&gt;
&lt;p&gt;Here is the list of the issues that currently prevent the driver to provide the
same capabilities as the Gerrit and Github drivers.&lt;/p&gt;
&lt;div class="section" id="blocking-issues"&gt;
&lt;h3&gt;Blocking issues&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;API token, webhook target and hook payload signature are set by repository.
This makes difficult to support multiple repositories like in Gerrit or Github.
An idea could be to group projects and set those settings at project's group
level. There is an open RFE for this: &lt;a class="reference external" href="https://pagure.io/pagure/issue/3948"&gt;https://pagure.io/pagure/issue/3948&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="non-blocking-issues"&gt;
&lt;h3&gt;Non blocking issues&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pagure does not send an event when a git tag is added/removed&lt;/li&gt;
&lt;li&gt;Pagure does not send an event when a branch is created&lt;/li&gt;
&lt;li&gt;Pagure does not send an event when a branch is deleted&lt;/li&gt;
&lt;li&gt;Repository API tokens seem to expire after 60 days&lt;/li&gt;
&lt;li&gt;The Git-receive hook payload does not contain the list of commits that are a part
of the merged PR with a detail of the files. An extra call to the merger is needed
to detect if a .zuul.yaml exists at the root of the reporitory file tree.&lt;/li&gt;
&lt;li&gt;Pagure does not reset the review score when a PR code is updated.
There is an open RFE for this: &lt;a class="reference external" href="https://pagure.io/pagure/issue/3985"&gt;https://pagure.io/pagure/issue/3985&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CI status flag's &lt;em&gt;updated&lt;/em&gt; field unit is the second, it'd be better to have
values to the millisecond, in order to avoid sorting issues when statuses are
changed in the span of a second.&lt;/li&gt;
&lt;li&gt;Zuul needs to be able to search commits that set a dependency (depends-on)
to a specific commit to reset jobs run when a dependency is changed. On
Gerrit and Github, searching through commit messages is possible and used by
Zuul. Pagure does not offer this feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="follow-up"&gt;
&lt;h2&gt;Follow up&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Showcase the driver to the Pagure folks&lt;/li&gt;
&lt;li&gt;Implement &lt;a class="reference external" href="https://pagure.io/pagure/issue/3948"&gt;https://pagure.io/pagure/issue/3948&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Write the driver's unit tests and documentation&lt;/li&gt;
&lt;li&gt;By Pagure 5.3, have a multi-repository (depends-on) workflow working&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any help welcome :)&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Hands on - part 4 - The gate pipeline</title><link href="https://www.softwarefactory-project.io/zuul-hands-on-part-4-the-gate-pipeline.html" rel="alternate"></link><published>2018-10-02T00:00:00+00:00</published><updated>2018-10-02T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-10-02:/zuul-hands-on-part-4-the-gate-pipeline.html</id><summary type="html">&lt;p&gt;In this article, we will explain one of the most important features of Zuul:
the &lt;strong&gt;dependent pipeline&lt;/strong&gt;, also known as the &lt;strong&gt;gate pipeline&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The examples and commands that follow are intended to be run on a Software Factory
sandbox where a â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, we will explain one of the most important features of Zuul:
the &lt;strong&gt;dependent pipeline&lt;/strong&gt;, also known as the &lt;strong&gt;gate pipeline&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The examples and commands that follow are intended to be run on a Software Factory
sandbox where a &lt;strong&gt;demo-repo&lt;/strong&gt; repository exists. You should have such an environment
after following the previous articles in this series:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To deploy a Software Factory sandbox please read the &lt;a class="reference external" href="https://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;first article of the series&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To create the &lt;strong&gt;demo-repo&lt;/strong&gt; repository, please follow the sections &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#clone-the-config-repository"&gt;Clone the config repository&lt;/a&gt;
and &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#define-the-demo-repo-repository"&gt;Define the demo-repo repository&lt;/a&gt; sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Incidentally, most of the links reference &lt;em&gt;sftests.com&lt;/em&gt; which is the default
domain of the sandbox. Make sure to adapt the links if necessary.&lt;/p&gt;
&lt;p&gt;If you have already deployed a Software Factory sandbox and created a snapshot as
suggested, you can restore this snapshot in order to follow this article on a clean environment.
In that case make sure the virtual machine's time is correct post
restoration. If not fix it by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl stop ntpd&lt;span class="p"&gt;;&lt;/span&gt; ntpd -gq&lt;span class="p"&gt;;&lt;/span&gt; systemctl start ntpd
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-broken-master-phenomenon"&gt;
&lt;h2&gt;The broken master phenomenon&lt;/h2&gt;
&lt;p&gt;Keeping the master branch sane can be difficult when:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;validating a patch takes a long time (eg. complex test suite)&lt;/li&gt;
&lt;li&gt;the amount of patches proposals submitted to a project is quite high&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Until now, the best practices to mitigate these problems were to enforce the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;run continuous builds and test suites on master after each commit or as often
as possible&lt;/li&gt;
&lt;li&gt;have several maintainers granted with the power to reject or accept patches
into the project's master branch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These best practices, however, do &lt;strong&gt;not&lt;/strong&gt; guarantee the health of the master branch
&lt;em&gt;at any given time&lt;/em&gt;. Let's consider this very common scenario on a project with
two maintainers, &lt;strong&gt;M1&lt;/strong&gt; and &lt;strong&gt;M2&lt;/strong&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;M1&lt;/strong&gt; reviews change &lt;strong&gt;A&lt;/strong&gt; before integration: s.he applies &lt;strong&gt;A&lt;/strong&gt; to the current tip of the
master branch (&lt;strong&gt;HEAD+A&lt;/strong&gt;) and tests the code. After testing succeeds, &lt;strong&gt;M1&lt;/strong&gt; refreshes the
master branch, commits and pushes &lt;strong&gt;A&lt;/strong&gt; to the remote central repository.&lt;/li&gt;
&lt;li&gt;In the time it took &lt;strong&gt;M1&lt;/strong&gt; to test and push &lt;strong&gt;A&lt;/strong&gt;, &lt;strong&gt;M2&lt;/strong&gt; had approved change &lt;strong&gt;B&lt;/strong&gt; and pushed
it to the remote repository. This means the master branch history is actually &lt;strong&gt;HEAD+B+A&lt;/strong&gt;,
instead of &lt;strong&gt;HEAD+A&lt;/strong&gt; as it was validated by &lt;strong&gt;M1&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Unfortunately, &lt;strong&gt;B&lt;/strong&gt; has side effects on &lt;strong&gt;A&lt;/strong&gt; and the master branch is no longer building or
passing tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other words the master branch is &lt;strong&gt;broken&lt;/strong&gt;, and everybody working on the project
is impacted in some way, either because their own code won't build, or because they
have to figure out the problem and fix it.&lt;/p&gt;
&lt;p&gt;Sure, continuous builds help catch the problem as soon as possible, but if
building and running tests are costly operations in time and/or resources, and
therefore aren't performed after every commit, how many patches might have landed
since the breakage, making it even more difficult to pinpoint the change that caused
the issue?&lt;/p&gt;
&lt;p&gt;One could also object that maintainers just have to always make sure to
validate patches on the latest version of the master branch, but it might just
be too hard to enforce manually in projects where commits can occur faster than
testing or building. One would have to implement some form of &amp;quot;merging semaphore&amp;quot;,
meaning that maintainers would have to wait on each other, beating the purpose of
having several of them in the first place.&lt;/p&gt;
&lt;p&gt;But what if we could avoid that trouble altogether and &lt;strong&gt;guarantee&lt;/strong&gt; by design
of the integration pipeline that the master branch can pass tests and build &lt;em&gt;at all times&lt;/em&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-the-gate-keeper"&gt;
&lt;h2&gt;Zuul, the gate keeper&lt;/h2&gt;
&lt;p&gt;The trick is to deport the merging powers of the maintainers to a &lt;strong&gt;single, automated
&amp;quot;gate keeper&amp;quot;&lt;/strong&gt;. Maintainers approve patches for merging, and the gate keeper makes
sure they can land without breaking the master branch.&lt;/p&gt;
&lt;p&gt;Enter &lt;strong&gt;Zuul&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Thanks to its gate pipeline, Zuul decides whether a patch can be merged
into the master branch or not, by ensuring the patch is always tested over the
latest version of master prior to merging. This pipeline is designed to avoid
breaking the master branch.&lt;/p&gt;
&lt;p&gt;The gate pipeline takes care of the git rebases in order
to run CI job(s) on the expected state of the master at the time the patch will
be merged. This is called &lt;strong&gt;speculative testing&lt;/strong&gt;. Let's see how it changes the
previous scenario, this time in chronological order:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Maintainer &lt;strong&gt;M2&lt;/strong&gt; approves change &lt;strong&gt;B&lt;/strong&gt; for merging. Zuul gates it by running the acceptance
tests on &lt;strong&gt;HEAD+B&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Maintainer &lt;strong&gt;M1&lt;/strong&gt; approves change &lt;strong&gt;A&lt;/strong&gt; for merging as Zuul is still in the process of
gating &lt;strong&gt;B&lt;/strong&gt;. Zuul gates it by running the acceptance tests on &lt;strong&gt;HEAD+B+A&lt;/strong&gt;. This is where the
speculation bit occurs, since &lt;strong&gt;B&lt;/strong&gt; isn't in master yet but is &lt;em&gt;expected&lt;/em&gt; to land before &lt;strong&gt;A&lt;/strong&gt;,
&lt;em&gt;assuming its gating ends with success&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Testing on &lt;strong&gt;HEAD+B&lt;/strong&gt; succeeds, &lt;strong&gt;B&lt;/strong&gt; is merged into the master branch.&lt;/li&gt;
&lt;li&gt;Testing on &lt;strong&gt;HEAD+B+A&lt;/strong&gt; fails, &lt;strong&gt;A&lt;/strong&gt; is rejected. The maintainer or &lt;strong&gt;A&lt;/strong&gt;'s author must
rework it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(for simplicity's sake, we'll call acceptance tests, builds, and generally any kind
of automation used to validate a patch &lt;em&gt;&amp;quot;jobs&amp;quot;&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;The gate pipeline ensures that the merging order of patches
is the same as their approval order. If jobs for change &lt;strong&gt;B&lt;/strong&gt;, that is on top
of the gate pipeline, are still running when all jobs for change &lt;strong&gt;A&lt;/strong&gt; have
succeeded, then zuul will wait for &lt;strong&gt;B&lt;/strong&gt;'s jobs to finish to merge &lt;strong&gt;B&lt;/strong&gt;
then &lt;strong&gt;A&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What happens if &lt;strong&gt;B&lt;/strong&gt; is rejected, though? The gate pipeline is able to discard
failing patches and rebase subsequent changes in order to optimize testing time.
For example, let's imagine changes &lt;strong&gt;A&lt;/strong&gt;, &lt;strong&gt;B&lt;/strong&gt; and &lt;strong&gt;C&lt;/strong&gt; have entered the gate
pipeline in that order, and that a job fails when &lt;strong&gt;B&lt;/strong&gt; is on top of &lt;strong&gt;A&lt;/strong&gt;. The
pipeline will evolve like so:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;HEAD + A&lt;/li&gt;
&lt;li&gt;HEAD + A + B&lt;/li&gt;
&lt;li&gt;HEAD + A + B + C&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;HEAD + A&lt;/li&gt;
&lt;li&gt;HEAD + A + B &lt;strong&gt;FAIL&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;HEAD + A + B + C &lt;strong&gt;CANCELED&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;HEAD + A&lt;/li&gt;
&lt;li&gt;HEAD + A + C &lt;strong&gt;REBASED AND RESTARTED&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead of waiting for &lt;strong&gt;C&lt;/strong&gt;'s jobs that will propably fail as &lt;strong&gt;B&lt;/strong&gt; introduced
an issue, Zuul immediately cancels &lt;strong&gt;C&lt;/strong&gt;'s jobs, rebases &lt;strong&gt;C&lt;/strong&gt; on &lt;strong&gt;A&lt;/strong&gt; and restarts &lt;strong&gt;C&lt;/strong&gt;'s
jobs. Zuul reports the issue for &lt;strong&gt;B&lt;/strong&gt; on the code review system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-test-it"&gt;
&lt;h2&gt;Let's test it&lt;/h2&gt;
&lt;p&gt;Clone the &lt;strong&gt;demo-repo&lt;/strong&gt; and provision it with
&lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/hoz-4-demo-repo.tgz"&gt;this demo code&lt;/a&gt; .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/demo-repo
&lt;span class="nb"&gt;cd&lt;/span&gt; demo-repo
git review -s &lt;span class="c1"&gt;# Enter admin as username&lt;/span&gt;
tar -xzf /tmp/hoz-4-demo-repo.tgz -C .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, we are going to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;define the &lt;strong&gt;demo-repo&lt;/strong&gt; project's pipelines&lt;/li&gt;
&lt;li&gt;modify the project's tox configuration to add some delaying in the CI process&lt;/li&gt;
&lt;li&gt;submit and approve three patches to simulate how Zuul detects a future broken
master and discards the broken patch.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="setup-ci-jobs"&gt;
&lt;h3&gt;Setup CI jobs&lt;/h3&gt;
&lt;p&gt;First, in &lt;strong&gt;.zuul.yaml&lt;/strong&gt;, define the project's pipelines. We use the virtual job
&lt;strong&gt;noop&lt;/strong&gt; in the check pipeline to force Zuul to return a positive CI note
&lt;strong&gt;+1 Verified&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;noop&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, create the script &lt;strong&gt;trigger.sh&lt;/strong&gt; in order to better highlight the
gate pipeline's specificities in the status page. It adds some delay in the job's
execution time based on the existence of some files at the root of the project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f c3 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    sleep &lt;span class="m"&gt;20&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f c2 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f c1 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    sleep &lt;span class="m"&gt;90&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We make sure this script runs prior to unit testing by modifying the
&lt;strong&gt;tox.ini&lt;/strong&gt; file as indicated below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;pep8,py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[testenv]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;whitelist_externals&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;nose&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;./trigger.sh&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;nosetests -v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[testenv:pep8]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;flake8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;flake8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, submit the change on Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x trigger.sh
git add -A .
git commit -m&lt;span class="s2"&gt;&amp;quot;Init demo-repo pipelines&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do not forget to approve the patch to let it land.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="run-the-scenario"&gt;
&lt;h3&gt;Run the scenario&lt;/h3&gt;
&lt;p&gt;In this scenario we propose three changes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first change (&lt;strong&gt;A&lt;/strong&gt;) changes the value returned by the run method.&lt;/li&gt;
&lt;li&gt;The second change (&lt;strong&gt;B&lt;/strong&gt;) adds a test to verify the length of the string returned
by the run method is less than ten characters. This change simulates a
situation where the unit tests pass when based on the tip of master
but fail when rebased on (&lt;strong&gt;A&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;The third patch (&lt;strong&gt;C&lt;/strong&gt;) adds a README.md file to the project. Its purpose
is to see how Zuul rebases it on (&lt;strong&gt;A&lt;/strong&gt;), once the issue with (&lt;strong&gt;B&lt;/strong&gt;) is
detected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Patches are available in &lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/hoz-5-patches.tgz"&gt;this archive&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Reset local copy to the base commit&lt;/span&gt;
git reset --hard &lt;span class="k"&gt;$(&lt;/span&gt;git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;Init demo-repo pipelines&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;print $1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="k"&gt;)&lt;/span&gt;
git am ../A.patch &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git review -i

&lt;span class="c1"&gt;# Reset local copy to the base commit&lt;/span&gt;
git reset --hard HEAD^1
git am ../B.patch &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git review -i

&lt;span class="c1"&gt;# Reset local copy to the base commit&lt;/span&gt;
git reset --hard HEAD^1
git am ../C.patch &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git review -i
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the gate pipeline, before merging the changes, Zuul will test them speculatively.&lt;/p&gt;
&lt;p&gt;Let's approve all of them in the right order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;cmsgs&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Change run payload&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Add payload size test&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Add project readme file&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; msg &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$cmsgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nv"&gt;rn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;import sys,json,requests;&lt;/span&gt;
&lt;span class="s2"&gt;from requests.packages.urllib3.exceptions import InsecureRequestWarning;requests.packages.urllib3.disable_warnings(InsecureRequestWarning);&lt;/span&gt;
&lt;span class="s2"&gt;changes=json.loads(requests.get(&amp;#39;https://sftests.com/r/changes/&amp;#39;, verify=False).text[5:]);&lt;/span&gt;
&lt;span class="s2"&gt;m=[c for c in changes if c[&amp;#39;subject&amp;#39;] == sys.argv[1]][0];&lt;/span&gt;
&lt;span class="s2"&gt;print ( m[&amp;#39;_number&amp;#39;] )&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$msg&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Set change approval (CR+2 and W+1) on change &lt;/span&gt;&lt;span class="nv"&gt;$rn&lt;/span&gt;&lt;span class="s2"&gt;,1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
ssh -p &lt;span class="m"&gt;29418&lt;/span&gt; admin@sftests.com gerrit review &lt;span class="nv"&gt;$rn&lt;/span&gt;,1 --code-review +2 --workflow +1&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then have a look at &lt;a class="reference external" href="https://sftests.com/zuul/t/local/status"&gt;Zuul's status page (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part5-c1.png" /&gt;
&lt;p&gt;You should soon observe that Zuul has canceled the running job for &lt;strong&gt;C&lt;/strong&gt;, and rebased
it on change &lt;strong&gt;A&lt;/strong&gt; as &lt;strong&gt;B&lt;/strong&gt; introduces an issue when rebased on &lt;strong&gt;A&lt;/strong&gt;. Zuul won't
merge &lt;strong&gt;B&lt;/strong&gt; but will report the failure on Gerrit; &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;C&lt;/strong&gt; will build successfully
and be merged.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part5-c2.png" /&gt;
&lt;img alt="None" src="images/zuul-hands-on-part5-c3.png" /&gt;
&lt;p&gt;Let's have a look at the Zuul Scheduler's logs (&lt;em&gt;/var/log/zuul/scheduler.log&lt;/em&gt;), try ssh to sftests.com virtual machine:&lt;/p&gt;
&lt;p&gt;The executor is told to start the tox-py27 job for change 25 (rebased on 24)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2018-09-04 10:25:44,795 INFO zuul.ExecutorClient: Execute job tox-py27 (uuid: 93dd828f3e62481e88f329f2eeed2608) on nodes &amp;lt;NodeSet OrderedDict([((&amp;#39;container&amp;#39;,), &amp;lt;Node 0000000030 (&amp;#39;container&amp;#39;,):runc-centos&amp;gt;)])OrderedDict()&amp;gt; for change &amp;lt;Change 0x7f53140ffd30 25,1&amp;gt; with dependent changes [{&amp;#39;change&amp;#39;: &amp;#39;24&amp;#39;, &amp;#39;branch&amp;#39;: &amp;#39;master&amp;#39;, &amp;#39;change_url&amp;#39;: &amp;#39;https://sftests.com/r/24&amp;#39;, &amp;#39;project&amp;#39;: {&amp;#39;short_name&amp;#39;: &amp;#39;demo-repo&amp;#39;, &amp;#39;canonical_hostname&amp;#39;: &amp;#39;sftests.com&amp;#39;, &amp;#39;canonical_name&amp;#39;: &amp;#39;sftests.com/demo-repo&amp;#39;, &amp;#39;src_dir&amp;#39;: &amp;#39;src/sftests.com/demo-repo&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;demo-repo&amp;#39;}, &amp;#39;patchset&amp;#39;: &amp;#39;1&amp;#39;}, {&amp;#39;change&amp;#39;: &amp;#39;25&amp;#39;, &amp;#39;branch&amp;#39;: &amp;#39;master&amp;#39;, &amp;#39;change_url&amp;#39;: &amp;#39;https://sftests.com/r/25&amp;#39;, &amp;#39;project&amp;#39;: {&amp;#39;short_name&amp;#39;: &amp;#39;demo-repo&amp;#39;, &amp;#39;canonical_hostname&amp;#39;: &amp;#39;sftests.com&amp;#39;, &amp;#39;canonical_name&amp;#39;: &amp;#39;sftests.com/demo-repo&amp;#39;, &amp;#39;src_dir&amp;#39;: &amp;#39;src/sftests.com/demo-repo&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;demo-repo&amp;#39;}, &amp;#39;patchset&amp;#39;: &amp;#39;1&amp;#39;}]
# job started
2018-09-04 10:25:50,533 INFO zuul.ExecutorClient: Build &amp;lt;gear.Job 0x7f5314138080 handle: b&amp;#39;H:10.0.2.15:17&amp;#39; name: executor:execute unique: 93dd828f3e62481e88f329f2eeed2608&amp;gt; started
[...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The executor process reports the issue to the scheduler&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2018-09-04 10:27:25,748 INFO zuul.ExecutorClient: Build &amp;lt;gear.Job 0x7f5314138080 handle: b&amp;#39;H:10.0.2.15:17&amp;#39; name: executor:execute unique: 93dd828f3e62481e88f329f2eeed2608&amp;gt; complete, result FAILURE
# the scheduler detects the nearest change in the queue is a failure so 26 is rebased on 24
2018-09-04 10:27:25,769 INFO zuul.Pipeline.local.gate: Resetting builds for change &amp;lt;Change 0x7f5319341e10 26,1&amp;gt; because the item ahead, &amp;lt;QueueItem 0x7f5318208400 for &amp;lt;Change 0x7f53140ffd30 25,1&amp;gt; in gate&amp;gt;, is not the nearest non-failing item, &amp;lt;QueueItem 0x7f53140934a8 for &amp;lt;Change 0x7f5314096390 24,1&amp;gt; in gate&amp;gt;
[...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart the &lt;em&gt;tox-py27&lt;/em&gt; job with the updated context&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2018-09-04 10:27:35,513 INFO zuul.ExecutorClient: Execute job tox-py27 (uuid: adfe76dd347e4b0fba56395a319ac67a) on nodes &amp;lt;NodeSet OrderedDict([((&amp;#39;container&amp;#39;,), &amp;lt;Node 0000000033 (&amp;#39;container&amp;#39;,):runc-centos&amp;gt;)])OrderedDict()&amp;gt; for change &amp;lt;Change 0x7f5319341e10 26,1&amp;gt; with dependent changes [{&amp;#39;change&amp;#39;: &amp;#39;24&amp;#39;, &amp;#39;branch&amp;#39;: &amp;#39;master&amp;#39;, &amp;#39;change_url&amp;#39;: &amp;#39;https://sftests.com/r/24&amp;#39;, &amp;#39;project&amp;#39;: {&amp;#39;short_name&amp;#39;: &amp;#39;demo-repo&amp;#39;, &amp;#39;canonical_hostname&amp;#39;: &amp;#39;sftests.com&amp;#39;, &amp;#39;canonical_name&amp;#39;: &amp;#39;sftests.com/demo-repo&amp;#39;, &amp;#39;src_dir&amp;#39;: &amp;#39;src/sftests.com/demo-repo&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;demo-repo&amp;#39;}, &amp;#39;patchset&amp;#39;: &amp;#39;1&amp;#39;}, {&amp;#39;change&amp;#39;: &amp;#39;26&amp;#39;, &amp;#39;branch&amp;#39;: &amp;#39;master&amp;#39;, &amp;#39;change_url&amp;#39;: &amp;#39;https://sftests.com/r/26&amp;#39;, &amp;#39;project&amp;#39;: {&amp;#39;short_name&amp;#39;: &amp;#39;demo-repo&amp;#39;, &amp;#39;canonical_hostname&amp;#39;: &amp;#39;sftests.com&amp;#39;, &amp;#39;canonical_name&amp;#39;: &amp;#39;sftests.com/demo-repo&amp;#39;, &amp;#39;src_dir&amp;#39;: &amp;#39;src/sftests.com/demo-repo&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;demo-repo&amp;#39;}, &amp;#39;patchset&amp;#39;: &amp;#39;1&amp;#39;}]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Zuul's &lt;strong&gt;dependent pipeline&lt;/strong&gt; is an elegant way to ensure the health of code
repositories at all times, allowing developers to focus on more important things like
new features, and expanding and automating test coverage.&lt;/p&gt;
&lt;p&gt;In this article, we showcased a simple use case but the features of the
&lt;strong&gt;dependent pipeline&lt;/strong&gt; also apply to complex project testing scenarios
(supported by Zuul) like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;multiple, parallelized jobs&lt;/li&gt;
&lt;li&gt;cross projects testing&lt;/li&gt;
&lt;li&gt;multi nodes jobs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This concludes this article about the &lt;strong&gt;gate pipeline&lt;/strong&gt;. Stay tuned for the
next article about Zuul secrets usage.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>Zuul Hands on - part 3 - Use the Zuul jobs library</title><link href="https://www.softwarefactory-project.io/zuul-hands-on-part-3-use-the-zuul-jobs-library.html" rel="alternate"></link><published>2018-09-20T00:00:00+00:00</published><updated>2018-09-20T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-09-20:/zuul-hands-on-part-3-use-the-zuul-jobs-library.html</id><summary type="html">&lt;p&gt;In this article, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;provision a python project with a test suite based on tox&lt;/li&gt;
&lt;li&gt;explain how to use the &lt;a class="reference external" href="https://github.com/openstack-infra/zuul-jobs"&gt;zuul-jobs library&lt;/a&gt; in
order to benefit from jobs maintained by the Zuul community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that most of the links reference â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;provision a python project with a test suite based on tox&lt;/li&gt;
&lt;li&gt;explain how to use the &lt;a class="reference external" href="https://github.com/openstack-infra/zuul-jobs"&gt;zuul-jobs library&lt;/a&gt; in
order to benefit from jobs maintained by the Zuul community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that most of the links reference &lt;em&gt;sftests.com&lt;/em&gt; which is the default domain of the sandbox
documented in the &lt;em&gt;How to setup a Software Factory sandbox&lt;/em&gt; blog post. Make sure to adapt the
links if necessary.&lt;/p&gt;
&lt;p&gt;The examples and commands are intended to be run on a Software Factory
sandbox where a &lt;strong&gt;demo-repo&lt;/strong&gt; repository exists. You should have such an environment
after following the previous articles in this series:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To deploy a Software Factory sandbox please read the &lt;a class="reference external" href="https://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;first article of the series&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To create the &lt;strong&gt;demo-repo&lt;/strong&gt; repository, please follow the sections &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#clone-the-config-repository"&gt;Clone the config repository&lt;/a&gt;
and &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#define-the-demo-repo-repository"&gt;Define the demo-repo repository&lt;/a&gt; sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have already deployed a Software Factory sandbox and created a snapshot as
suggested, you can restore this snapshot to follow this article on a clean environment.
In that case make sure the system date of your virtual machine is correct post
restoration. If not fix it by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl stop ntpd&lt;span class="p"&gt;;&lt;/span&gt; ntpd -gq&lt;span class="p"&gt;;&lt;/span&gt; systemctl start ntpd
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-zuul-jobs-library"&gt;
&lt;h2&gt;The Zuul Jobs Library&lt;/h2&gt;
&lt;p&gt;By design Zuul promotes reusability in its approach to jobs. In that spirit, a
public jobs library is available at &lt;a class="reference external" href="https://git.zuul-ci.org"&gt;git.zuul-ci.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The library contains jobs that can be used directly as is, and more elementary
roles that can be included into your own playbooks.&lt;/p&gt;
&lt;p&gt;As of now the &lt;strong&gt;zuul-jobs&lt;/strong&gt; library covers mainly typical CI or
CD needs for Python and Javascript projects, for example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;publishing a package to PyPI&lt;/li&gt;
&lt;li&gt;tox tests&lt;/li&gt;
&lt;li&gt;npm commands&lt;/li&gt;
&lt;li&gt;documentation building with Sphinx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zuul however can support CI and CD for any language, and the library is a good
source of examples to start from when writing your own jobs. And if your jobs
are generic enough, do not hesitate to
&lt;a class="reference external" href="http://git.zuul-ci.org/cgit/zuul-jobs/"&gt;contribute upstream&lt;/a&gt; to enrich the library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="provision-the-demo-repo-source-code"&gt;
&lt;h2&gt;Provision the demo-repo source code&lt;/h2&gt;
&lt;p&gt;Clone &lt;strong&gt;demo-repo&lt;/strong&gt; and provision it with &lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/hoz-4-demo-repo.tgz"&gt;this demo code&lt;/a&gt; .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/demo-repo
&lt;span class="nb"&gt;cd&lt;/span&gt; demo-repo
git review -s &lt;span class="c1"&gt;# Enter admin as username&lt;/span&gt;
tar -xzf /tmp/hoz-4-demo-repo.tgz -C .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will add a &lt;strong&gt;tox ini file&lt;/strong&gt; to the repository, so unittests can be started
by running tox (obviously, make sure you have tox installed on your system first).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you went through the third article of the series to the end, remove also
the previous jobs and pipelines definitions, and the now useless hello.py file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm -r playbooks .zuul.yaml hello.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Push the code to the &lt;strong&gt;demo-repo&lt;/strong&gt; repository. Note that we don't use &lt;strong&gt;git review&lt;/strong&gt;
here to bypass the review process of Gerrit. We will reconfigure the CI later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Initialize demo-repo project&amp;quot;&lt;/span&gt;
git push gerrit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use-zuul-jobs-tox-jobs"&gt;
&lt;h2&gt;Use zuul-jobs tox jobs&lt;/h2&gt;
&lt;p&gt;Software Factory bundles a copy of the upstream zuul-jobs library. You can
browse zuul-jobs's &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=zuul-jobs.git;a=tree"&gt;source code (sftests.com)&lt;/a&gt; and
its &lt;a class="reference external" href="https://sftests.com/docs/zuul-jobs/"&gt;documentation (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As the &lt;strong&gt;demo-repo&lt;/strong&gt; source code comes with a tox file we can benefit from
the &lt;strong&gt;tox-py27&lt;/strong&gt; and &lt;strong&gt;tox-pep8&lt;/strong&gt; jobs defined in &lt;strong&gt;zuul-jobs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;demo-repo&lt;/strong&gt;, create the file &lt;strong&gt;.zuul.yaml&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then submit the change on Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .zuul.yaml
git commit -m&lt;span class="s2"&gt;&amp;quot;Init demo-repo pipelines&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both jobs will be started in parallel by Zuul, as can be seen in the
&lt;a class="reference external" href="https://sftests.com/zuul/t/local/status"&gt;status (sftests.com)&lt;/a&gt; page.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part4-c1.png" /&gt;
&lt;p&gt;When the jobs are completed, the produced artifacts will be stored on the log
server as usual. Along with the expected console log, inventory file and ARA report,
you will also find the logs of the execution stages of tox in the &lt;strong&gt;tox&lt;/strong&gt;
directory.&lt;/p&gt;
&lt;p&gt;This concludes this article on how to use the zuul jobs library with your projects.&lt;/p&gt;
&lt;p&gt;To use the upstream version of the Zuul jobs library instead of
the one embedded in Software Factory, you can do so by following the steps described in this
&lt;a class="reference external" href="https://sftests.com/docs/operator/zuul_operator.html#use-openstack-infra-zuul-jobs"&gt;configuration section (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Stay tuned for the next article.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>Zuul Hands on - part 2 - Your first gated patch with Zuul</title><link href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html" rel="alternate"></link><published>2018-09-17T00:00:00+00:00</published><updated>2018-09-17T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-09-17:/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html</id><summary type="html">&lt;p&gt;In this article, we will create a project and explain how to configure a basic
CI workflow in order to gate your first patch with Zuul. The instructions and
examples below are given for a sandbox deployment but are easy to adapt to any
deployment of Software Factory.&lt;/p&gt;
&lt;p&gt;To deploy â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, we will create a project and explain how to configure a basic
CI workflow in order to gate your first patch with Zuul. The instructions and
examples below are given for a sandbox deployment but are easy to adapt to any
deployment of Software Factory.&lt;/p&gt;
&lt;p&gt;To deploy a Software Factory sandbox please read this &lt;a class="reference external" href="https://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;article (How to setup a Software Factory sandbox)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that most of the links reference &lt;em&gt;sftests.com&lt;/em&gt; which is the default domain of the sandbox
documented in the &lt;em&gt;How to setup a Software Factory sandbox&lt;/em&gt; blog post. Make sure to adapt the
links if necessary.&lt;/p&gt;
&lt;div class="section" id="projects-in-software-factory"&gt;
&lt;h2&gt;Projects in Software Factory&lt;/h2&gt;
&lt;p&gt;A project is simply an umbrella entity that consists of one or several code
repositories, akin to a Github organization for example. It is a handy way to
regroup repositories by themes or purpose. A repository must belong to a
project. Don't be confused, in the Zuul terminology, a project is a git
repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-and-initialize-a-demo-project"&gt;
&lt;h2&gt;Create and initialize a demo project&lt;/h2&gt;
&lt;p&gt;We need to create a patch on the &lt;strong&gt;config&lt;/strong&gt; repository. This patch will consist in a
YAML file that describes the new repository.&lt;/p&gt;
&lt;p&gt;For the following example you will need to install git review package on your local machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dnf install git-review
or
yum install git-review
or
pip install git-review
or
python -m pip install git-review
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="clone-the-config-repository"&gt;
&lt;h3&gt;Clone the config repository&lt;/h3&gt;
&lt;p&gt;From your host, clone the config repository and configure &lt;strong&gt;git review&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/config
&lt;span class="nb"&gt;cd&lt;/span&gt; config
git review -s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted for your username on SF, use the &lt;strong&gt;admin&lt;/strong&gt; username.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="define-the-demo-repo-repository"&gt;
&lt;h3&gt;Define the demo-repo repository&lt;/h3&gt;
&lt;p&gt;Repositories are defined in the &lt;strong&gt;resources&lt;/strong&gt; folder of the config repository.
Each YAML file in this folder can define one or several Software Factory's
resources like a project or a Gerrit repository. You can read more about
the resources definition in &lt;a class="reference external" href="https://sftests.com/docs/user/resources_user.html"&gt;this documentation (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create the &lt;strong&gt;resources/demo-project.yaml&lt;/strong&gt; file and add the following into it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Demo project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;source-repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;A demo repository&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;acl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-acl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;acls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-acl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[access &amp;quot;refs/*&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;owner = group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[access &amp;quot;refs/heads/*&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Code-Review = -2..+2 group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Code-Review = -2..+2 group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Verified = -2..+2 group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Workflow = -1..+1 group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Workflow = -1..+1 group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Workflow = -1..+0 group Registered Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;submit = group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group Registered Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[access &amp;quot;refs/meta/config&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group Registered Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[receive]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;requireChangeId = true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[submit]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;mergeContent = false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;action = merge if necessary&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;strong&gt;git review&lt;/strong&gt; to send the patch on Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add resources/demo-project.yaml
git commit -m&lt;span class="s2"&gt;&amp;quot;Add demo repo&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two Zuul jobs are attached to the &lt;strong&gt;config&lt;/strong&gt; repository. The following
workflow applies to patches on this repository:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;strong&gt;config-check&lt;/strong&gt; job validates incoming config patches (linting, syntax, etc).
This job is run at &lt;strong&gt;check&lt;/strong&gt; time (when a new patch or a new revision of a
patch is pushed on Gerrit) and at &lt;strong&gt;gating&lt;/strong&gt; time (after the patch is approved
and just before it is merged).&lt;/li&gt;
&lt;li&gt;Once merged, the &lt;strong&gt;config-update&lt;/strong&gt; job is executed, in the &lt;em&gt;post*&lt;/em&gt; pipeline to
apply the new configuration to Software Factory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, Zuul ensures the &lt;strong&gt;Configuration as Code&lt;/strong&gt; workflow of
Software Factory.&lt;/p&gt;
&lt;p&gt;To confirm the repository creation, connect to the &lt;a class="reference external" href="http://sftests.com/r/"&gt;Gerrit interface (sftests.com)&lt;/a&gt;
as the admin user, then find the &lt;strong&gt;Add demo repo&lt;/strong&gt; patch. Make sure &lt;strong&gt;Zuul CI&lt;/strong&gt;
has voted &lt;strong&gt;+1 Verified&lt;/strong&gt;, then approve and schedule for merging by giving the patch
a &lt;strong&gt;+2 Code-Review&lt;/strong&gt; and a &lt;strong&gt;+1 Workflow&lt;/strong&gt;.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c1.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Wait a couple of minutes until the &lt;strong&gt;demo-repo&lt;/strong&gt; appears in the
&lt;a class="reference external" href="https://sftests.com/r/#/admin/projects/"&gt;Gerrit projects list page (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="provision-the-demo-repo-source-code"&gt;
&lt;h3&gt;Provision the demo-repo source code&lt;/h3&gt;
&lt;p&gt;We can now clone &lt;strong&gt;demo-repo&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/demo-repo
&lt;span class="nb"&gt;cd&lt;/span&gt; demo-repo
git review -s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted for your username on SF, use the &lt;strong&gt;admin&lt;/strong&gt; username.&lt;/p&gt;
&lt;p&gt;Let's add some basic code in &lt;strong&gt;demo-repo&lt;/strong&gt;; create the following &lt;strong&gt;hello.py&lt;/strong&gt; file
in the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello Zuul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello Zuul&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Push the code to the &lt;strong&gt;demo-repo&lt;/strong&gt; repository. Note that we don't use &lt;strong&gt;git review&lt;/strong&gt;
here; we simply bypass the review process of Gerrit since no CI testing is configured
for this repository yet. We can do that because of the ACLs we set earlier on
the repository. Note also that the remote is called &lt;strong&gt;gerrit&lt;/strong&gt; (which has been
set by &lt;em&gt;git review -s&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add hello.py
git commit -m&lt;span class="s2"&gt;&amp;quot;Initialize demo-repo project&amp;quot;&lt;/span&gt;
git push gerrit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-a-zuul-job-for-demo-repo"&gt;
&lt;h2&gt;Configure a Zuul job for demo-repo&lt;/h2&gt;
&lt;p&gt;We will now create a job and configure the &lt;strong&gt;demo-repo&lt;/strong&gt; project's Zuul pipelines,
so that this job is run at checking and gating times to ensure the quality of a
patch.&lt;/p&gt;
&lt;p&gt;Zuul allows jobs and pipelines to be defined in an external repository (this is useful if you
have several repositories that share the same testing needs, for example setting up a
common testing environment), but also to be defined within a code repository itself.
This is the approach we're going to use here.&lt;/p&gt;
&lt;p&gt;First, we define a job playbook in &lt;strong&gt;demo-repo&lt;/strong&gt;. To do so, create the
&lt;strong&gt;playbook&lt;/strong&gt; directory then the file &lt;strong&gt;playbooks/unittests.yaml&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run unittests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sleep&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;60;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;python&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-m&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;unittest&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-v&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;hello&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul.project.src_dir&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we are using the &lt;strong&gt;zuul.project.src_dir&lt;/strong&gt; variable to set the task's working
directory to the repository's root. Zuul defines a fair amount of variables that
can be used when writing jobs; the full list and descriptions are available
&lt;a class="reference external" href="https://sftests.com/docs/zuul/reference/jobs.html#variables"&gt;in the Zuul's documentation (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the second step, we define the &lt;strong&gt;unit-tests&lt;/strong&gt; Zuul job and attach it to the
project's Zuul pipelines. Zuul looks for a file named &lt;strong&gt;.zuul.yaml&lt;/strong&gt; within the
repository; this file defines jobs and pipelines for this repository.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;demo-repo&lt;/strong&gt;, create the file &lt;strong&gt;.zuul.yaml&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;unit-tests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run unittest&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/unittests.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;unit-tests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;unit-tests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Submit the change to Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Init demo-repo pipelines&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this time, we don't push directly the change to the repository but we
go through the code review system. This is because Zuul automatically detects
changes to the configuration files within a patch on the repository, and evaluates
them speculatively. In other words, the jobs we added to the check pipeline will
be run to validate the patch, even though this configuration change hasn't been merged yet.&lt;/p&gt;
&lt;p&gt;This lets you make sure that your changes to the CI do what you expect before applying
them globally, instead of potentially wrecking the CI for all contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gating-made-easy"&gt;
&lt;h2&gt;Gating made easy&lt;/h2&gt;
&lt;p&gt;With this rather simple patch, we tell Zuul to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;run the &lt;strong&gt;unit-tests&lt;/strong&gt; job in the &lt;strong&gt;check&lt;/strong&gt; pipeline, ie whenever a new
patch or a change to an existing patch is submitted to Gerrit.&lt;/li&gt;
&lt;li&gt;run the &lt;strong&gt;unit-tests&lt;/strong&gt; job in the &lt;strong&gt;gate&lt;/strong&gt; pipeline, ie right after a patch has
been approved but before it is merged. This is to acknowledge any discrepancies
between the state of the repository when the change was last tested and its
current state (several patches might have landed in between, with possible
interferences). We will dive into the details of the gate pipeline in a
follow-up article.&lt;/li&gt;
&lt;li&gt;call the Gerrit API to merge the patch if the job execution in the &lt;strong&gt;gate&lt;/strong&gt;
pipeline succeeded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;unit-tests&lt;/strong&gt; job is simple, it tells Zuul to execute the Ansible
playbook &lt;strong&gt;unittests.yaml&lt;/strong&gt;, which contains a single task, ie run python's
unittest module on the hello.py file.&lt;/p&gt;
&lt;p&gt;The job can be kept simple because it &amp;quot;inherits&amp;quot; automatically from the default
&lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=zuul.d/_jobs-base.yaml"&gt;base job (sftests.com)&lt;/a&gt;
which handles all of the grisly details like setting up the test environment and
exporting logs. The &lt;strong&gt;base&lt;/strong&gt; job, rather than being inherited, more accurately
encapsulates the unit-tests job, by running a &lt;strong&gt;pre&lt;/strong&gt; playbook before unit-tests,
and a &lt;strong&gt;post&lt;/strong&gt; playbook after &lt;strong&gt;unit-tests&lt;/strong&gt;, regardless of whether the latter
ended in success or failure.&lt;/p&gt;
&lt;p&gt;Because we haven't specified an inventory (also called &lt;em&gt;nodeset&lt;/em&gt;, due to Zuul's
multi-node capabilities), the &lt;strong&gt;unit-tests&lt;/strong&gt; job will be run on the default nodeset
defined in the &lt;strong&gt;base&lt;/strong&gt; job. By default in Software Factory it consists of a
single OCI container provided by the RunC driver of Nodepool.&lt;/p&gt;
&lt;p&gt;Software Factory's &lt;strong&gt;base&lt;/strong&gt; job's &lt;strong&gt;post&lt;/strong&gt; playbook exports the jobs' logs to the Software
Factory logs server.&lt;/p&gt;
&lt;p&gt;Now, check that Zuul has run the job in the check pipeline and has reported a
&lt;strong&gt;+1&lt;/strong&gt; in the &lt;em&gt;Verified Label&lt;/em&gt;, on the patch's Gerrit page.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c2.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To access a given job's run's logs, simply click on the job name. By default the
&lt;strong&gt;console logs&lt;/strong&gt; are saved in &lt;strong&gt;job-output.txt.gz&lt;/strong&gt;. The &lt;a class="reference external" href="https://ara.readthedocs.io"&gt;ARA report&lt;/a&gt;
gives a more condensed view of the playbook's execution. Also have a look at
&lt;strong&gt;zuul-info/inventory.yaml&lt;/strong&gt; which contains all Ansible variables available at
playbook runtime.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c3.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Just as we did before for the config project, use the Gerrit web interface to approve the
change and let Zuul run the gate job and merge the change.&lt;/p&gt;
&lt;p&gt;You should soon see the gate job appear on the &lt;a class="reference external" href="https://sftests.com/zuul/t/local/status"&gt;Zuul status page (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c4.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Clicking on the job's name brings you to the Zuul job console. The &lt;strong&gt;unittests&lt;/strong&gt; playbook
should wait for 60 seconds before starting the &lt;strong&gt;python -m unittests&lt;/strong&gt; command
so we should have time to witness the execution of the job in real time in the console.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c5.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As soon as the &lt;strong&gt;gate&lt;/strong&gt; job finishes successfully, Zuul merges the patch
in the &lt;strong&gt;demo-repo&lt;/strong&gt; repository.&lt;/p&gt;
&lt;p&gt;If you reached that point, congratulations, you successfully configured
Zuul to gate patches on &lt;strong&gt;demo-repo&lt;/strong&gt; !&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c6.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, any new patch submitted to the &lt;strong&gt;demo-repo&lt;/strong&gt; repository will trigger automatically
this same CI workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exercises-left-to-the-reader"&gt;
&lt;h2&gt;Exercises left to the reader&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Send a new patch on demo-project that fails to pass the check pipeline. Then
fix it by amending it.&lt;/li&gt;
&lt;li&gt;Read the default &lt;strong&gt;base job&lt;/strong&gt; in the config repository in &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=zuul.d/_jobs-base.yaml;hb=refs/heads/master"&gt;_jobs-base.yaml (sftests.com)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read the &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=playbooks/base/pre.yaml;hb=refs/heads/master"&gt;pre.yaml (sftests.com)&lt;/a&gt; and &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=playbooks/base/post.yaml;hb=refs/heads/master"&gt;post.yaml&lt;/a&gt; playbooks that the &lt;strong&gt;base job&lt;/strong&gt; run prior and
after every job.&lt;/li&gt;
&lt;li&gt;Look at the &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=zuul.d/_pipelines.yaml;hb=refs/heads/master"&gt;default pipelines definitions (sftests.com)&lt;/a&gt;. Pipelines define strategies
to trigger jobs, and report job results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These files are part of how Zuul is integrated into Software Factory, they are
self managed but knowing their existence is quite important for mastering
Zuul.&lt;/p&gt;
&lt;p&gt;You can refer to Zuul's &lt;a class="reference external" href="https://zuul-ci.org/docs/"&gt;latest documentation&lt;/a&gt; or refer to &lt;a class="reference external" href="http://sftests.com/docs/zuul"&gt;the version&lt;/a&gt;
included with any Software Factory deployment.&lt;/p&gt;
&lt;p&gt;Stay tuned for the next article, where we will use Zuul's jobs library
to take advantage of pre-defined Ansible roles to ease job creation.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>Sprint 2018-16</title><link href="https://www.softwarefactory-project.io/sprint-2018-16.html" rel="alternate"></link><published>2018-04-20T18:40:00+00:00</published><updated>2018-04-20T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-04-20:/sprint-2018-16.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the etherpad version to include a security fix.&lt;/li&gt;
&lt;li&gt;We continued the integration of gerrit-2.14 by removing deprecated code from managesf and sf-config.&lt;/li&gt;
&lt;li&gt;We updated the Zuul package to the 3.0.1 version and â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the etherpad version to include a security fix.&lt;/li&gt;
&lt;li&gt;We continued the integration of gerrit-2.14 by removing deprecated code from managesf and sf-config.&lt;/li&gt;
&lt;li&gt;We updated the Zuul package to the 3.0.1 version and added further requirements for the next releases (python-re2).&lt;/li&gt;
&lt;li&gt;We have updated the rdopkg/dlrn SF packages and packaged the dlrnapi_client&lt;/li&gt;
&lt;li&gt;We have finalized a first functional Zuul/DLRN roles &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11810/"&gt;https://softwarefactory-project.io/r/#/c/11810/&lt;/a&gt; for SF and setup a two nodes sandbox to continue the experiments. Architecture schema: &lt;a class="reference external" href="https://drive.google.com/file/d/1mMb2O7Th6gTvk4WONWD7wQvzowonyeTn/view?usp=sharing"&gt;https://drive.google.com/file/d/1mMb2O7Th6gTvk4WONWD7wQvzowonyeTn/view?usp=sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We finalized to test how to build rhel image with diskimage-builder for testing and found a solution to avoid to have the REG_PASSWORD in the config repo (explain in sf documentation)&lt;/li&gt;
&lt;li&gt;We tested installing software-factory on rhel 7.4 and 7.5 using sf and openstack-pike mirror.&lt;/li&gt;
&lt;li&gt;We have investigated how to handle the Dynamic loading feature of Zuul in SF via a taiga story: &lt;a class="reference external" href="https://tree.taiga.io/project/morucci-software-factory/us/1203"&gt;https://tree.taiga.io/project/morucci-software-factory/us/1203&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding upstream contribution to Zuul/Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the angular-v5 patch for zuul-web&lt;/li&gt;
&lt;li&gt;We worked on the MQTT publisher Zuul driver&lt;/li&gt;
&lt;li&gt;We updated ansible jobs (lint, review and upload-to-galaxy) zuul-jobs&lt;/li&gt;
&lt;li&gt;We reviewed the Zuul container spec&lt;/li&gt;
&lt;li&gt;Dynamic loading feature has been merged upstream and landed in 3.0.1&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-14</title><link href="https://www.softwarefactory-project.io/sprint-2018-14.html" rel="alternate"></link><published>2018-04-09T18:40:00+00:00</published><updated>2018-04-09T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-04-09:/sprint-2018-14.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed changes to enforce username unicity in Software Factory &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11751/"&gt;https://softwarefactory-project.io/r/#/c/11751/&lt;/a&gt; &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11744/"&gt;https://softwarefactory-project.io/r/#/c/11744/&lt;/a&gt; (and &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11779/"&gt;https://softwarefactory-project.io/r/#/c/11779/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We released the version 3.0 9h30 after â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed changes to enforce username unicity in Software Factory &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11751/"&gt;https://softwarefactory-project.io/r/#/c/11751/&lt;/a&gt; &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11744/"&gt;https://softwarefactory-project.io/r/#/c/11744/&lt;/a&gt; (and &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11779/"&gt;https://softwarefactory-project.io/r/#/c/11779/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We released the version 3.0 9h30 after upstream released zuul and nodepool. The delay was due to a major refactor in zuul-web api routes that landed right before the tag.&lt;/li&gt;
&lt;li&gt;We investigate adding automatic github gate configuration.&lt;/li&gt;
&lt;li&gt;We updated python-twine to the last version to fix upload-to-pypi jobs.&lt;/li&gt;
&lt;li&gt;We worked on adding support for gerrit-2.14.7 &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/q/topic:gerrit-2.14"&gt;https://softwarefactory-project.io/r/#/q/topic:gerrit-2.14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We finished to clean up all references to jenkins, zuulv2 and nodepool2 in our config and ci repositories.&lt;/li&gt;
&lt;li&gt;We started to work on integrating DLRN build and import jobs/roles into Software Factory based on jpena POC and a static nodepool node, this is still a WIP. Found two issues with DLRN &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11700/"&gt;https://softwarefactory-project.io/r/#/c/11700/&lt;/a&gt; and rdopkg &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11694/"&gt;https://softwarefactory-project.io/r/#/c/11694/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding upstream contribution to Zuul/Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a spec about Zuul's tenant-scoped admin web API: &lt;a class="reference external" href="https://review.openstack.org/558468"&gt;https://review.openstack.org/558468&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated the MQTT zuul driver and follow-up the openci cross community protocol RFC &lt;a class="reference external" href="https://gitlab.openci.io/openci/community/issues/3"&gt;https://gitlab.openci.io/openci/community/issues/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We packaged Nodepool for fedora rawhide, f28 and f27&lt;/li&gt;
&lt;li&gt;We updated the broken config patch to improve user experience at dynamic reloading (tenant configuration error not returned to user if a .zuul.yaml proposed does not trigger an issue)&lt;/li&gt;
&lt;li&gt;We finally finished adding the Limestone nodepool provider upstream, there are still some issues and we are troubleshooting those.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-12</title><link href="https://www.softwarefactory-project.io/sprint-2018-12.html" rel="alternate"></link><published>2018-03-26T18:40:00+00:00</published><updated>2018-03-26T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-03-26:/sprint-2018-12.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We enabled the code-search service on the production deployment &lt;a class="reference external" href="https://softwarefactory-project.io/codesearch/"&gt;https://softwarefactory-project.io/codesearch/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We branched stable/3.0 to start working on the next version 3.1 on the master branch.&lt;/li&gt;
&lt;li&gt;We started to work on tenant â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We enabled the code-search service on the production deployment &lt;a class="reference external" href="https://softwarefactory-project.io/codesearch/"&gt;https://softwarefactory-project.io/codesearch/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We branched stable/3.0 to start working on the next version 3.1 on the master branch.&lt;/li&gt;
&lt;li&gt;We started to work on tenant deployment for ansible-network connected to a central zuul/nodepool service &lt;a class="reference external" href="https://ansible.softwarefactory-project.io"&gt;https://ansible.softwarefactory-project.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We improved the gerrit REST api access to use Cauth API-KEY instead of basic http password. This was needed to make the next Gerrit version works as it doesn't have the external_ids database table SF is using for service management.&lt;/li&gt;
&lt;li&gt;We investigated adding a &amp;quot;reenqueue&amp;quot; button to the zuul builds page, using the zuul web admin patch.&lt;/li&gt;
&lt;li&gt;We investigated triggering autoholds with a comment in gerrit.&lt;/li&gt;
&lt;li&gt;We refactored the documentation to have a clear view for each main landing page (operator, user, contributor and faq). We also added pages to describe all components not described in the previous documentation (elk, metrics, hound, repoxlorer ...)&lt;/li&gt;
&lt;li&gt;We've continued to remove jenkins references in sf-config and to ensure all tasks are in the right role.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding upstream contribution to Zuul/Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued to investigate Kazoo retry logic to mitigate ConnectionLost issues with zookeeper &lt;a class="reference external" href="https://review.openstack.org/#/c/556335/"&gt;https://review.openstack.org/#/c/556335/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We found an issue with secret handling making base job failed with POST_FAILURE, change has been reverted and a test has been proposed to detect the bug.&lt;/li&gt;
&lt;li&gt;We worked on a nodepool-web interface to display labels and nodes status &lt;a class="reference external" href="https://softwarefactory-project.io/zuul/local/labels.html"&gt;https://softwarefactory-project.io/zuul/local/labels.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on job trigger driver to implement a &amp;quot;Build job&amp;quot; button on the web interface with custom job variables.&lt;/li&gt;
&lt;li&gt;We investigated an Azure and VMWare/ESX nodepool driver &lt;a class="reference external" href="https://review.openstack.org/#/c/554432/"&gt;https://review.openstack.org/#/c/554432/&lt;/a&gt; and &lt;a class="reference external" href="https://review.openstack.org/#/c/554463/"&gt;https://review.openstack.org/#/c/554463/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We submitted mqtt publishing roles to zuul-jobs, they allow operators to publish build status (START, SUCCESS, FAILURE) and other details to a firehose-like event queue. &lt;a class="reference external" href="https://review.openstack.org/#/c/551329/"&gt;https://review.openstack.org/#/c/551329/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated the broken config patch and implemented two followup patches to report loading errors in zuul-web &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:broken-config"&gt;https://review.openstack.org/#/q/topic:broken-config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-10</title><link href="https://www.softwarefactory-project.io/sprint-2018-10.html" rel="alternate"></link><published>2018-03-13T18:40:00+00:00</published><updated>2018-03-13T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-03-13:/sprint-2018-10.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We finalized the version 3.0 release, now waiting for openstack-infra tags of zuul and nodepool to tag the final repo.&lt;/li&gt;
&lt;li&gt;We upgraded softwarefactory-project.io to the candidate repo and validated all the new features are working â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We finalized the version 3.0 release, now waiting for openstack-infra tags of zuul and nodepool to tag the final repo.&lt;/li&gt;
&lt;li&gt;We upgraded softwarefactory-project.io to the candidate repo and validated all the new features are working as expected.&lt;/li&gt;
&lt;li&gt;We integrated the etsy/hound code-search service&lt;/li&gt;
&lt;li&gt;We integrated DLRN as a SF component and managed to have an implementation that allow multiple DLRN's projects on the same host (DLRN projects defined  in the config repo, gateway path to the repo and api by project)&lt;/li&gt;
&lt;li&gt;We started to discuss the use of DLRN for the SF build workflow and here is a workflow proposal workflow: &lt;a class="reference external" href="https://drive.google.com/file/d/1vWcZxJao4Sb3ZrrslRL6H2M3SGY2Rggm/view?usp=sharing"&gt;https://drive.google.com/file/d/1vWcZxJao4Sb3ZrrslRL6H2M3SGY2Rggm/view?usp=sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We are still working on revamping firehooks to support failed job autohold from gerrit comment&lt;/li&gt;
&lt;li&gt;We worked on the last review due for the version Zuul 3 release: the javascript tooling and the zuul_stream refactor.&lt;/li&gt;
&lt;li&gt;We discovered zookeeper issues on Zuul after discussing the kazoo retry patch.&lt;/li&gt;
&lt;li&gt;We continued to work on the Zuul patch to read a tenant config from an external script (&lt;a class="reference external" href="https://review.openstack.org/#/c/535878/"&gt;https://review.openstack.org/#/c/535878/&lt;/a&gt;) to have it merged soon.&lt;/li&gt;
&lt;li&gt;We Created a patch to have notifications from zuul on the firehose at pre- and post- stages during a job build: &lt;a class="reference external" href="https://review.openstack.org/#/c/551329/"&gt;https://review.openstack.org/#/c/551329/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We worked on a log-classify presentation and an initial integration within zuul-jobs.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-08</title><link href="https://www.softwarefactory-project.io/sprint-2018-08.html" rel="alternate"></link><published>2018-02-22T18:40:00+00:00</published><updated>2018-02-22T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-02-22:/sprint-2018-08.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We're working on a Proof-of-Concept Zuul Web Admin&lt;/li&gt;
&lt;li&gt;We've finalize the script to automatically generate Zuul and Nodepool dashboards. We updated softwarefactory-project.io to validate grafs with real data (&lt;a class="reference external" href="https://softwarefactory-project.io/grafana/?orgId=1"&gt;https://softwarefactory-project.io/grafana/?orgId=1&lt;/a&gt; ). We also â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We're working on a Proof-of-Concept Zuul Web Admin&lt;/li&gt;
&lt;li&gt;We've finalize the script to automatically generate Zuul and Nodepool dashboards. We updated softwarefactory-project.io to validate grafs with real data (&lt;a class="reference external" href="https://softwarefactory-project.io/grafana/?orgId=1"&gt;https://softwarefactory-project.io/grafana/?orgId=1&lt;/a&gt; ). We also added in the config repo a metric directory to allow users to add custom dashboards.&lt;/li&gt;
&lt;li&gt;We have published a first version &lt;a class="reference external" href="http://www.softwarefactory-project.io"&gt;http://www.softwarefactory-project.io&lt;/a&gt; using CI/CD via the pages feature&lt;/li&gt;
&lt;li&gt;We have integrated last repoxplorer version 1.2.0 to SF&lt;/li&gt;
&lt;li&gt;We have enabled two periodic jobs to validate SF install (last stable) on centos and centos CR&lt;/li&gt;
&lt;li&gt;We have moved the SF backup node on the private PCTT cloud&lt;/li&gt;
&lt;li&gt;We deployed a real pre-production called trysf.io to validate the 2.7-&amp;gt;3.0 (candidate) upgrade and we upgraded the production deploymented: new zuul dashboard, new statsd metrics and elk stash working with zuulv3 jobs&lt;/li&gt;
&lt;li&gt;A patch letting operators define a default maximum holding time for nodepool was merged upstream: &lt;a class="reference external" href="https://review.openstack.org/#/c/536295/"&gt;https://review.openstack.org/#/c/536295/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Addressed an issue that crashed ARA during devstack runs: &lt;a class="reference external" href="https://review.openstack.org/#/c/546029/"&gt;https://review.openstack.org/#/c/546029/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patch to improve zuul loading speed merged &lt;a class="reference external" href="https://review.openstack.org/#/c/535509/"&gt;https://review.openstack.org/#/c/535509/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Worked on making zuul compatible with Ansible 2.4, ended up create a backport to 2.4: &lt;a class="reference external" href="https://github.com/ansible/ansible/pull/36572"&gt;https://github.com/ansible/ansible/pull/36572&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-06</title><link href="https://www.softwarefactory-project.io/sprint-2018-06.html" rel="alternate"></link><published>2018-01-07T18:40:00+00:00</published><updated>2018-01-07T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-01-07:/sprint-2018-06.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have played around with Kerberos, leading to the grooming of a future implementation: &lt;a class="reference external" href="https://tree.taiga.io/project/morucci-software-factory/epic/951"&gt;https://tree.taiga.io/project/morucci-software-factory/epic/951&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have move the resources engine API under the new managesf API v2 endpoint&lt;/li&gt;
&lt;li&gt;We â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have played around with Kerberos, leading to the grooming of a future implementation: &lt;a class="reference external" href="https://tree.taiga.io/project/morucci-software-factory/epic/951"&gt;https://tree.taiga.io/project/morucci-software-factory/epic/951&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have move the resources engine API under the new managesf API v2 endpoint&lt;/li&gt;
&lt;li&gt;We have investigated a solution to make the resources engine apply call asynchronuous and discuss with team and finally decided a new solution w/o passing through the manageSF API&lt;/li&gt;
&lt;li&gt;We have changed the sf-ops backup playbook to facilitate old backup deletion with bup.&lt;/li&gt;
&lt;li&gt;We have boostrapped a website for Software Factory with static pages and blog based on pelican &lt;a class="reference external" href="https://softwarefactory-project.io/logs/71/11171/6/check/build-pages/1b4a02a/pages/"&gt;https://softwarefactory-project.io/logs/71/11171/6/check/build-pages/1b4a02a/pages/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated gerrit-2.14 integration, though database schema changed and managesf/initialization needs to be adapted to use the REST api&lt;/li&gt;
&lt;li&gt;We integrated ara in sfconfig so that all ansible-playbook execution are stored&lt;/li&gt;
&lt;li&gt;We removed zuulV2/nodepoolV2 and Jenkins and dropped the version prefix in zuul/nodepool.&lt;/li&gt;
&lt;li&gt;We updated the zuul and nodepool package to use the new Javascript tooling stack.&lt;/li&gt;
&lt;li&gt;We added dynamic collections of zuul and nodepool configuration to generate grafana dashboard.&lt;/li&gt;
&lt;li&gt;We abandoned the graphite integration to avoid to have two metrics backends in SF. We started to prepare a script to automatically generate nodepool and zuul graph based on yaml file.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry></feed>