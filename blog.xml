<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Software Factory - blog</title><link href="https://www.softwarefactory-project.io/" rel="alternate"></link><link href="https://www.softwarefactory-project.io/blog.xml" rel="self"></link><id>https://www.softwarefactory-project.io/</id><updated>2024-08-28T10:00:00+00:00</updated><entry><title>Sprint 2024 Aug 09 to 2024 Aug 28 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-aug-09-to-2024-aug-28-summary.html" rel="alternate"></link><published>2024-08-28T10:00:00+00:00</published><updated>2024-08-28T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-08-28:/sprint-2024-aug-09-to-2024-aug-28-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added a url subpath to support opensearch endpoints that contains subdir, for example: localhost/opensearch in ci-log-processing project&lt;/li&gt;
&lt;li&gt;We added a patch to pass the CI for OpenSearch 2.13 and OpenSearch Dashboards 2.13 in ci-log-processing …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added a url subpath to support opensearch endpoints that contains subdir, for example: localhost/opensearch in ci-log-processing project&lt;/li&gt;
&lt;li&gt;We added a patch to pass the CI for OpenSearch 2.13 and OpenSearch Dashboards 2.13 in ci-log-processing project&lt;/li&gt;
&lt;li&gt;We reviewed the zuul-operator fixes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on integrating zuul-weeder and LogJuicer into the sf-operator&lt;/li&gt;
&lt;li&gt;We added dhall, dhall-json and /var/cache/dhall on zuul-executor image for dhall-diff job&lt;/li&gt;
&lt;li&gt;We increased etcd ramdisk size to 1g because 512m was not enough&lt;/li&gt;
&lt;li&gt;We removed restartPolicy parameter for init containers becasue MicroShift 4.16 was complaing about it&lt;/li&gt;
&lt;li&gt;We tested a sf-operator with MicroShift 4.16 and we proposed a patch to move to that version as default (it is a LTS release)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 Jul 19 to 2024 Aug 07 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-jul-19-to-2024-aug-07-summary.html" rel="alternate"></link><published>2024-08-07T10:00:00+00:00</published><updated>2024-08-07T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-08-07:/sprint-2024-jul-19-to-2024-aug-07-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated gitea to 1.22&lt;/li&gt;
&lt;li&gt;We resolved issues with meetpad failing to restart after (upstream) container update.&lt;/li&gt;
&lt;li&gt;We prepared and launched service nodes on Ubuntu Noble&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We integrated Zuul version 11.0.1: &lt;a class="reference external" href="https://softwarefactory-project.io/r/q/topic:zuul-v11.0.1"&gt;https://softwarefactory-project …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated gitea to 1.22&lt;/li&gt;
&lt;li&gt;We resolved issues with meetpad failing to restart after (upstream) container update.&lt;/li&gt;
&lt;li&gt;We prepared and launched service nodes on Ubuntu Noble&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We integrated Zuul version 11.0.1: &lt;a class="reference external" href="https://softwarefactory-project.io/r/q/topic:zuul-v11.0.1"&gt;https://softwarefactory-project.io/r/q/topic:zuul-v11.0.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 Jun 28 to 2024 Jul 17 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-jun-28-to-2024-jul-17-summary.html" rel="alternate"></link><published>2024-07-17T10:00:00+00:00</published><updated>2024-07-17T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-07-17:/sprint-2024-jun-28-to-2024-jul-17-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the security fix for Zuul: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/923874"&gt;https://review.opendev.org/c/zuul/zuul/+/923874&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We released zuul 11.0.0 on rhel-9&lt;/li&gt;
&lt;li&gt;We fixed the logging for Zuul &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/31885"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the security fix for Zuul: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/923874"&gt;https://review.opendev.org/c/zuul/zuul/+/923874&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We released zuul 11.0.0 on rhel-9&lt;/li&gt;
&lt;li&gt;We fixed the logging for Zuul &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/31885"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config/+/31885&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-operator"&gt;
&lt;h2&gt;Sf-operator&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the deployment to v0.0.33 with Zuul 11.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 Jun 07 to 2024 Jun 26 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-jun-07-to-2024-jun-26-summary.html" rel="alternate"></link><published>2024-06-26T10:00:00+00:00</published><updated>2024-06-26T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-06-26:/sprint-2024-jun-07-to-2024-jun-26-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed old InMotion cloud, and replaced it with newer version of OpenMetal&lt;/li&gt;
&lt;li&gt;We fixed the Gitlab driver close action &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/921855"&gt;https://review.opendev.org/c/zuul/zuul/+/921855&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed the Gitlab autohold &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/910942"&gt;https://review.opendev.org/c …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed old InMotion cloud, and replaced it with newer version of OpenMetal&lt;/li&gt;
&lt;li&gt;We fixed the Gitlab driver close action &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/921855"&gt;https://review.opendev.org/c/zuul/zuul/+/921855&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed the Gitlab autohold &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/910942"&gt;https://review.opendev.org/c/zuul/zuul/+/910942&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated the patch for zuul-client enabling the creation of an auth token automatically if the right config is provided&lt;/li&gt;
&lt;li&gt;We finished the re-ansi upgrade to rescript: &lt;a class="reference external" href="https://forum.rescript-lang.org/t/notes-about-migrating-from-bs-platform-8-2-to-rescript-11/5314"&gt;https://forum.rescript-lang.org/t/notes-about-migrating-from-bs-platform-8-2-to-rescript-11/5314&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed an issue with centos build artifacts: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/921689"&gt;https://review.opendev.org/c/zuul/zuul/+/921689&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed the zuul-jobs third-party-ci&lt;/li&gt;
&lt;li&gt;We reviewed the zuul specs and elasticsearch thread&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the sf-3.8 release repo with the latest sf-config&lt;/li&gt;
&lt;li&gt;We added support for implicit semaphore to zuul-weeder &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/zuul-weeder/+/31734"&gt;https://softwarefactory-project.io/r/c/software-factory/zuul-weeder/+/31734&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We dropped opensearch and influxdb stacks for allinone arch on rhel-9&lt;/li&gt;
&lt;li&gt;We added sf-ci-functional-allinone and sf-tenants jobs for sf-ci on rhel-9&lt;/li&gt;
&lt;li&gt;we backported the 3.8 branch to master &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/31688"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config/+/31688&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-operator"&gt;
&lt;h2&gt;Sf-operator&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We released sf-operator v0.0.31 for the landing of the new MariaDB version&lt;/li&gt;
&lt;li&gt;We added a better handling of logging with a support of debug loglevel &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31674/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31674/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We removed the Route/LE support &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31452"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31452&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated the operator images sec issues Critical and Important + Zuul upstream patch &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31700"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31700&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated zuul-client working on zuul pods (need to merge &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/containers/+/31741"&gt;https://softwarefactory-project.io/r/c/containers/+/31741&lt;/a&gt; and land a sf-operator patch)&lt;/li&gt;
&lt;li&gt;We fixed issue with the cert after moving to the Microshift 4.14&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 May 16 to 2024 Jun 05 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-may-16-to-2024-jun-05-summary.html" rel="alternate"></link><published>2024-06-05T10:00:00+00:00</published><updated>2024-06-05T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-06-05:/sprint-2024-may-16-to-2024-jun-05-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the status page v2 spec: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/918505"&gt;https://review.opendev.org/c/zuul/zuul/+/918505&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the sf-operator resource limit addition&lt;/li&gt;
&lt;li&gt;We implemented small improvements for great speedup in sf-config by combining executor/merger host …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the status page v2 spec: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/918505"&gt;https://review.opendev.org/c/zuul/zuul/+/918505&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the sf-operator resource limit addition&lt;/li&gt;
&lt;li&gt;We implemented small improvements for great speedup in sf-config by combining executor/merger host and by implementing a container warmup playbook: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/31612"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config/+/31612&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed a &amp;quot;nasty&amp;quot; issue where deserializing YAML data might be inconsistent over time, resulting in reconcile errors.&lt;/li&gt;
&lt;li&gt;We updated MariaDB container image to 10.6&lt;/li&gt;
&lt;li&gt;We added a proposal to update cert manager to new version&lt;/li&gt;
&lt;li&gt;We fixed the upgrade-12h periodic pipeline &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/sf-zuul-jobs-config/+/31527"&gt;https://softwarefactory-project.io/r/c/sf-zuul-jobs-config/+/31527&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We landed the change of the container limits &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31462"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31462&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We landed the change to move the &amp;quot;sf wipe&amp;quot; cli command to a &amp;quot;dev&amp;quot; command &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31259"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31259&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We managed to fixed multiple sources of flakyness to bring back the CI in better shape&lt;/li&gt;
&lt;li&gt;We updated Zuul container image to 10.1.0 version&lt;/li&gt;
&lt;li&gt;We updated doc for sf-operator&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 Apr 26 to 2024 May 15 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-apr-26-to-2024-may-15-summary.html" rel="alternate"></link><published>2024-05-15T10:00:00+00:00</published><updated>2024-05-15T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-05-15:/sprint-2024-apr-26-to-2024-may-15-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the new zuul status page &lt;a class="reference external" href="https://review.opendev.org/q/topic:%22fe-status-view-2.0%22"&gt;https://review.opendev.org/q/topic:%22fe-status-view-2.0%22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We bumped re-ansi to the latest rescript toolchain&lt;/li&gt;
&lt;li&gt;We updated servers for jitsi_meet from Bionic to Jammy&lt;/li&gt;
&lt;li&gt;We infra team also updated …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the new zuul status page &lt;a class="reference external" href="https://review.opendev.org/q/topic:%22fe-status-view-2.0%22"&gt;https://review.opendev.org/q/topic:%22fe-status-view-2.0%22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We bumped re-ansi to the latest rescript toolchain&lt;/li&gt;
&lt;li&gt;We updated servers for jitsi_meet from Bionic to Jammy&lt;/li&gt;
&lt;li&gt;We infra team also updated etherpad from 1.x to 2.x, all self hosted MariaDBs to 10.11 and several rebuilds of gerrit&lt;/li&gt;
&lt;li&gt;We configure logscraper02 host on OpenDev that will replace logscraper01&lt;/li&gt;
&lt;li&gt;We updated (in progress) OpenSearch on Opendev to 2.11&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added rhel9 support to sf-config&lt;/li&gt;
&lt;li&gt;We have proposed a solution for upgrade Zuul and Nodepool on version 10.0.0 for sf 3.8 &lt;a class="reference external" href="https://www.softwarefactory-project.io/software-factory-38-zuulnodepool-update.html"&gt;https://www.softwarefactory-project.io/software-factory-38-zuulnodepool-update.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We proposed a change to set container limites &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31462"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31462&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added the sub command to work with zuul-scheduler&lt;/li&gt;
&lt;li&gt;We start to work on the sub command to query zookeeper queues and nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Software Factory 3.8 Zuul/Nodepool Update</title><link href="https://www.softwarefactory-project.io/software-factory-38-zuulnodepool-update.html" rel="alternate"></link><published>2024-05-02T00:00:00+00:00</published><updated>2024-05-02T00:00:00+00:00</updated><author><name>fbo</name></author><id>tag:www.softwarefactory-project.io,2024-05-02:/software-factory-38-zuulnodepool-update.html</id><summary type="html">&lt;p&gt;Software Factory 3.8 is featured with Zuul and Nodepool 8.1 and as of today we have not scheduled to
release a new official Software Factory version as our goal is to migrate to an OpenShift based deployment
through the &lt;a class="reference external" href="https://github.com/softwarefactory-project/sf-operator"&gt;sf-operator&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;However to mitigate the delay to migrate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Software Factory 3.8 is featured with Zuul and Nodepool 8.1 and as of today we have not scheduled to
release a new official Software Factory version as our goal is to migrate to an OpenShift based deployment
through the &lt;a class="reference external" href="https://github.com/softwarefactory-project/sf-operator"&gt;sf-operator&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;However to mitigate the delay to migrate our production to the sf-operator we are providing a solution
to enable Zuul 10.0.0 and Nodepool 10.0.0 with the current Software Factory 3.8.&lt;/p&gt;
&lt;p&gt;Assuming the Software Factory deployment is running the version 3.8 (sf-config-3.8.8-4), we can follow
the process below.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Make sure to have a minimum of 10GB disk space available on all the hosts part of your SF infra to perform the update.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Backup your Software Factory data&lt;/span&gt;
ansible-playbook /var/lib/software-factory/ansible/sf_backup.yml

&lt;span class="c1"&gt;# Install this specific sf-config package&lt;/span&gt;
yum install sf-config-3.8.9-4

&lt;span class="c1"&gt;# Ensure to deactivate the automatic restart of Zuul and Nodepool&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;disable_zuul_autorestart: true&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/software-factory/custom-vars.yaml
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;disable_nodepool_autorestart: true&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/software-factory/custom-vars.yaml

&lt;span class="c1"&gt;# Stop all Zuul/Nodepool services (adapt the command if services are running on multiple nodes)&lt;/span&gt;
systemctl stop zuul-scheduler zuul-merger zuul-web zuul-executor zuul-fingergw &lt;span class="se"&gt;\&lt;/span&gt;
 nodepool-launcher nodepool-builder

&lt;span class="c1"&gt;# A Zuul SQL database migration need to be performed by Zuul at startup and we have noticed&lt;/span&gt;
&lt;span class="c1"&gt;# an issue with our DBs content that prevent the migration to success. To fix it, run:&lt;/span&gt;
podman &lt;span class="nb"&gt;exec&lt;/span&gt; -it mysql bash -c &lt;span class="s1"&gt;&amp;#39;mysql -uroot -p$MYSQL_ROOT_PASSWORD zuul -e &amp;quot;delete from zuul_buildset where (CHAR_LENGTH(oldrev) &amp;gt; 40 OR CHAR_LENGTH(newrev) &amp;gt; 40 OR CHAR_LENGTH(patchset) &amp;gt; 40);&amp;quot;&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Delete the Zuul Ephemeral state from Zookeeper&lt;/span&gt;
zuul_wrapper delete-state

&lt;span class="c1"&gt;# Then run the sf-config upgrade command&lt;/span&gt;
sf-config --upgrade

&lt;span class="c1"&gt;# Re-create the zuul-scheduler container based on the updated container image&lt;/span&gt;
podman rm zuul-scheduler&lt;span class="p"&gt;;&lt;/span&gt; /usr/local/bin/container-zuul-scheduler.sh&lt;span class="p"&gt;;&lt;/span&gt; rm /var/lib/software-factory/versions/zuul-scheduler-updated

&lt;span class="c1"&gt;# Now start the zuul-scheduler and ensure that the database migration has been performed without issue.&lt;/span&gt;
systemctl start zuul-scheduler
tail -f /var/log/zuul/scheduler.log

&lt;span class="c1"&gt;# Perform a full restart of Zuul&lt;/span&gt;
ansible-playbook /var/lib/software-factory/ansible/zuul_restart.yml

&lt;span class="c1"&gt;# Then restart all Nodepool services&lt;/span&gt;
ansible-playbook /var/lib/software-factory/ansible/nodepool_restart.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information about the Zuul SQL migration please refer to
the &lt;cite&gt;Zuul changelog &amp;lt;https://zuul-ci.org/docs/zuul/latest/releasenotes.html#relnotes-9-3-0-upgrade-notes&amp;gt;&lt;/cite&gt;.&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 Apr 05 to 2024 Apr 24 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-apr-05-to-2024-apr-24-summary.html" rel="alternate"></link><published>2024-04-24T10:00:00+00:00</published><updated>2024-04-24T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-04-24:/sprint-2024-apr-05-to-2024-apr-24-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We changed the OpenSearch version for testing the ci-log-processing project, due in the near future, we will update the logscraper host and by taking the opportunity, we will also trigger OpenSearch update + we scheduled upgrade date&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We changed the OpenSearch version for testing the ci-log-processing project, due in the near future, we will update the logscraper host and by taking the opportunity, we will also trigger OpenSearch update + we scheduled upgrade date&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We are working on sf-3.8 to provide Zuul and Nodepool 10.0&lt;/li&gt;
&lt;li&gt;We validated SF 3.8 (minimal arch) can be deployed on rhel-9, the follow up will be to enable ci testing, but there is no migration path from centos-7 to rhel-9, backup/restore from centos-7 deployment will be needed&lt;/li&gt;
&lt;li&gt;We finialised the Backup/Restore system&lt;/li&gt;
&lt;li&gt;We bumped controller-runtime lib deps to latest &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31266"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31266&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We proposed Proposed a cli command to get an insight of HIGH and CRITICAL issue on our sf-operator container images &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31283"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31283&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We bumped the zookeeper image (report HIGH Sec issues)&lt;/li&gt;
&lt;li&gt;We investigated how to enable SSO on top SF's web services&lt;/li&gt;
&lt;li&gt;We updated doc for sf-operator&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 Mar 15 to 2024 Apr 03 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-mar-15-to-2024-apr-03-summary.html" rel="alternate"></link><published>2024-04-03T10:00:00+00:00</published><updated>2024-04-03T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-04-03:/sprint-2024-mar-15-to-2024-apr-03-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the new openapi spec generator for Zuul: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/912031"&gt;https://review.opendev.org/c/zuul/zuul/+/912031&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated how latest docker broke zuul-jobs in &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/913808"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/913808&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We bumped zuul …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the new openapi spec generator for Zuul: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/912031"&gt;https://review.opendev.org/c/zuul/zuul/+/912031&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated how latest docker broke zuul-jobs in &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/913808"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/913808&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We bumped zuul and nodepool to 10.0.0&lt;/li&gt;
&lt;li&gt;We tagged sf-operator v0.0.27&lt;/li&gt;
&lt;li&gt;We added restore functionality; the functional tests and other related to it are WIP&lt;/li&gt;
&lt;li&gt;We implemented the external executor and fonctional tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 Feb 23 to 2024 Mar 13 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-feb-23-to-2024-mar-13-summary.html" rel="alternate"></link><published>2024-03-13T10:00:00+00:00</published><updated>2024-03-13T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-03-13:/sprint-2024-feb-23-to-2024-mar-13-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed log  gearman - {client, worker}  in ci-log-processing project in logscraper and logsender due Opendev folks are not using it anymore (same as we)&lt;/li&gt;
&lt;li&gt;We fixed parsing fields in logsender after Opendev migrate to new Zuul&lt;/li&gt;
&lt;li&gt;We proposed …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed log  gearman - {client, worker}  in ci-log-processing project in logscraper and logsender due Opendev folks are not using it anymore (same as we)&lt;/li&gt;
&lt;li&gt;We fixed parsing fields in logsender after Opendev migrate to new Zuul&lt;/li&gt;
&lt;li&gt;We proposed to change the container base image to Centos 9 stream&lt;/li&gt;
&lt;li&gt;We pinned the python env version to 3.11 to avoid future issues with Python code&lt;/li&gt;
&lt;li&gt;We proposed a fix on zuul to support autoholds on changes hosted on gitlab (still wip, I'd like to test it on real data)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We Fixed gitlab urls for weeder: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/zuul-weeder/+/31049"&gt;https://softwarefactory-project.io/r/c/software-factory/zuul-weeder/+/31049&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have applied the ansible_fqcn_fixer.sh script to some of our repositories to ensure the use of fully qualified module names.&lt;/li&gt;
&lt;li&gt;We proposed a restore functionality in sf-operator&lt;/li&gt;
&lt;li&gt;We proposed a dedicated new job in sf-operator to verify environment after the disaster (verifying backup and restore functionality)&lt;/li&gt;
&lt;li&gt;We did an implementation of external zuul-executor according to the ADR14 of sf-operator:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30956"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30956&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31047"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31047&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31057"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31057&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We updated some MD files with file paths instead of link: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30831"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30831&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We prepared the Blog post to announce the release of Software Factory Operator: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/www.softwarefactory-project.io/+/30847"&gt;https://softwarefactory-project.io/r/c/www.softwarefactory-project.io/+/30847&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a Github connection on microshift.softwarefactory.io: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-infra/+/30969"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-infra/+/30969&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started to work on how to migrate Zuul secrets from one Zuul to another with different key:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31043"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/31043&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/908507"&gt;https://review.opendev.org/c/zuul/zuul/+/908507&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 Feb 02 to 2024 Feb 21 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-feb-02-to-2024-feb-21-summary.html" rel="alternate"></link><published>2024-02-21T10:00:00+00:00</published><updated>2024-02-21T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-02-21:/sprint-2024-feb-02-to-2024-feb-21-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed a couple of change made to Zuul, notably fixes for google/pytype&lt;/li&gt;
&lt;li&gt;We tried to save some compute resources in periodic pipeline: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/827369"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/827369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed support for bright colors …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed a couple of change made to Zuul, notably fixes for google/pytype&lt;/li&gt;
&lt;li&gt;We tried to save some compute resources in periodic pipeline: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/827369"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/827369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed support for bright colors in re-ansi and bump zuul-web dependencies&lt;/li&gt;
&lt;li&gt;We added a feature for logscraper and logsender that would be passible to pass multiple yaml files (filrs that should be downloaded)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We switched doc dev/publishing to material for mkdocs AND IT IS LIVE! &lt;a class="reference external" href="https://softwarefactory-project.github.io/sf-operator/"&gt;https://softwarefactory-project.github.io/sf-operator/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a backup feature; restore feature is in progress&lt;/li&gt;
&lt;li&gt;We added the default Logserver storageclass definition for CR storage value&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Recursive namespaces to run containers inside a container</title><link href="https://www.softwarefactory-project.io/recursive-namespaces-to-run-containers-inside-a-container.html" rel="alternate"></link><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2024-02-19:/recursive-namespaces-to-run-containers-inside-a-container.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;We would like to deploy a containerized workload that creates nested
containers to isolate individual tasks. This post explores the
challenges of safely running a container inside a container. In three
parts, I present:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;User namespaces.&lt;/li&gt;
&lt;li&gt;Required capabilities …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;We would like to deploy a containerized workload that creates nested
containers to isolate individual tasks. This post explores the
challenges of safely running a container inside a container. In three
parts, I present:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;User namespaces.&lt;/li&gt;
&lt;li&gt;Required capabilities.&lt;/li&gt;
&lt;li&gt;Procfs kernel restrictions.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;The examples in this post are using the following packages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;kernel-6.6.11-200.fc39.x86_64&lt;/li&gt;
&lt;li&gt;selinux-policy-39.3-1.fc39.noarch&lt;/li&gt;
&lt;li&gt;util-linux-core-2.39.3-1.fc39.x86_64&lt;/li&gt;
&lt;li&gt;bubblewrap-0.8.0-1.fc39.x86_64&lt;/li&gt;
&lt;li&gt;podman-4.8.3-1.fc39.x86_64&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="context-and-problem-statement"&gt;
&lt;h2&gt;Context and problem statement&lt;/h2&gt;
&lt;p&gt;The context is leveraging the &lt;a class="reference external" href="https://github.com/containers/bubblewrap"&gt;bubblewrap&lt;/a&gt; tool to create temporary
sandboxes for running Ansible playbooks as part of a CI build system
named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;zuul-executor&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The problem we are facing is that creating nested containers requires a
privileged context from the parent container runtime. And this is an
issue when running in an environment that enforces security constraints,
like OpenShift clusters managed by a third party.&lt;/p&gt;
&lt;p&gt;The next sections describe the implications of this privileged context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="user-namespaces"&gt;
&lt;h2&gt;User namespaces&lt;/h2&gt;
&lt;p&gt;Since RHEL8, regular users are allowed to create namespaces. This used
to be a privileged action that only the admin (root) could perform. But
thanks to the unprivileged user namespace, users can become root in a
limited context to perform the actions required to setup a container.&lt;/p&gt;
&lt;p&gt;We can explore this feature using the standard &lt;tt class="docutils literal"&gt;unshare&lt;/tt&gt; utility. As a
regular user, we can create new namespaces that are isolated from the
host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[tristanc@fedora ~]$ unshare --user --mount --net --pid --fork --map-root-user --mount-proc
root@fedora:~# id
uid=0(root) gid=65534(nfsnobody) groups=65534(nfsnobody) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
root@fedora:~# ip a
1: lo: &amp;lt;LOOPBACK&amp;gt; mtu 65536 qdisc noop state DOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
root@fedora:~# ps afx
    PID TTY      STAT   TIME COMMAND
      1 pts/5    S      0:00 -bash
     79 pts/5    R+     0:00 ps afx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above we can see that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--user&lt;/span&gt;&lt;/tt&gt; creates a new uid mapping which lets us become root.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--net&lt;/span&gt;&lt;/tt&gt; creates a new network stack.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--pid&lt;/span&gt;&lt;/tt&gt; creates a new procfs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To create these namespaces, the process uses the
&lt;tt class="docutils literal"&gt;CLONE_NEWNS|CLONE_NEWUSER|CLONE_NEWPID|CLONE_NEWNET&lt;/tt&gt; flags (either
for the &lt;tt class="docutils literal"&gt;unshare(2)&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;clone(2)&lt;/tt&gt; syscall).&lt;/p&gt;
&lt;p&gt;Note that it is necessary to create a new user namespace (with
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--user&lt;/span&gt;&lt;/tt&gt;), otherwise we wouldn't get the capabilities for creating the
other namespaces.&lt;/p&gt;
&lt;p&gt;We can also create nested namespaces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[tristanc@fedora ~]$ unshare --user --mount --net --pid --fork --map-root-user --mount-proc
root@fedora:~# sleep 1001 &amp;amp;
[1] 23
root@fedora:~# unshare --user --mount --net --pid --fork --map-root-user --mount-proc
root@fedora:~# ps afx
    PID TTY      STAT   TIME COMMAND
      1 pts/8    S      0:00 -bash
     23 pts/8    R+     0:00 ps afx
root@fedora:~# exit
root@fedora:~# ps afx
    PID TTY      STAT   TIME COMMAND
      1 pts/8    S      0:00 -bash
     23 pts/8    S      0:00 sleep 1001
     48 pts/8    R+     0:00 ps afx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also use the &lt;tt class="docutils literal"&gt;bwrap&lt;/tt&gt; command from the bubblewrap package to
achieve the same kind of isolation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[tristanc@fedora ~]$ bwrap --ro-bind /usr /usr --symlink usr/lib64 /lib64 --proc /proc --dev /dev --tmpfs /tmp --unshare-all --new-session --cap-add all --uid 0 bash
bash: cannot set terminal process group (1): Inappropriate ioctl for device
bash: no job control in this shell
bash-5.2# sleep 4242 &amp;amp;
[1] 7
bash-5.2# bwrap --ro-bind /usr /usr --symlink usr/lib64 /lib64 --proc /proc --dev /dev --tmpfs /tmp --unshare-all --new-session --cap-add all --uid 0 bash
bash: cannot set terminal process group (1): Inappropriate ioctl for device
bash: no job control in this shell
bash-5.2# ps afx
    PID TTY      STAT   TIME COMMAND
      1 ?        Ss     0:00 bwrap --ro-bind /usr /usr --symlink usr/lib64 /lib64 --proc /proc --dev /dev --tmpfs /tmp --unshare-all --new-session --cap-add all --uid 0 bash
      2 ?        S      0:00 bash
      3 ?        R      0:00  \_ ps afx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can confirm from the host that the namespaces are indeed nested:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[tristanc@fedora ~]$ ps afx
...
 165104 pts/8    Ss     0:00  |   \_ /bin/bash --posix
 170707 pts/8    S+     0:00  |       \_ bwrap --ro-bind /usr /usr --symlink usr/lib64 /lib64 --proc /proc --dev /dev --tmpfs /tmp --unshare-all --new-session --cap-add all --uid 0 bash
 170708 ?        Ss     0:00  |           \_ bwrap --ro-bind /usr /usr --symlink usr/lib64 /lib64 --proc /proc --dev /dev --tmpfs /tmp --unshare-all --new-session --cap-add all --uid 0 bash
 170709 ?        S      0:00  |               \_ bash
 170826 ?        S      0:00  |                   \_ sleep 4242
 170827 ?        S      0:00  |                   \_ bwrap --ro-bind /usr /usr --symlink usr/lib64 /lib64 --proc /proc --dev /dev --tmpfs /tmp --unshare-all --new-session --cap-add all --uid 0 bash
 170828 ?        Ss     0:00  |                       \_ bwrap --ro-bind /usr /usr --symlink usr/lib64 /lib64 --proc /proc --dev /dev --tmpfs /tmp --unshare-all --new-session --cap-add all --uid 0 bash
 170829 ?        S      0:00  |                           \_ bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this section, we demonstrated that a regular unprivileged user is
able to create namespaces recursively (up to 32 layers). And even though
the user appears to be root in the namespace, it is still a regular user
from the host perspective, and the user didn't gain new privileges.&lt;/p&gt;
&lt;p&gt;In the next section, we investigate what happens when the first
namespace is created by a container runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="container-runtime"&gt;
&lt;h2&gt;Container runtime&lt;/h2&gt;
&lt;p&gt;In a production environment, the initial container namespaces are
created by a container runtime such as &lt;a class="reference external" href="https://github.com/containers/podman"&gt;podman&lt;/a&gt;. To investigate this
setup, let's add some tools to the fedora's base container image:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[tristanc&amp;#64;fedora ~]$ CTX=$(buildah from fedora)
[tristanc&amp;#64;fedora ~]$ buildah run $CTX dnf install -y util-linux procps-ng bubblewrap
[tristanc&amp;#64;fedora ~]$ buildah commit --rm $CTX fedora
&lt;/pre&gt;
&lt;p&gt;With a minimal container, using the least amount of privileges by adding
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--cap-drop&lt;/span&gt; all&lt;/tt&gt;, we are not able to create the user namespace:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[tristanc&amp;#64;fedora ~]$ podman run --cap-drop all -it --rm fedora unshare --user --mount --net --pid --fork --map-root-user --mount-proc
unshare: write failed /proc/self/uid_map: Operation not permitted
&lt;/pre&gt;
&lt;p&gt;At least, we need the &lt;tt class="docutils literal"&gt;setfcap&lt;/tt&gt; capability which is enabled by
default, but that is not enough:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[tristanc&amp;#64;fedora ~]$ podman run -it --rm fedora unshare --user --mount --net --pid --fork --map-root-user --mount-proc
unshare: mount /proc failed: Permission denied
&lt;/pre&gt;
&lt;p&gt;It appears that we need to provide the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--privileged&lt;/span&gt;&lt;/tt&gt; flag:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[tristanc&amp;#64;fedora ~]$ podman run --privileged -it --rm fedora unshare --user --mount --net --pid --fork --map-root-user --mount-proc
-sh-5.2# unshare --user --mount --net --pid --fork --map-root-user --mount-proc
-sh-5.2#
&lt;/pre&gt;
&lt;p&gt;Podman, as well as &lt;a class="reference external" href="https://github.com/cri-o/cri-o"&gt;cri-o&lt;/a&gt;, provides additional isolations. In the next
section we'll investigate what is happening.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="procfs-kernel-restrictions"&gt;
&lt;h2&gt;Procfs kernel restrictions&lt;/h2&gt;
&lt;p&gt;It appears that, for the purpose of nested containerization, the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--privileged&lt;/span&gt;&lt;/tt&gt; argument keeps the &lt;tt class="docutils literal"&gt;/proc&lt;/tt&gt; untainted from any
mountpoints. Indeed, we can observe that a regular container does not
have access to the full &lt;tt class="docutils literal"&gt;/proc&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[tristanc&amp;#64;fedora ~]$ podman run -it --rm fedora grep &amp;quot;^tmpfs /proc&amp;quot; /proc/mounts
tmpfs /proc/acpi tmpfs ro,context=&amp;quot;system_u:object_r:container_file_t:s0:c373,c905&amp;quot;,relatime,size=0k,uid=1000,gid=1000,inode64 0 0
tmpfs /proc/scsi tmpfs ro,context=&amp;quot;system_u:object_r:container_file_t:s0:c373,c905&amp;quot;,relatime,size=0k,uid=1000,gid=1000,inode64 0 0
[tristanc&amp;#64;fedora ~]$ podman run --privileged -it --rm fedora grep &amp;quot;^tmpfs /proc&amp;quot; /proc/mounts | wc -l
0
&lt;/pre&gt;
&lt;p&gt;The container runtime hides some &lt;tt class="docutils literal"&gt;/proc&lt;/tt&gt; sub directories to prevent
leaking unnecessary information from the host. We can observe the same
behavior without a container runtime, similar to what we did in the
first section. For example the initial example no longer works in that
situation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[tristanc&amp;#64;fedora ~]$ sudo mount -t tmpfs none /proc/scsi
[sudo] password for tristanc:
[tristanc&amp;#64;fedora ~]$ unshare --user --mount --net --pid --fork --map-root-user --mount-proc
unshare: mount /proc failed: Operation not permitted
[tristanc&amp;#64;fedora ~]$ bwrap --ro-bind /usr /usr --symlink usr/lib64 /lib64 --proc /proc --dev /dev --tmpfs /tmp --unshare-all --new-session --cap-add all --uid 0 ps afx
bwrap: Can't mount proc on /newroot/proc: Operation not permitted
&lt;/pre&gt;
&lt;p&gt;The same error can happen inside a privileged pod when manually hiding a
directory, here &lt;tt class="docutils literal"&gt;/proc/scsi&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[tristanc&amp;#64;fedora ~]$ podman run --tmpfs /proc/scsi --privileged -it --rm fedora unshare --user --mount --net --pid --fork --map-root-user --mount-proc
unshare: mount /proc failed: Operation not permitted
&lt;/pre&gt;
&lt;p&gt;When the procfs is not fully visible, then the kernel prevents further
attempt to create a new fresh procfs, resulting in the
&lt;tt class="docutils literal"&gt;mount /proc failed: Operation not permitted&lt;/tt&gt; error. This is
unfortunate because our workload does not need a fully visible procfs,
and the workload would work if the hidden paths were propagated
automatically. This is also confusing because the process is allowed to
create the pid namespace with &lt;tt class="docutils literal"&gt;CLONE_NEWPID&lt;/tt&gt;, but it is not allowed to
use it when mounting the procfs.&lt;/p&gt;
&lt;p&gt;Thankfully, as pointed out by &amp;#64;giuseppe from the Red Hat Container Team,
there is already a &lt;a class="reference external" href="https://github.com/kubernetes/enhancements/issues/4265"&gt;MountProc&lt;/a&gt; enhancement proposed in kubernetes to
enable this use-case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, we saw that creating recursive namespaces is possible
under normal conditions. However, container runtimes are tainting the
&lt;tt class="docutils literal"&gt;/proc&lt;/tt&gt; file-system with tmpfs to prevent data from being exposed into
a container, and this alone prevents the creation of nested PID
namespace.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2024 Jan 12 to 2024 Jan 31 summary</title><link href="https://www.softwarefactory-project.io/sprint-2024-jan-12-to-2024-jan-31-summary.html" rel="alternate"></link><published>2024-01-31T10:00:00+00:00</published><updated>2024-01-31T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-01-31:/sprint-2024-jan-12-to-2024-jan-31-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We voted for open infra foundation elections&lt;/li&gt;
&lt;li&gt;We reviewed persistent host change &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/906433"&gt;https://review.opendev.org/c/zuul/zuul/+/906433&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We reviewed custom pod spec for Nodepool: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/nodepool/+/907109"&gt;https://review.opendev.org/c/zuul/nodepool/+/907109&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed gitlab …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We voted for open infra foundation elections&lt;/li&gt;
&lt;li&gt;We reviewed persistent host change &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/906433"&gt;https://review.opendev.org/c/zuul/zuul/+/906433&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We reviewed custom pod spec for Nodepool: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/nodepool/+/907109"&gt;https://review.opendev.org/c/zuul/nodepool/+/907109&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed gitlab driver issue (avoid trigger build when reviewers added/removed) &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/906103"&gt;https://review.opendev.org/c/zuul/zuul/+/906103&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated the reference gitlab pipeline in doc &lt;a class="reference external" href="https://review.opendev.okjjrg/c/zuul/zuul/+/906355"&gt;https://review.opendev.okjjrg/c/zuul/zuul/+/906355&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We help merging gitlab support for blocking comment threads &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/813136"&gt;https://review.opendev.org/c/zuul/zuul/+/813136&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a feature in logscraper that it can parse many yaml files into one, so there is no need to update the download file, but we can just add new file to be parsed&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;We added support for custom gerrit connection secret: RHOSZUUL-1635, and proposed new cr validation logic: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30697"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30697&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We defined the milestone 6 and closed milestone 5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We released sf-operator 0.0.20 to 0.0.23&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We improved the support of the custom CA trust in init-containers &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30558/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30558/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We documented how to configure a 'config' repo on Gitlab ttps://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30572&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We proposed an update on how to mount Zuul source tree  &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30607"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30607&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We explored the feasibility of reducing the size of the Zuul JS bundle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We worked on the CLI overhaul (one binary to rule them all): we reworked and improved most dev-related commands. Some changes are still in review but once merged, we will cut out the legacy CLI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We moved Zuul images from Stream9 to UBI9&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We started to check how to export/import zuul keys from sf.io to microshift.sf.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We did a little fixes and improvements:&lt;/p&gt;
&lt;p&gt;** Remove getStorageClassname function&lt;/p&gt;
&lt;p&gt;** Improved log messages regarding Storage size when it was trying to decrease storage size&lt;/p&gt;
&lt;p&gt;** Set LogServerStatus and SoftwareFactoryStatus structures derived from the same base structure&lt;/p&gt;
&lt;p&gt;** Fixed some docstring for improve documentation&lt;/p&gt;
&lt;p&gt;** Enable GitLab support for the SF's config repo&lt;/p&gt;
&lt;p&gt;** Renamed ConfigLocationSpec to ConfigRepositoryLocationSpec&lt;/p&gt;
&lt;p&gt;** Fixed trigger variable for a Zuul connection being squashed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Dec 22 to 2024 Jan 10 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-dec-22-to-2024-jan-10-summary.html" rel="alternate"></link><published>2024-01-10T10:00:00+00:00</published><updated>2024-01-10T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2024-01-10:/sprint-2023-dec-22-to-2024-jan-10-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated logjuicer role integration: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/899212"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/899212&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We released SF 4.0 0.0.19 alpha and validated deployment&lt;/li&gt;
&lt;li&gt;We made a minimal CR installation test in CI &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30439"&gt;https://softwarefactory-project …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated logjuicer role integration: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/899212"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/899212&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We released SF 4.0 0.0.19 alpha and validated deployment&lt;/li&gt;
&lt;li&gt;We made a minimal CR installation test in CI &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30439"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30439&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed the logs/ and nodepool/builds/ directory listing since the move to subpathes&lt;/li&gt;
&lt;li&gt;We added Secret sf-ssl-cert format detail in sf-operator doc &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30496"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30496&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We improved dev prepare to get a properly configured demo-tenant &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30514"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30514&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We made sure CI job use deploy/config instead of tmp/config + use demo-tenant for adding microhsift-pod job &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30517"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30517&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We're working on the CLI overhaul to unify CLIs&lt;/li&gt;
&lt;li&gt;We have enabled GitLab support for the SF's config repo&lt;/li&gt;
&lt;li&gt;We fixed the trigger variable squashing on the default connection for post pipeline&lt;/li&gt;
&lt;li&gt;We ensure Zuul and Nodepool can execute the &amp;quot;update-ca-trust&amp;quot; command&lt;/li&gt;
&lt;li&gt;We have Mount a ConfigMap &amp;quot;corporate-ca-certs&amp;quot;, now if the user wants a coporate CA, it can be added.&lt;/li&gt;
&lt;li&gt;We have Documented on how to enable corporate CA into Zuul and Nodepool services&lt;/li&gt;
&lt;li&gt;We added Zuul Pipeline Bootstrap library for CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Dec 01 to Dec 20 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-dec-01-to-dec-20-summary.html" rel="alternate"></link><published>2023-12-20T10:00:00+00:00</published><updated>2023-12-20T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-12-20:/sprint-2023-dec-01-to-dec-20-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We resurrected &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-client/+/831946"&gt;https://review.opendev.org/c/zuul/zuul-client/+/831946&lt;/a&gt; to enable SSO auth in zuul-client&lt;/li&gt;
&lt;li&gt;We checked the AWS service utilization if we can save money somehow&lt;/li&gt;
&lt;li&gt;We changed the hardcoded value for download file list for …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We resurrected &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-client/+/831946"&gt;https://review.opendev.org/c/zuul/zuul-client/+/831946&lt;/a&gt; to enable SSO auth in zuul-client&lt;/li&gt;
&lt;li&gt;We checked the AWS service utilization if we can save money somehow&lt;/li&gt;
&lt;li&gt;We changed the hardcoded value for download file list for logscraper and logsender, so the custom path can be configured. That will be helpful to enable pulling logs from Next Gen CI jobs and push it to the OpenSearch RDO.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We bumped zuul to 9.3.0 and nodepool to 9.1.0&lt;/li&gt;
&lt;li&gt;We started working on the CLI overhaul. We are moving commands under one single CLI (operator's main.go) following the Subject &amp;gt; Action &amp;gt; Target pattern.&lt;/li&gt;
&lt;li&gt;We worked on adding Elasticsearch and Pagure connection support &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30253"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30253&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on setting Route sub-pathes &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30381"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30381&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We released 0.0.17, 0.0.18 and 0.0.19 versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Nov 10 to Nov 29 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-nov-10-to-nov-29-summary.html" rel="alternate"></link><published>2023-11-29T10:00:00+00:00</published><updated>2023-11-29T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-11-29:/sprint-2023-nov-10-to-nov-29-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed the third-party ci sf provides to the zuul-jobs repository&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We improved prometheus annotation of the sf-operator to prevent spurious update&lt;/li&gt;
&lt;li&gt;We merged the dev and standalone mode of the sf-operator &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30041"&gt;https://softwarefactory-project.io/r …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed the third-party ci sf provides to the zuul-jobs repository&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We improved prometheus annotation of the sf-operator to prevent spurious update&lt;/li&gt;
&lt;li&gt;We merged the dev and standalone mode of the sf-operator &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30041"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30041&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed a rendering issue in zuul-weeder where the info page lagged behind the update.&lt;/li&gt;
&lt;li&gt;We removed need of an extra and useless PVC for zookeeper. &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30037"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30037&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added PVC extend feature support for Zookeeper &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30059"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30059&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We set a pod-name selector for all statefulset eg. &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30062"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30062&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We change the owned secret watch mechanism to only relevant secrets to avoid reconcile loop hell &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30087"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30087&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated doc to refer to the new standalone mode for developer &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30110"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30110&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed the executor replica not persisted when sf-operator update the Executor sts &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30150"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30150&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a scale up test for merger &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30151"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30151&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added Git and Elasticsearch connections support: such as and followups changes &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30169"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30169&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added support for secrets populate in CLI for Github and Gitlab support &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30248"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/30248&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We took time to fight against CI flakiness&lt;/li&gt;
&lt;li&gt;We tagged and deployed 0.0.13 to 0.0.16 and addressed issues&lt;/li&gt;
&lt;li&gt;We fixed runtime issue (and got XP points): zookeeper crash due to Volume full and logserver purglogs delay too long then Volume full too&lt;/li&gt;
&lt;li&gt;We added an ADR for backup and restore&lt;/li&gt;
&lt;li&gt;Add probes for sshd container in Logserver statefulset&lt;/li&gt;
&lt;li&gt;We added log forwarding for most components via a fluent bit sidecar container or a custom python log handler lib&lt;/li&gt;
&lt;li&gt;we implemented disk usage monitoring for every statefulset's PV&lt;/li&gt;
&lt;li&gt;We moved several containers to use Red Hat's UBI base image (Purgelogs, Sshd, Nodepool Builder and Launcher, Git-Daemon, Zookeper)&lt;/li&gt;
&lt;li&gt;We studied a way to use Horizontal Pod scaling Kubernetes feature into sf-operator&lt;/li&gt;
&lt;li&gt;We started to move Zuul sf-operator initial configurations to use our golang little library (structs) instead of bash - first step tenant bootstrap&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Oct 20 to Nov 08 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-oct-20-to-nov-08-summary.html" rel="alternate"></link><published>2023-11-08T10:00:00+00:00</published><updated>2023-11-08T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-11-08:/sprint-2023-oct-20-to-nov-08-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed zuul jobs roles to run LogJuicer: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/899212"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/899212&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We Migrated Software Factory project CI Jobs from sf.io to micro.sf.io&lt;/li&gt;
&lt;li&gt;We changed some GitHub connection parameters …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed zuul jobs roles to run LogJuicer: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/899212"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/899212&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We Migrated Software Factory project CI Jobs from sf.io to micro.sf.io&lt;/li&gt;
&lt;li&gt;We changed some GitHub connection parameters to kubernetes secrets ( previously they were set in the SF CR )&lt;/li&gt;
&lt;li&gt;We have added GitLab connection support to Zuul Connections in sf-operator&lt;/li&gt;
&lt;li&gt;We set Golang Environment Variable due to an update in golang 1.21&lt;/li&gt;
&lt;li&gt;We are working on a MariaDB Container based on UBI 9 Image&lt;/li&gt;
&lt;li&gt;We investigated Kubernetes Horizontal Pod Scaling to implement it sf-operator project:
* Added Horizontal Pod Autoscaler to Zuul Executor
* Add metrics-server to CI jobs
* Add metrics-server stress test&lt;/li&gt;
&lt;li&gt;We added the zuul pub key to nodepool-builder &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29786"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29786&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We resized nodepool-builder /var/lib/nodepool &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29785"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29785&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We wrote nodepool-builder ADR &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29797"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29797&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We prevented .ssh/known_hosts to be wiped &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29812"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29812&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a standalone mode for sf-operator &lt;a class="reference external" href="https://softwarefactory-project.io/r/q/topic:standalone+repo:software-factory/sf-operator"&gt;https://softwarefactory-project.io/r/q/topic:standalone+repo:software-factory/sf-operator&lt;/a&gt; without cluster admin&lt;/li&gt;
&lt;li&gt;we started work on providing an alternative for log collection with zuul &amp;amp; nodepool, based on Fluent Bit. (Demo maybe)&lt;/li&gt;
&lt;li&gt;We're publishing our docs automatically on github.io, API documentation is autogenerated as well (Demo for sure)&lt;/li&gt;
&lt;li&gt;We are working on merging the dev and standalone mode:
* dev = operator straight from the source, just &amp;quot;go run&amp;quot;
* standalone is not using CR, just plain config, w/o cluster admin&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Leveraging Cap'n Proto For Logreduce Reports</title><link href="https://www.softwarefactory-project.io/leveraging-capn-proto-for-logreduce-reports.html" rel="alternate"></link><published>2023-10-23T00:00:00+00:00</published><updated>2023-10-23T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2023-10-23:/leveraging-capn-proto-for-logreduce-reports.html</id><summary type="html">&lt;style type="text/css"&gt;
  blockquote {
    font-size: small;
    padding: 0px 5px;
  }
&lt;/style&gt;&lt;!-- This work is licensed under the Creative Commons Attribution 4.0 International License.
     To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
     or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
--&gt;&lt;!--  --&gt;
&lt;blockquote&gt;
This post is a follow-up on the previous &lt;a class="reference external" href="https://www.softwarefactory-project.io/logreduce-wasm-based-web-interface.html"&gt;WASM based web interface&lt;/a&gt;
article.&lt;/blockquote&gt;
&lt;p&gt;This post describes why and how I used &lt;a class="reference external" href="https://capnproto.org/"&gt;Cap’n Proto&lt;/a&gt; for the
&lt;a class="reference external" href="https://github.com/logreduce/logreduce#readme"&gt;logreduce&lt;/a&gt; reports format. In three parts, I present:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Bincode versioning scheme.&lt;/li&gt;
&lt;li&gt;Cap’n Proto.&lt;/li&gt;
&lt;li&gt;Logreduce report encoder/decoder …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;style type="text/css"&gt;
  blockquote {
    font-size: small;
    padding: 0px 5px;
  }
&lt;/style&gt;&lt;!-- This work is licensed under the Creative Commons Attribution 4.0 International License.
     To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
     or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
--&gt;&lt;!--  --&gt;
&lt;blockquote&gt;
This post is a follow-up on the previous &lt;a class="reference external" href="https://www.softwarefactory-project.io/logreduce-wasm-based-web-interface.html"&gt;WASM based web interface&lt;/a&gt;
article.&lt;/blockquote&gt;
&lt;p&gt;This post describes why and how I used &lt;a class="reference external" href="https://capnproto.org/"&gt;Cap’n Proto&lt;/a&gt; for the
&lt;a class="reference external" href="https://github.com/logreduce/logreduce#readme"&gt;logreduce&lt;/a&gt; reports format. In three parts, I present:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Bincode versioning scheme.&lt;/li&gt;
&lt;li&gt;Cap’n Proto.&lt;/li&gt;
&lt;li&gt;Logreduce report encoder/decoder.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="context-and-problem-statement"&gt;
&lt;h2&gt;Context and problem statement&lt;/h2&gt;
&lt;p&gt;Logreduce is a tool that searches for anomalies in build logs. It can
produce reports displayable on web browsers. Logreduce used to
distribute an HTML file setup with a compatible rendering client.
However, in the context of the new web service interface, the client may
now display reports that were created by an older version of logreduce.&lt;/p&gt;
&lt;p&gt;The problem is that the report format didn't guarantee backward
compatibility: clients were not able to read reports saved in a previous
version.&lt;/p&gt;
&lt;p&gt;I evaluated the following formats to solve this problem:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://protobuf.dev/"&gt;Protobuf&lt;/a&gt;, introduced by Google in 2001.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://thrift.apache.org/"&gt;Thrift&lt;/a&gt;, introduced by Facebook in 2007.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://capnproto.org/"&gt;Cap’n Proto&lt;/a&gt;, introduced by the former maintainer of Protobuf in
2013.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://flatbuffers.dev/"&gt;Flatbuffers&lt;/a&gt;, introduced by Google in 2014.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cap'n Proto and Flatbuffers are modern formats designed for
performance-critical applications. They both enable access to the data
without parsing/unpacking, using a process known as zero-copy
serialization, which is a great feature for logreduce. Flatbuffers was
originally created for games development and it doesn't perform data
validation by default. Therefore I decided to use Cap'n Proto as
discussed in the next sections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bincode-versioning-scheme"&gt;
&lt;h2&gt;Bincode versioning scheme&lt;/h2&gt;
&lt;p&gt;In this section I present the main challenge of using bincode to save
data. Previously, logreduce used bincode to exchange reports.&lt;/p&gt;
&lt;div class="section" id="prepare-the-playground"&gt;
&lt;h3&gt;Prepare the playground&lt;/h3&gt;
&lt;p&gt;For the purpose of this article, we'll create a standalone playground.&lt;/p&gt;
&lt;blockquote&gt;
If you don't have &lt;tt class="docutils literal"&gt;cargo&lt;/tt&gt;, see this &lt;a class="reference external" href="https://www.rust-lang.org/tools/install"&gt;install rust&lt;/a&gt; documentation.&lt;/blockquote&gt;
&lt;p&gt;Setup a new project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo new capnp-playground
$ cd capnp-playground
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo add bincode@1.3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add serde with the derive feature to generate the encoder/decoder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo add serde@1.0 --features derive
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And build everything:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo run
Hello, world!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-the-initial-report"&gt;
&lt;h3&gt;Create the initial report&lt;/h3&gt;
&lt;p&gt;Add the following code to demonstrate bincode usage in the
&lt;tt class="docutils literal"&gt;src/main.rs&lt;/tt&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Copyright (C) 2023 Red Hat&lt;/span&gt;
&lt;span class="c1"&gt;// SPDX-License-Identifier: Apache-2.0&lt;/span&gt;

&lt;span class="c1"&gt;// This program demonstrates data type serialization.&lt;/span&gt;
&lt;span class="c1"&gt;// It does not handle exceptions and unwrap is used to keep the code short.&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;serde&lt;/span&gt;::&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Deserialize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Serialize&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;fs&lt;/span&gt;::&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug, Serialize, Deserialize)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// list of anomaly omitted&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug, Serialize, Deserialize)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Zuul&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;: &lt;span class="kt"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Prow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;: &lt;span class="kt"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: saving report&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;::&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;bincode&lt;/span&gt;::&lt;span class="n"&gt;serialize_into&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: loading report&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;::&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;bincode&lt;/span&gt;::&lt;span class="n"&gt;deserialize_from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;env&lt;/span&gt;::&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;::&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;encode&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;: &lt;span class="nc"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;::&lt;span class="n"&gt;Zuul&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;: &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;: &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;decode&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;got: {:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;eprintln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;usage: encode|decode file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the following commands to perform a serialization round trip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo run -- encode report.bin
report.bin: saving report

$ cargo run -- decode report.bin
report.bin: loading report
got: Report { baselines: [Zuul { change: 42, job: &amp;quot;test&amp;quot; }] }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-the-schema"&gt;
&lt;h3&gt;Updating the schema&lt;/h3&gt;
&lt;p&gt;Update the schema, for example, by adding a new field to the Zuul
structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- a/src/main.rs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/src/main.rs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gu"&gt;@@ -14,6 +14,7 @@ enum Content {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    Zuul {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;        change: u64,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;        job: String,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+        project: String,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    },&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    Prow {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;        pr: u64,&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="gu"&gt;@@ -38,6 +38,7 @@ fn main() {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;                baselines: vec![Content::Zuul {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;                    change: 42,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;                    job: &amp;quot;test&amp;quot;.to_string(),&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+                    project: &amp;quot;demo&amp;quot;.to_string(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;                }],&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;            };&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;            encode(&amp;amp;report, fp);&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, decoding the initial report produces this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo run -- decode report.bin
report.bin: loading report
thread &amp;#39;main&amp;#39; panicked at src/main.rs:42:37:
called `Result::unwrap()` on an `Err` value: Io(Error {
  kind: UnexpectedEof,
  message: &amp;quot;failed to fill whole buffer&amp;quot;
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is expected: bincode is not able to deserialize the previous report
because it now expects that Zuul builds have a project. To address that,
we need to use a versioning scheme, for example with such a data type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ReportV1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ReportV2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As long as we only append new variants, bincode is able to decode
reports saved in a previous version. However this is not very practical
because any change will introduce a new top level version.&lt;/p&gt;
&lt;p&gt;Moreover, bincode doesn't check the enum tag. If we move the &lt;tt class="docutils literal"&gt;Prow&lt;/tt&gt;
variant at the top of the &lt;tt class="docutils literal"&gt;Content&lt;/tt&gt; declaration, then bincode will
happily load the report using the wrong tag because the existing data
fits the shape.&lt;/p&gt;
&lt;p&gt;In the next section, I introduce a different format to handle versioning
efficiently.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-capn-proto"&gt;
&lt;h2&gt;Introducing Cap’n Proto&lt;/h2&gt;
&lt;p&gt;Cap’n Proto is a fast data interchange format. The main benefits are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;strongly-typed schema with first class support for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Algebraic_data_type"&gt;algebraic data
types&lt;/a&gt; and generic types.&lt;/li&gt;
&lt;li&gt;backward compatible message.&lt;/li&gt;
&lt;li&gt;zero-copy serialization.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="schema-language"&gt;
&lt;h3&gt;Schema Language&lt;/h3&gt;
&lt;p&gt;The data format is defined using a special language. Here is the schema
for the report used in the playground above, copy this to a file named
&lt;tt class="docutils literal"&gt;schema.capnp&lt;/tt&gt; at the root of the project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@0xa0b4401e03756e61&lt;/span&gt;;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;{&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;:List(Content)&lt;/span&gt;;&lt;span class="w"&gt;&lt;/span&gt;
}&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;{&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;union&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;{&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;zuul&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nd"&gt;@0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;:Zuul&lt;/span&gt;;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;prow&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nd"&gt;@1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;:Prow&lt;/span&gt;;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Zuul&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;{&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;:UInt64&lt;/span&gt;;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nd"&gt;@1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;:Text&lt;/span&gt;;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;:Text&lt;/span&gt;;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Prow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;{&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nd"&gt;@0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;:UInt64&lt;/span&gt;;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nd"&gt;@1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;:Text&lt;/span&gt;;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;
}&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should be self explanatory. Checkout the full logreduce report
schema in this &lt;a class="reference external" href="https://github.com/logreduce/logreduce/blob/main/crates/report/schema.capnp"&gt;report/schema.capnp&lt;/a&gt;, and the &lt;a class="reference external" href="https://capnproto.org/language.html"&gt;language documentation&lt;/a&gt;
to learn more about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-generation"&gt;
&lt;h3&gt;Code generation&lt;/h3&gt;
&lt;p&gt;Cap'n Proto provides a compiler named &lt;tt class="docutils literal"&gt;capnpc&lt;/tt&gt; to generate code for
&lt;a class="reference external" href="https://capnproto.org/otherlang.html"&gt;various languages&lt;/a&gt;. Copy the following build instructions to a file
named &lt;tt class="docutils literal"&gt;build.rs&lt;/tt&gt; at the root of the project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;capnpc&lt;/span&gt;::&lt;span class="n"&gt;CompilerCommand&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;schema.capnp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;generated/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;compiling schema.capnp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Get the compiler by installing &lt;tt class="docutils literal"&gt;capnproto&lt;/tt&gt; using your favorite package
manager, then run the following commands to generate the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo add --build capnpc@0.18 &amp;amp;&amp;amp; cargo add capnp@0.18
$ cargo build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Integrate the generated code in the &lt;tt class="docutils literal"&gt;main.rs&lt;/tt&gt; file by adding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;schema_capnp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#![allow(dead_code, unused_qualifications)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;include!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../generated/schema_capnp.rs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This setup introduces new Reader and Builder data types to read and
write reports according to the schema definition.&lt;/p&gt;
&lt;p&gt;In the next section I show how to use the new data types.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="report-encoder-decoder"&gt;
&lt;h2&gt;Report Encoder/Decoder&lt;/h2&gt;
&lt;p&gt;As an example usage of the generated data types, we can implement an
encoder/decoder for the existing report struct.&lt;/p&gt;
&lt;div class="section" id="encode-a-report"&gt;
&lt;h3&gt;Encode a report&lt;/h3&gt;
&lt;p&gt;Here is how to write a report using the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;capnp::message&lt;/span&gt;&lt;/tt&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// This function write the report to the argument implementing the Write trait.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;capnp_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;: &lt;span class="nc"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;capnp&lt;/span&gt;::&lt;span class="n"&gt;io&lt;/span&gt;::&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Prepare a report message builder&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;capnp&lt;/span&gt;::&lt;span class="n"&gt;message&lt;/span&gt;::&lt;span class="n"&gt;Builder&lt;/span&gt;::&lt;span class="n"&gt;new_default&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report_builder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_root&lt;/span&gt;::&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;schema_capnp&lt;/span&gt;::&lt;span class="n"&gt;report&lt;/span&gt;::&lt;span class="n"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Write a single content.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;write_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;: &lt;span class="nc"&gt;schema_capnp&lt;/span&gt;::&lt;span class="n"&gt;content&lt;/span&gt;::&lt;span class="n"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;::&lt;span class="n"&gt;Zuul&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Prepare a zuul builder.&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_zuul&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Write the fields&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;::&lt;span class="n"&gt;Prow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Prepare a prow builder.&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_prow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Write the fields&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_pr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Write the baselines vector&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Prepare the list builder.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;baselines_builder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report_builder&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reborrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_baselines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// Prepare the list element builder.&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content_builder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;baselines_builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reborrow&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// Write the individual baseline.&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;write_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content_builder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Write the message&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;capnp&lt;/span&gt;::&lt;span class="n"&gt;serialize&lt;/span&gt;::&lt;span class="n"&gt;write_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update the encode helper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gu"&gt;@@ -29,7 +84,7 @@ enum Content {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;fn encode(report: &amp;amp;Report, file: &amp;amp;str) {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    println!(&amp;quot;{}: saving report&amp;quot;, file);&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    let file = File::create(file).unwrap();&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gd"&gt;-    bincode::serialize_into(file, report).unwrap();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    capnp_encode(report, file)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the following command to demonstrate the encoding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo run -- encode report.msg
report.msg: saving report
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="decode-a-report"&gt;
&lt;h3&gt;Decode a report&lt;/h3&gt;
&lt;p&gt;Here is how to read a report:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// This function read the report from the argument implementing the BufRead trait.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;capnp_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufread&lt;/span&gt;: &lt;span class="nc"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;capnp&lt;/span&gt;::&lt;span class="n"&gt;io&lt;/span&gt;::&lt;span class="n"&gt;BufRead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message_reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;capnp&lt;/span&gt;::&lt;span class="n"&gt;serialize&lt;/span&gt;::&lt;span class="n"&gt;read_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;capnp&lt;/span&gt;::&lt;span class="n"&gt;message&lt;/span&gt;::&lt;span class="n"&gt;ReaderOptions&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report_reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message_reader&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_root&lt;/span&gt;::&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;schema_capnp&lt;/span&gt;::&lt;span class="n"&gt;report&lt;/span&gt;::&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;read_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;schema_capnp&lt;/span&gt;::&lt;span class="n"&gt;content&lt;/span&gt;::&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;schema_capnp&lt;/span&gt;::&lt;span class="n"&gt;content&lt;/span&gt;::&lt;span class="n"&gt;Which&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Read the generated union data type&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Which&lt;/span&gt;::&lt;span class="n"&gt;Zuul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Prepare the reader&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Read the fields&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_change&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_job&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_project&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;::&lt;span class="n"&gt;Zuul&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Which&lt;/span&gt;::&lt;span class="n"&gt;Prow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Prepare the reader&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Read the fields&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pr&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;::&lt;span class="n"&gt;Prow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Read the baselines vector&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Prepare the reader&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report_reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_baselines&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Read the baselines&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;::&lt;span class="n"&gt;with_capacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update the decode helper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gu"&gt;@@ -90,7 +142,7 @@ fn encode(report: &amp;amp;Report, file: &amp;amp;str) {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;fn decode(file: &amp;amp;str) -&amp;gt; Report {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    println!(&amp;quot;{}: loading report&amp;quot;, file);&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    let file = File::open(file).unwrap();&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gd"&gt;-    bincode::deserialize_from(file).unwrap()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    capnp_decode(std::io::BufReader::new(file))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the following command to demonstrate the decoding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo run -- decode report.msg
report.msg: loading report
got: Report { baselines: [Zuul { change: 42, job: &amp;quot;test&amp;quot;, project: &amp;quot;demo&amp;quot; }] }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This concludes the serialization round trip demonstration using Cap'n
Proto. In the next section I show how to update the schema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="evolving-the-schema"&gt;
&lt;h3&gt;Evolving the schema&lt;/h3&gt;
&lt;p&gt;In this section, we'll perform a schema update like we did earlier.&lt;/p&gt;
&lt;p&gt;Cap'n Proto prescribes a list of rules to preserve backward compability.
For example, it is not possible to remove fields, they can only be
marked as obsolete, and their memory location will always be reserved.&lt;/p&gt;
&lt;p&gt;It is of course possible to add new fields. For example, here is how to
add a title field to the report struct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/schema.capnp b/schema.capnp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gh"&gt;index add50b9..cd9e996 100644&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gd"&gt;--- a/schema.capnp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/schema.capnp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gu"&gt;@@ -2,6 +2,7 @@&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;struct Report {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;  baselines @0 :List(Content);&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+  title     @1 :Text;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="gh"&gt;diff --git a/src/main.rs b/src/main.rs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gh"&gt;index 09fc740..40411ad 100644&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gd"&gt;--- a/src/main.rs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/src/main.rs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gu"&gt;@@ -15,6 +15,7 @@&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;#[derive(Debug, Serialize, Deserialize)]&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;struct Report {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    baselines: Vec&amp;lt;Content&amp;gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    title: String,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    // list of anomaly omitted&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gu"&gt;@@ -58,6 +58,8 @@ fn capnp_encode(report: &amp;amp;Report, write: impl capnp::io::Write) {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;        }&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    }&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="gi"&gt;+    report_builder.set_title(report.title.as_str().into());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;    // Write the message&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    capnp::serialize::write_message(write, &amp;amp;message).unwrap();&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gu"&gt;@@ -111,12 +113,15 @@ fn capnp_decode(bufread: impl capnp::io::BufRead) -&amp;gt; Report {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;        vec&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    };&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="gd"&gt;-    Report { baselines }&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    let title = report_reader.get_title().unwrap().to_str().unwrap().into();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    Report { baselines, title }&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gu"&gt;@@ -149,6 +154,7 @@ fn main() {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    match &amp;amp;std::env::args().collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;()[..] {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;        [_, cmd, fp] if cmd == &amp;quot;encode&amp;quot; =&amp;gt; {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;            let report = Report {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+                title: &amp;quot;test title&amp;quot;.to_string(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;                baselines: vec![Content::Zuul {&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;                    change: 42,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;                    job: &amp;quot;test&amp;quot;.to_string(),&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run this command to demonstrate we can read the report previously saved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo run -- decode ./report.msg
report.msg: loading report
got: Report { baselines: [Zuul { change: 42, job: &amp;quot;test&amp;quot;, project: &amp;quot;demo&amp;quot; }], title: &amp;quot;&amp;quot; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The decoding succeeded and the report title field got the default value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="benchmark"&gt;
&lt;h2&gt;Benchmark&lt;/h2&gt;
&lt;p&gt;In this section, I measure the performance of Cap'n Proto using a sample
report of 1k lines with 2k lines of context.&lt;/p&gt;
&lt;div class="section" id="cpu-usage"&gt;
&lt;h3&gt;CPU usage&lt;/h3&gt;
&lt;p&gt;Here are the results of the &lt;a class="reference external" href="https://github.com/logreduce/logreduce/blob/main/crates/report/benches/bench-report.rs"&gt;benchmark&lt;/a&gt; running on my thinkpad t14
laptop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo bench # lower is better
Decoder/capnp           time:   [296.55 µs 297.00 µs 297.45 µs]
Decoder/bincode         time:   [278.36 µs 279.11 µs 280.01 µs]
Decoder/json            time:   [954.06 µs 956.90 µs 961.04 µs]

Encoder/capnp           time:   [71.704 µs 71.773 µs 71.875 µs]
Encoder/bincode         time:   [26.368 µs 26.394 µs 26.425 µs]
Encoder/json            time:   [162.20 µs 162.33 µs 162.46 µs]

Read/capnp              time:   [0.1119 µs 0.1120 µs 0.1129 µs]
Read/bincode            time:   [294.48 µs 295.36 µs 296.59 µs]
Read/json               time:   [987.78 µs 990.39 µs 995.78 µs]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this is a simple benchmark, and I may have missed some
optimizations, though the results match the public &lt;a class="reference external" href="https://github.com/djkoloski/rust_serialization_benchmark"&gt;rust serialization
benchmark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The encoder/decoder benchmark loads the full report struct. Cap'n Proto
encoder/decoder are a bit slower because they perform extra validation
work to protect against malicious input (see &lt;a class="reference external" href="https://capnproto.org/encoding.html#security-considerations"&gt;security
considerations&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The read benchmark traverses the report to count the number of lines. In
that case, Cap'n Proto is three orders of magnitude faster because we
can access the data directly from the reading buffer, without perfoming
any copy. This is great for rendering in the browser, because the dom
elements need to copy the data anyway, so we can avoid decoding the
report into an intermediary structure. Here is how the read benchmark is
implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bench_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;capnp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Create a message reader&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;black_box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;encoded_capnp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message_reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;capnp&lt;/span&gt;::&lt;span class="n"&gt;serialize&lt;/span&gt;::&lt;span class="n"&gt;read_message_from_flat_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;capnp&lt;/span&gt;::&lt;span class="n"&gt;message&lt;/span&gt;::&lt;span class="n"&gt;ReaderOptions&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message_reader&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_root&lt;/span&gt;::&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;logreduce_report&lt;/span&gt;::&lt;span class="n"&gt;schema_capnp&lt;/span&gt;::&lt;span class="n"&gt;report&lt;/span&gt;::&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Traverse the list of log reports&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_log_reports&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_anomalies&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1025&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bench_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bincode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;black_box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;encoded_bincode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;: &lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bincode&lt;/span&gt;::&lt;span class="n"&gt;deserialize_from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_reports&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anomalies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1025&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="report-file-size-1"&gt;
&lt;span id="report-file-size"&gt;&lt;/span&gt;&lt;h3&gt;Report file size.&lt;/h3&gt;
&lt;p&gt;Cap'n Proto wire format is a bit heavier and after compression, about
12% bigger than bincode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ du -b report*
162824  report-capnp.bin
114360  report-capnp-packed.bin
123916  report-bincode.bin
149830  report.json

$ gzip report*; du -b report*
59361   report-capnp.bin.gz
61280   report-capnp-packed.bin.gz
52435   report-bincode.bin.gz
50401   report.json.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that Cap'n Proto also supports a packed format, but it has higher
runtime costs and worse gzip compressions.&lt;/p&gt;
&lt;p&gt;It is surprising that compression works so well on JSON for this schema.
I guess this is because the report is mostly a list of list of text with
few structure fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="client-code-size"&gt;
&lt;h3&gt;Client code size&lt;/h3&gt;
&lt;p&gt;Lastly the runtime code is similar, here is the WASM size before and
after the &lt;a class="reference external" href="https://github.com/logreduce/logreduce/pull/57"&gt;PR introducing capnp&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nix build -o capnp   github:logreduce/logreduce/fb4f69e#web
$ nix build -o bincode github:logreduce/logreduce/2578019#web
$ du -b capnp/*.wasm bincode/*.wasm
529322  capnp/logreduce-web.wasm
531327  bincode/logreduce-web.wasm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I guess the runtime code is smaller because capnp does not use the serde
machinery.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Cap'n Proto works well for logreduce. The schema language is simple to
understand and the generated code is easy to work with. Being able to
read the data directly from memory is a great capability that can enable
blazingly fast processing.&lt;/p&gt;
&lt;p&gt;Writing the encoder and decoder is a bit of fairly mechanical work.
However doing this work manually enables adding customization, for
example, deduplicating the data using a process known as &lt;a class="reference external" href="https://en.wikipedia.org/wiki/String_interning"&gt;string
interning&lt;/a&gt;. Future work in rust introspection may enable deriving this
work automatically, checkout the &lt;a class="reference external" href="https://soasis.org/posts/a-mirror-for-rust-a-plan-for-generic-compile-time-introspection-in-rust/"&gt;Shepherd’s Oasis blog post&lt;/a&gt; to learn
more.&lt;/p&gt;
&lt;p&gt;In conclusion, replacing bincode with Cap'n Proto future proofs
logreduce reports. This format adds some negligible storage and
processing costs, in exchange for a backward compatible schema and more
efficient data access. Flatbuffers is also worth considering as it has a
lower storage cost, but it requires more work to verify that the data is
safe to be processed.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Sep 29 to Oct 18 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-sep-29-to-oct-18-summary.html" rel="alternate"></link><published>2023-10-18T10:00:00+00:00</published><updated>2023-10-18T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-10-18:/sprint-2023-sep-29-to-oct-18-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We attempted to patch nodepool to add low level API metrics with kubernetes-based providers. The approach was rejected but we have alternatives we can explore&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;p&gt;Software Factory&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed an ADR to overhaul the CLI: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29780/1/doc/adr/0011-CLI-overhaul.md"&gt;https …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We attempted to patch nodepool to add low level API metrics with kubernetes-based providers. The approach was rejected but we have alternatives we can explore&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;p&gt;Software Factory&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed an ADR to overhaul the CLI: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29780/1/doc/adr/0011-CLI-overhaul.md"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29780/1/doc/adr/0011-CLI-overhaul.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We can automatically monitor OpenStack API calls from nodepool on a per cloud basis, if nodepool's clouds.yaml is properly configured.&lt;/li&gt;
&lt;li&gt;We've enabled doc publishing on github pages with a github action. The doc is updated with every commit at &lt;a class="reference external" href="https://softwarefactory-project.github.io/sf-operator/"&gt;https://softwarefactory-project.github.io/sf-operator/&lt;/a&gt; - API doc autogeneration is also coming: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29796"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29796&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've added Nodepool Builder&lt;/li&gt;
&lt;li&gt;We've added Zuul Merger&lt;/li&gt;
&lt;li&gt;We've change the domain name from sftests.com to sfop.me&lt;/li&gt;
&lt;li&gt;We've added openstack, aws and kubectl cli's to nodepool images&lt;/li&gt;
&lt;li&gt;We bumped Nodepool to 9.0.0-3&lt;/li&gt;
&lt;li&gt;We've added Zuul Log Levels to CRD&lt;/li&gt;
&lt;li&gt;We've added GitHub connection support to Zuul connections&lt;/li&gt;
&lt;li&gt;We've started to migrate sf-operator-olm job from sf.io(containers base instance) to micro.sf.io(kubernetes base instance)&lt;/li&gt;
&lt;li&gt;We added a ssh key pair for nodepool-builder pod + check that we can use an external builder &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29589"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29589&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added capability to set the nodepool-builder home volume size &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29616"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29616&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added log level setting &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29617"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29617&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added sf-operator documenation for nodepool-builder &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29634"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29634&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We ensured nodepool builder holds the cloud and kube secrets as well &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29650"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29650&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We populated a proposal for the milestone 4&lt;/li&gt;
&lt;li&gt;We explored MP+ dev / started to make use of it / requested the Monocle operator installation in IT ticket&lt;/li&gt;
&lt;li&gt;We validated the run of Monocle on MP+ dev (No Routes) and waiting for the operator itself to be installed&lt;/li&gt;
&lt;li&gt;We added an httpd container to make nodepool builder build logs browsable &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29763/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29763/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added the zuul pub key to nodepool-builder &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29786"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29786&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added the capability to resize nodepool-builder /var/lib/nodepool &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29785"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29785&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We are adding the cloud-centos-9 build recipe to nodepool.microshift.sf.io &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/microzuul-config/+/refs/heads/master/nodepool/dib-ansible/cloud-centos-9.yaml"&gt;https://softwarefactory-project.io/r/plugins/gitiles/microzuul-config/+/refs/heads/master/nodepool/dib-ansible/cloud-centos-9.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added blog post about etcd issue and sf-operator&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Operators and Monitoring: making life easier for deployers</title><link href="https://www.softwarefactory-project.io/operators-and-monitoring-making-life-easier-for-deployers.html" rel="alternate"></link><published>2023-10-17T00:00:00+00:00</published><updated>2023-10-17T00:00:00+00:00</updated><author><name>Matthieu Huin</name></author><id>tag:www.softwarefactory-project.io,2023-10-17:/operators-and-monitoring-making-life-easier-for-deployers.html</id><summary type="html">&lt;p&gt;In this article, I will share my thoughts, feedback and ideas following the &lt;a class="reference external" href="https://softwarefactory-project.io/r/q/(topic:prometheus_operator+OR+topic:monitoring)+project:software-factory/sf-operator"&gt;work I have done
on monitoring operands&lt;/a&gt; for the &lt;a class="reference external" href="https://github.com/softwarefactory-project/sf-operator"&gt;SF Operator&lt;/a&gt;, in the hopes that other developers looking to add deep
insights and automated service tuning to their own operators may build upon my experience.&lt;/p&gt;
&lt;div class="section" id="if-you-can-t-measure-it-you-can-t-size-it-properly"&gt;
&lt;h2&gt;If you …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In this article, I will share my thoughts, feedback and ideas following the &lt;a class="reference external" href="https://softwarefactory-project.io/r/q/(topic:prometheus_operator+OR+topic:monitoring)+project:software-factory/sf-operator"&gt;work I have done
on monitoring operands&lt;/a&gt; for the &lt;a class="reference external" href="https://github.com/softwarefactory-project/sf-operator"&gt;SF Operator&lt;/a&gt;, in the hopes that other developers looking to add deep
insights and automated service tuning to their own operators may build upon my experience.&lt;/p&gt;
&lt;div class="section" id="if-you-can-t-measure-it-you-can-t-size-it-properly"&gt;
&lt;h2&gt;If you can't measure it, you can't size it properly&lt;/h2&gt;
&lt;p&gt;Orchestrating applications with Kubernetes opens up a world of possibilities. Among the biggest game changers,
according to me, we have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Upgrade strategies that also simplify rollback should a problem arise&lt;/li&gt;
&lt;li&gt;Horizontal scaling and load balancing your workload, two often dreaded Ops tasks (I know I do!), become much simpler
to handle. More often than not, it's just about changing the replica count in a manifest; your
cluster handles the rest under the hood.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scaling up or down, however, requires knowledge of &lt;strong&gt;when&lt;/strong&gt; it should occur. While Kubernetes' &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/"&gt;Horizontal Pod Autoscaling&lt;/a&gt;
can trigger scaling on CPU or memory usage automatically, application deployers with deeper knowledge of
their software may want to react on more precise events that can be measured. And that is where monitoring embedded
into an operator comes into play.&lt;/p&gt;
&lt;p&gt;Operator developers can define their Pods to include a way to emit metrics. They can also use the operator's
controllers to configure metrics collection, so that a Prometheus instance will know automatically how to scrape these
metrics. Finally, with operations knowledge, the operator can include interesting alerts that will
trigger when the application operates outside of its expected behavior.&lt;/p&gt;
&lt;p&gt;And when you deploy an application with such an operator, you get all that operating knowledge for free!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-prometheus-operator"&gt;
&lt;h2&gt;The Prometheus Operator&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://prometheus-operator.dev"&gt;prometheus operator&lt;/a&gt;, unsurprisingly, is truly the cornerstone of enabling monitoring with
operators. It provides a declarative API (ie &amp;quot;give me a Prometheus instance!&amp;quot;, or &amp;quot;monitor this pod!&amp;quot;)
that makes it really simple to set up a monitoring environment and work with monitoring resources in
an operator's source code.&lt;/p&gt;
&lt;p&gt;I would recommend installing the prometheus operator on any Kubernetes cluster that will run
applications. You can then spin up a Prometheus instance that will collect metrics emitted on a given namespace
and/or from resources matching specific labels.&lt;/p&gt;
&lt;p&gt;On OpenShift, the prometheus operator can optionally be installed at deployment time,
which will result in a cluster-wide instance of Prometheus that can collect application metrics automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exposing-your-operands-metrics"&gt;
&lt;h2&gt;Exposing your operands' metrics&lt;/h2&gt;
&lt;p&gt;In the development of the SF-Operator, we face three categories of operands when it comes to metrics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The operand's underlying application(s) emit prometheus metrics&lt;/li&gt;
&lt;li&gt;The operand's underlying application(s) do not emit relevant metrics, and we desire Pod-related metrics&lt;/li&gt;
&lt;li&gt;The operand's underlying application(s) emit statsD metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's dive into the details of each case.&lt;/p&gt;
&lt;div class="section" id="the-operand-emits-prometheus-metrics"&gt;
&lt;h3&gt;The Operand emits prometheus metrics&lt;/h3&gt;
&lt;p&gt;This is the case for Zuul. It is truly the simplest case since it is enough to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28612/4/controllers/zuul.go#425"&gt;ensure emitting the metrics is enabled in the operand's configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29527/4/controllers/zuul.go#212"&gt;ensure the right port is declared in the relevant container spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We could also add a route to enable an external Prometheus to scrape the metrics endpoint,
but since we target OpenShift we make the assumption that a Prometheus instance that is internal
to the cluster will be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-operand-doesn-t-emit-relevant-metrics-and-we-desire-pod-related-metrics"&gt;
&lt;h3&gt;The Operand doesn't emit relevant metrics, and we desire Pod-related metrics&lt;/h3&gt;
&lt;p&gt;This is the case with the Log server. Basically, this operand is just an Apache server and an SSH server taped together
on top of storage. We &lt;strong&gt;could&lt;/strong&gt; look into &lt;a class="reference external" href="https://www.giffgaff.io/tech/monitoring-apache-with-prometheus"&gt;emitting Apache metrics to be scraped by Prometheus&lt;/a&gt;, but from years of
operating several large Software Factories, we know for a fact that SSH and HTTPD performances are nearly never bottlenecks
in our use cases.&lt;/p&gt;
&lt;p&gt;What we &lt;strong&gt;do want&lt;/strong&gt; to keep an eye on, however, is disk usage, and down the line be notified when available space
is below 10% of total capacity. When testing on MicroShift, I never actually managed
to collect kubelet metrics that are supposed to expose statistics on persistent volumes being used. This is why I
opted to expose disk usage metrics with a sidecar container running &lt;a class="reference external" href="https://github.com/prometheus/node_exporter#node-exporter"&gt;Node Exporter&lt;/a&gt;. Slap that container onto
your Pod, and voilà! You're basically back to case 1.&lt;/p&gt;
&lt;p&gt;You can see how it is implemented in the SF-operator as a &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29391/37/controllers/libs/monitoring/monitoring.go#50"&gt;helper function called &amp;quot;MkNodeExporterSideCarContainer&amp;quot;&lt;/a&gt;,
and &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29391/37/controllers/logserver_controller.go#348"&gt;within the Log server controller&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-operand-emits-statsd-metrics"&gt;
&lt;h3&gt;The Operand emits statsD metrics&lt;/h3&gt;
&lt;p&gt;This is the case with Nodepool and Zuul. For simplicity's sake, we would like to aggregate all metrics in Prometheus.
This can be done easily with a sidecar container running &lt;a class="reference external" href="https://github.com/prometheus/statsd_exporter#overview"&gt;StatsD Exporter&lt;/a&gt;. All you need is a &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29482"&gt;mapping configuration file&lt;/a&gt;
that will tell the exporter how to translate statsD metrics into prometheus metrics - especially where the labels are
in the original metric's name. Once again, all you need then is to expose the exporter's service port and your metrics are
ready to be scraped.&lt;/p&gt;
&lt;p&gt;Like for Node Exporter, we created a &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29391/37/controllers/libs/monitoring/monitoring.go#93"&gt;helper function called &amp;quot;MkStatsdExporterSideCarContainer&amp;quot;&lt;/a&gt; that makes it easy
to emit statsd metrics from a Pod in a Prometheus-friendly format.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="making-sure-the-metrics-will-be-collected"&gt;
&lt;h2&gt;Making sure the metrics will be collected&lt;/h2&gt;
&lt;p&gt;In the last paragraph, we made sure our metrics can be scraped from our Pods. Thanks to the prometheus operator, we can
go one step further and tell &lt;em&gt;any&lt;/em&gt; Prometheus instance running on the cluster how to pick these metrics up.&lt;/p&gt;
&lt;p&gt;The prometheus operator defines the &lt;a class="reference external" href="https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#podmonitor"&gt;PodMonitor&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitor"&gt;ServiceMonitor&lt;/a&gt; custom resources that, as their names suggest,
will define how to monitor a given pod or service. Since as I said earlier, we didn't deem necessary to create services
for each monitoring-related port, we &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29391/37/controllers/libs/monitoring/monitoring.go#176"&gt;opted to manage PodMonitors in the SF-Operator&lt;/a&gt;. All you need is to specify the
&amp;quot;monitoring&amp;quot; ports' names to scrape on the Pod, and set a label selector (in our case, every PodMonitor related to
a SF deployment will have a label called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sf-monitoring&lt;/span&gt;&lt;/tt&gt; set to the name of the monitored application).&lt;/p&gt;
&lt;p&gt;If a cluster-wide Prometheus instance exists, for example if you're using an OpenShift cluster with this feature enabled,
you can then access metrics from your SF deployment as soon as it is deployed. Otherwise you can use the &lt;cite&gt;sfconfig prometheus&lt;/cite&gt;
CLI command to deploy a tenant-scoped Prometheus instance with the proper label selector configured to scrape only
SF-issued metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="injecting-monitoring-knowledge-into-the-operator"&gt;
&lt;h2&gt;Injecting monitoring knowledge into the operator&lt;/h2&gt;
&lt;p&gt;So far, we've seen how deploying our application with an operator allowed us to also pre-configure the monitoring stack.
We're emitting metrics and collecting them, but what should we do with this window on our system?&lt;/p&gt;
&lt;p&gt;We should, obviously, define alerts so that we can know when the application is not running optimally, or worse. And as
you probably guessed already, there's a prometheus-operator defined Custom Resource for that: the &lt;a class="reference external" href="https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheusrule"&gt;PrometheusRule&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The resource is very straightforward to use, &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29370/20/controllers/logserver_controller.go#121"&gt;as can be seen in the log server controller&lt;/a&gt; for example. Once again,
we scope our PrometheusRules to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sf-monitoring&lt;/span&gt;&lt;/tt&gt; label and they will be picked up automatically by the right Prometheus
instance.&lt;/p&gt;
&lt;p&gt;What's great is that with these rules, developers of an operator can inject their knowledge and expertise about an application's
expected behavior. My team and I have been running Zuul and Nodepool at scale for several large deployments for years,
so we know a thing or two about what's interesting to monitor and what should warrant immediate remediation action.
Now we can easily add this knowledge in a way that future deployers can benefit from almost immediately.&lt;/p&gt;
&lt;img alt="" src="images/itsbeautiful.jpeg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;At the time of this writing, the base foundations of the monitoring stack in SF-Operator have just landed in the code
base. Now that this is over with, I'd like to experiment further with the following:&lt;/p&gt;
&lt;div class="section" id="operator-metrics"&gt;
&lt;h3&gt;Operator metrics&lt;/h3&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://book.kubebuilder.io/reference/metrics"&gt;kubebuilder documentation about metrics&lt;/a&gt; explains how to publish default performance metrics
for each controller in an operator. It is also possible to add and emit custom metrics.&lt;/p&gt;
&lt;p&gt;On a purely operational level, these metrics are less interesting to us than operands metrics. However, it would
probably be good to keep an eye on ticks on &lt;a class="reference external" href="https://github.com/kubernetes-sigs/controller-runtime/blob/v0.11.0/pkg/internal/controller/metrics/metrics.go#L37"&gt;controller_runtime_reconcile_errors_total&lt;/a&gt; and
on the evolution of &lt;a class="reference external" href="https://github.com/kubernetes-sigs/controller-runtime/blob/v0.11.0/pkg/internal/controller/metrics/metrics.go#L44"&gt;controller_runtime_reconcile_time_seconds&lt;/a&gt; for performance fluctuations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="keda"&gt;
&lt;h3&gt;KEDA&lt;/h3&gt;
&lt;p&gt;This is where the fun begins! The &lt;a class="reference external" href="https://keda.sh"&gt;KEDA operator&lt;/a&gt; greatly expands the capabilities of Kubernetes' Horizontal Pod Autoscaler.
While HPA relies on basic metrics like Pod CPU or memory use (or requires some additional effort to work with custom metrics),
KEDA allows you to trigger your autoscaling with a lot more event types.&lt;/p&gt;
&lt;p&gt;And among them... &lt;a class="reference external" href="https://keda.sh/docs/2.12/scalers/prometheus/"&gt;Prometheus queries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We could provide predefined KEDA triggers based on relevant queries like &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29682/1/controllers/zuul.go#420"&gt;NotEnoughExecutors&lt;/a&gt; to start spawning
new executors when this alert fires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="log-server-autoresize"&gt;
&lt;h3&gt;Log server autoresize&lt;/h3&gt;
&lt;p&gt;So far we have only considered metrics-driven scaling of &lt;strong&gt;pods&lt;/strong&gt; horizontally. This works especially well for stateless applications, or
stateful applications that have a strategy to configure the first deployed pod as a primary node or master, and every extra pod as a replica or slave.
But the log server application isn't stateless (logs are stored) and a primary/replicas architecture would be hard, if not impossible, to implement correctly with HTTPD &lt;strong&gt;and&lt;/strong&gt;
SSH. And as stated before, Apache and SSH are virtually never bottlenecks for the Log server; but &lt;em&gt;storage&lt;/em&gt; is. Kubernetes, and OpenShift as well for that
matter, do not seem to address this need for storage autoscaling.&lt;/p&gt;
&lt;p&gt;But since we deploy the Log server via an operator, it might be possible to circumvent this limitation like so:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;in the Log server controller's reconcile loop, use the RESTClient library or some other way to query the &lt;tt class="docutils literal"&gt;/metrics&lt;/tt&gt; endpoint on the node exporter sidecar, or simply run &lt;tt class="docutils literal"&gt;du&lt;/tt&gt; or similar&lt;/li&gt;
&lt;li&gt;compute how much free space is available&lt;/li&gt;
&lt;li&gt;if the value is under 10% for a given period, increase the log server's persistent volume's size by a predefined increment&lt;/li&gt;
&lt;li&gt;reconcile again later to check free space and repeat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these experimentations are successful, the day to day operation of our Zuul deployments is going to be &lt;strong&gt;so&lt;/strong&gt; much easier!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I must say that working with the operator framework and monitoring, while a bit scary initially, is starting to make so much sense in the long run, and is even
beginning to feel exciting, considering all the open possibilities to make the operations side of my work much easier.&lt;/p&gt;
&lt;p&gt;I feel like orchestration with Kubernetes and OpenShift is to managing applications what packaging RPMs has been to installing said applications: a lot of effort for
packagers and operator developers, but deployers' lives are made so much easier for it. Kubernetes and OpenShift take it to the next level by adding the opportunity
to inject lifecycle and management &amp;quot;intelligence&amp;quot;, leading potentially to applications being able to &amp;quot;auto-pilot&amp;quot;, freeing your time to focus on the really cool stuff.&lt;/p&gt;
&lt;p&gt;I am really looking forward to experimenting and discovering more of what operators can offer.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>SF Operator - how hardware is important in Kubernetes</title><link href="https://www.softwarefactory-project.io/sf-operator-how-hardware-is-important-in-kubernetes.html" rel="alternate"></link><published>2023-10-16T00:00:00+00:00</published><updated>2023-10-16T00:00:00+00:00</updated><author><name>dpawlik</name></author><id>tag:www.softwarefactory-project.io,2023-10-16:/sf-operator-how-hardware-is-important-in-kubernetes.html</id><summary type="html">&lt;div class="section" id="problem-description-1"&gt;
&lt;span id="problem-description"&gt;&lt;/span&gt;&lt;h2&gt;Problem description&lt;/h2&gt;
&lt;p&gt;As you know, the future release of the Software Factory project will be based on the
Kubernetes deployment. On adding new services, there are more and more pods
spawned on the Kubernetes cluster, which might raise some complications, when
the test environment is limited.
After a while, we …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="problem-description-1"&gt;
&lt;span id="problem-description"&gt;&lt;/span&gt;&lt;h2&gt;Problem description&lt;/h2&gt;
&lt;p&gt;As you know, the future release of the Software Factory project will be based on the
Kubernetes deployment. On adding new services, there are more and more pods
spawned on the Kubernetes cluster, which might raise some complications, when
the test environment is limited.
After a while, we spotted an issue, the CI jobs were failing for an unknown
reason - sometimes a test was checking if the API is up and received a HTTP 503 error,
sometimes pods were marked as &lt;cite&gt;Running&lt;/cite&gt;, but were actually not ready. All of those
errors were related to &lt;cite&gt;ReadinessProbe&lt;/cite&gt;, &lt;cite&gt;StartupProbe&lt;/cite&gt; or &lt;cite&gt;LivenessProbe&lt;/cite&gt;,
but from time to time we had the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;panic: Could not create &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;Secret&lt;span class="o"&gt;{&lt;/span&gt;ObjectMeta:&lt;span class="o"&gt;{&lt;/span&gt;nodepool-providers-secrets
sf    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0001&lt;/span&gt;-01-01 &lt;span class="m"&gt;00&lt;/span&gt;:00:00 +0000 UTC &amp;lt;nil&amp;gt; &amp;lt;nil&amp;gt; map&lt;span class="o"&gt;[]&lt;/span&gt; map&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;[]}&lt;/span&gt;,
Data:map&lt;span class="o"&gt;[&lt;/span&gt;string&lt;span class="o"&gt;][]&lt;/span&gt;byte&lt;span class="o"&gt;{&lt;/span&gt;kube.config: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt; &lt;span class="m"&gt;112&lt;/span&gt; &lt;span class="m"&gt;105&lt;/span&gt; &lt;span class="m"&gt;86&lt;/span&gt; &lt;span class="m"&gt;101&lt;/span&gt; &lt;span class="m"&gt;114&lt;/span&gt; &lt;span class="m"&gt;115&lt;/span&gt; &lt;span class="m"&gt;105&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="o"&gt;}&lt;/span&gt;,
Type:,StringData:map&lt;span class="o"&gt;[&lt;/span&gt;string&lt;span class="o"&gt;]&lt;/span&gt;string&lt;span class="o"&gt;{}&lt;/span&gt;,Immutable:nil,&lt;span class="o"&gt;}&lt;/span&gt;: etcdserver: request timed out
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Initially the isssue occured rarely, but after a while, it happens more and more
often.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-etcd"&gt;
&lt;h2&gt;What is etcd?&lt;/h2&gt;
&lt;p&gt;The &lt;cite&gt;etcd&lt;/cite&gt; service is the &amp;quot;heart&amp;quot; of Kubernetes. It is: &amp;quot;A distributed,
reliable key-value store for the most critical data of a distributed system&amp;quot; &lt;a class="reference external" href="https://etcd.io/"&gt;source&lt;/a&gt;.
That service keeps track of the state of the whole Kubernetes cluster, its configuration,
service statuses, and others. That service needs to be working without any
issue or other components will be impacted and might not run properly.&lt;/p&gt;
&lt;p&gt;As it was described in the error message above in the &amp;quot;&lt;a class="reference internal" href="#problem-description"&gt;Problem_description&lt;/a&gt;&amp;quot; paragraph,
the error: &lt;cite&gt;etcdserver: request timed out&lt;/cite&gt; might suggest that we had an issue
with the &amp;quot;core&amp;quot; service of Kubernetes, so we performed a few tests to see why the
&lt;cite&gt;etcd&lt;/cite&gt; is not working properly in our CI jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-environment"&gt;
&lt;h2&gt;Testing environment&lt;/h2&gt;
&lt;p&gt;Most of our CI jobs related to the sf-operator project are spawning on a VM
flavor with the following specs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;8 GB RAM&lt;/li&gt;
&lt;li&gt;40 GB HDD disk&lt;/li&gt;
&lt;li&gt;8 vCPUs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which is a very small part of the physical resources of the hypervisor.
After pushing new changes to the Zuul CI, it can happen that all new jobs will
be running on the same L0 host (that's how the cloud is working: instance
is spawned on the hypervisor with &amp;quot;best score&amp;quot;, so normally it should have
very good performance. It can happen, that all compute hosts are overloaded,
so the OpenStack Nova Scheduler will choose a host that has best score from
all overloaded hosts, so it may affect the etcd perofmance), especially that
some parts of the CI jobs are repeating:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;deploy Microshift,&lt;/li&gt;
&lt;li&gt;build an image,&lt;/li&gt;
&lt;li&gt;deploy services: it is pulling new images, storing them on the disk, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It might happen that, at the same time, there can be many jobs doing the same operation, so
that can take all disk resources, such as IO or R/W operations.&lt;/p&gt;
&lt;div class="section" id="microshift"&gt;
&lt;h3&gt;MicroShift&lt;/h3&gt;
&lt;p&gt;We are using the MicroShift tool for deploying the sf-operator. &amp;quot;MicroShift
is an experimental flavor of OpenShift/Kubernetes optimized for the device edge.
It targets the niche between minimal, standalone Linux edge devices and
full-fledged OpenShift/Kubernetes edge clusters&amp;quot;. &lt;a class="reference external" href="https://next.redhat.com/project/microshift/"&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To deploy MicroShift, we developed an Ansible role, which you can find
&lt;a class="reference external" href="https://github.com/openstack-k8s-operators/ansible-microshift-role"&gt;here&lt;/a&gt; on Github.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="is-it-hardware"&gt;
&lt;h2&gt;Is it hardware?&lt;/h2&gt;
&lt;p&gt;Let's have a theory: what if the disk is having troubles in our CI?
First, what we check is how the monitoring metrics look for a specific cloud
provider host (L0), on which the job was performed, and it raises an error.&lt;/p&gt;
&lt;img alt="diskUsage" src="images/etcd/grafana.jpg" /&gt;
&lt;p&gt;The Grafana visualization shows that the disk IO is near 1K, which is very
low for modern servers. A similar situation exists for the R/W operation: both are
also low, but what if other operations done on the disk might affect etcd work?
According to our cloud provider, our hypervisor's storage consists
of 4 Intel 960 SSD disks mounted in software RAID10.&lt;/p&gt;
&lt;p&gt;This caused us to have mixed feelings about whether the issue is really in the disk.
So we decided to make some benchmarks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benchmarking-servers"&gt;
&lt;h2&gt;Benchmarking servers&lt;/h2&gt;
&lt;p&gt;There are many tools that can check your disk's performance. Our focus was on
two basic tests:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fio&lt;/li&gt;
&lt;li&gt;phoronix tests suite&lt;/li&gt;
&lt;li&gt;etcd benchmark tool&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="fio-tool"&gt;
&lt;h3&gt;Fio tool&lt;/h3&gt;
&lt;p&gt;How we test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -LO https://github.com/rancherlabs/support-tools/raw/master/instant-fio-master/instant-fio-master.sh
bash instant-fio-master.sh

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
mkdir test-data
fio --rw&lt;span class="o"&gt;=&lt;/span&gt;write --ioengine&lt;span class="o"&gt;=&lt;/span&gt;sync --fdatasync&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; --directory&lt;span class="o"&gt;=&lt;/span&gt;test-data --size&lt;span class="o"&gt;=&lt;/span&gt;100m --bs&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2300&lt;/span&gt; --name&lt;span class="o"&gt;=&lt;/span&gt;mytest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fio --rw&lt;span class="o"&gt;=&lt;/span&gt;write --ioengine&lt;span class="o"&gt;=&lt;/span&gt;sync --fdatasync&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; --directory&lt;span class="o"&gt;=&lt;/span&gt;test-data --size&lt;span class="o"&gt;=&lt;/span&gt;100m --bs&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2300&lt;/span&gt; --name&lt;span class="o"&gt;=&lt;/span&gt;mytest
mytest: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;g&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;write, &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;R&lt;span class="o"&gt;)&lt;/span&gt; 2300B-2300B, &lt;span class="o"&gt;(&lt;/span&gt;W&lt;span class="o"&gt;)&lt;/span&gt; 2300B-2300B, &lt;span class="o"&gt;(&lt;/span&gt;T&lt;span class="o"&gt;)&lt;/span&gt; 2300B-2300B, &lt;span class="nv"&gt;ioengine&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sync, &lt;span class="nv"&gt;iodepth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
fio-3.35-115-g6795
Starting &lt;span class="m"&gt;1&lt;/span&gt; process
Jobs: &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;W&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)][&lt;/span&gt;&lt;span class="m"&gt;98&lt;/span&gt;.7%&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="nv"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1967KiB/s&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="nv"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;876&lt;/span&gt; IOPS&lt;span class="o"&gt;][&lt;/span&gt;eta 00m:01s&lt;span class="o"&gt;]&lt;/span&gt;
mytest: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;groupid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;: &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;160845&lt;/span&gt;: Wed Aug &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;05&lt;/span&gt;:56:49 &lt;span class="m"&gt;2023&lt;/span&gt;
  write: &lt;span class="nv"&gt;IOPS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;618&lt;/span&gt;, &lt;span class="nv"&gt;BW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1388KiB/s &lt;span class="o"&gt;(&lt;/span&gt;1421kB/s&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.0MiB/73768msec&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; zone resets
    clat &lt;span class="o"&gt;(&lt;/span&gt;usec&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20824&lt;/span&gt;, &lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;49&lt;/span&gt;.73, &lt;span class="nv"&gt;stdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;335&lt;/span&gt;.80
     lat &lt;span class="o"&gt;(&lt;/span&gt;usec&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20824&lt;/span&gt;, &lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;.21, &lt;span class="nv"&gt;stdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;335&lt;/span&gt;.81
    clat percentiles &lt;span class="o"&gt;(&lt;/span&gt;usec&lt;span class="o"&gt;)&lt;/span&gt;:
     &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;    &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,  &lt;span class="m"&gt;5&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;    &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;10&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;    &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;20&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;40&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;50&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;60&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;80&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;90&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;95&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;310&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;490&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.50th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;873&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.90th&lt;span class="o"&gt;=[&lt;/span&gt; &lt;span class="m"&gt;2802&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.95th&lt;span class="o"&gt;=[&lt;/span&gt; &lt;span class="m"&gt;4293&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;.99th&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;20055&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   bw &lt;span class="o"&gt;(&lt;/span&gt;  KiB/s&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;   &lt;span class="m"&gt;44&lt;/span&gt;, &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2717&lt;/span&gt;, &lt;span class="nv"&gt;per&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;.92%, &lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1387&lt;/span&gt;.57, &lt;span class="nv"&gt;stdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;770&lt;/span&gt;.12, &lt;span class="nv"&gt;samples&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;147&lt;/span&gt;
   iops        : &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;   &lt;span class="m"&gt;20&lt;/span&gt;, &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1210&lt;/span&gt;, &lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;617&lt;/span&gt;.98, &lt;span class="nv"&gt;stdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;342&lt;/span&gt;.89, &lt;span class="nv"&gt;samples&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;147&lt;/span&gt;
  lat &lt;span class="o"&gt;(&lt;/span&gt;usec&lt;span class="o"&gt;)&lt;/span&gt;   : &lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.13%, &lt;span class="nv"&gt;10&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;.66%, &lt;span class="nv"&gt;20&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt;.34%, &lt;span class="nv"&gt;50&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;.23%, &lt;span class="nv"&gt;100&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.76%
  lat &lt;span class="o"&gt;(&lt;/span&gt;usec&lt;span class="o"&gt;)&lt;/span&gt;   : &lt;span class="nv"&gt;250&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.40%, &lt;span class="nv"&gt;500&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.53%, &lt;span class="nv"&gt;750&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.38%, &lt;span class="nv"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12%
  lat &lt;span class="o"&gt;(&lt;/span&gt;msec&lt;span class="o"&gt;)&lt;/span&gt;   : &lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.25%, &lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.13%, &lt;span class="nv"&gt;10&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.03%, &lt;span class="nv"&gt;20&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01%, &lt;span class="nv"&gt;50&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01%
  fsync/fdatasync/sync_file_range:
    sync &lt;span class="o"&gt;(&lt;/span&gt;usec&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;275&lt;/span&gt;, &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;181677&lt;/span&gt;, &lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1564&lt;/span&gt;.33, &lt;span class="nv"&gt;stdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4190&lt;/span&gt;.31
    sync percentiles &lt;span class="o"&gt;(&lt;/span&gt;usec&lt;span class="o"&gt;)&lt;/span&gt;:
     &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;367&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,  &lt;span class="m"&gt;5&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;412&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;10&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;441&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;20&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;486&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;537&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;40&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;676&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;50&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;938&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;60&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;1074&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;1254&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;80&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;1549&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;90&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;2343&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;95&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;3458&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt; &lt;span class="m"&gt;19792&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.50th&lt;span class="o"&gt;=[&lt;/span&gt; &lt;span class="m"&gt;27132&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.90th&lt;span class="o"&gt;=[&lt;/span&gt; &lt;span class="m"&gt;55837&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.95th&lt;span class="o"&gt;=[&lt;/span&gt; &lt;span class="m"&gt;76022&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,  &lt;span class="c1"&gt;### &amp;lt;&amp;lt;&amp;lt;=== here is 99.00th&lt;/span&gt;
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;.99th&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;128451&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  cpu          : &lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.49%, &lt;span class="nv"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.04%, &lt;span class="nv"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;165143&lt;/span&gt;, &lt;span class="nv"&gt;majf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;minf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;
  IO depths    : &lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;.0%, &lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;8&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;16&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;32&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%
     submit    : &lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.0%, &lt;span class="nv"&gt;8&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;16&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;32&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%
     &lt;span class="nb"&gt;complete&lt;/span&gt;  : &lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.0%, &lt;span class="nv"&gt;8&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;16&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;32&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%
     issued rwts: &lt;span class="nv"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,45590,0,0 &lt;span class="nv"&gt;short&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;45590&lt;/span&gt;,0,0,0 &lt;span class="nv"&gt;dropped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0
     latency   : &lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;window&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;percentile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.00%, &lt;span class="nv"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1Run status group &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;all &lt;span class="nb"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
  WRITE: &lt;span class="nv"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1388KiB/s &lt;span class="o"&gt;(&lt;/span&gt;1421kB/s&lt;span class="o"&gt;)&lt;/span&gt;, 1388KiB/s-1388KiB/s &lt;span class="o"&gt;(&lt;/span&gt;1421kB/s-1421kB/s&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="nv"&gt;io&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.0MiB &lt;span class="o"&gt;(&lt;/span&gt;105MB&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;73768&lt;/span&gt;-73768msec
Disk stats &lt;span class="o"&gt;(&lt;/span&gt;read/write&lt;span class="o"&gt;)&lt;/span&gt;:
  vda: &lt;span class="nv"&gt;ios&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4601&lt;/span&gt;/115020, &lt;span class="nv"&gt;sectors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;73144&lt;/span&gt;/639377, &lt;span class="nv"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/796, &lt;span class="nv"&gt;ticks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5288&lt;/span&gt;/85834, &lt;span class="nv"&gt;in_queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;122603&lt;/span&gt;, &lt;span class="nv"&gt;util&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt;.44%
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To explain those results in a few words: &lt;cite&gt;In 99, it has 19792, so it means 19.79 ms&lt;/cite&gt;,
and it is recommended to have below 10 ms &lt;a class="reference external" href="https://etcd.io/docs/v3.5/op-guide/hardware/#disks"&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The result was very similar for different hypervisors, but still, we cannot assume,
that it is a disk issue, but these results support this theory.&lt;/p&gt;
&lt;p&gt;Just to compare results for fio, where storage is on &lt;em&gt;RAM disk&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fio --rw&lt;span class="o"&gt;=&lt;/span&gt;write --ioengine&lt;span class="o"&gt;=&lt;/span&gt;sync --fdatasync&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; --directory&lt;span class="o"&gt;=&lt;/span&gt;/home/zuul-worker/etcd/data/fio --size&lt;span class="o"&gt;=&lt;/span&gt;100m --bs&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2300&lt;/span&gt; --name&lt;span class="o"&gt;=&lt;/span&gt;mytest
mytest: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;g&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;write, &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;R&lt;span class="o"&gt;)&lt;/span&gt; 2300B-2300B, &lt;span class="o"&gt;(&lt;/span&gt;W&lt;span class="o"&gt;)&lt;/span&gt; 2300B-2300B, &lt;span class="o"&gt;(&lt;/span&gt;T&lt;span class="o"&gt;)&lt;/span&gt; 2300B-2300B, &lt;span class="nv"&gt;ioengine&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sync, &lt;span class="nv"&gt;iodepth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
fio-3.35-138-g50b94
Starting &lt;span class="m"&gt;1&lt;/span&gt; process
mytest: Laying out IO file &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; file / 100MiB&lt;span class="o"&gt;)&lt;/span&gt;

mytest: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;groupid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;: &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10092&lt;/span&gt;: Mon Oct &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;:06:06 &lt;span class="m"&gt;2023&lt;/span&gt;
  write: &lt;span class="nv"&gt;IOPS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;451k, &lt;span class="nv"&gt;BW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;990MiB/s &lt;span class="o"&gt;(&lt;/span&gt;1038MB/s&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.0MiB/101msec&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; zone resets
    clat &lt;span class="o"&gt;(&lt;/span&gt;nsec&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;621&lt;/span&gt;, &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;568765&lt;/span&gt;, &lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1370&lt;/span&gt;.13, &lt;span class="nv"&gt;stdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6496&lt;/span&gt;.39
     lat &lt;span class="o"&gt;(&lt;/span&gt;nsec&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;670&lt;/span&gt;, &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;568835&lt;/span&gt;, &lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1430&lt;/span&gt;.42, &lt;span class="nv"&gt;stdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6498&lt;/span&gt;.82
    clat percentiles &lt;span class="o"&gt;(&lt;/span&gt;nsec&lt;span class="o"&gt;)&lt;/span&gt;:
     &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;668&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,  &lt;span class="m"&gt;5&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;668&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;10&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;684&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;20&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;692&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;   &lt;span class="m"&gt;924&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;40&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;1128&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;50&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;1176&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;60&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;1208&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;1288&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;80&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;1544&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;90&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;2024&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;95&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;2320&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;3312&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.50th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;4192&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.90th&lt;span class="o"&gt;=[&lt;/span&gt; &lt;span class="m"&gt;14528&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.95th&lt;span class="o"&gt;=[&lt;/span&gt; &lt;span class="m"&gt;35072&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;.99th&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;452608&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  lat &lt;span class="o"&gt;(&lt;/span&gt;nsec&lt;span class="o"&gt;)&lt;/span&gt;   : &lt;span class="nv"&gt;750&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;.18%, &lt;span class="nv"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.13%
  lat &lt;span class="o"&gt;(&lt;/span&gt;usec&lt;span class="o"&gt;)&lt;/span&gt;   : &lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;54&lt;/span&gt;.33%, &lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.81%, &lt;span class="nv"&gt;10&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.34%, &lt;span class="nv"&gt;20&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.14%, &lt;span class="nv"&gt;50&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.05%
  lat &lt;span class="o"&gt;(&lt;/span&gt;usec&lt;span class="o"&gt;)&lt;/span&gt;   : &lt;span class="nv"&gt;100&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01%, &lt;span class="nv"&gt;250&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01%, &lt;span class="nv"&gt;500&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.02%, &lt;span class="nv"&gt;750&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01%
  fsync/fdatasync/sync_file_range:
    sync &lt;span class="o"&gt;(&lt;/span&gt;nsec&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;, &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;109123&lt;/span&gt;, &lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;259&lt;/span&gt;.84, &lt;span class="nv"&gt;stdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;608&lt;/span&gt;.43
    sync percentiles &lt;span class="o"&gt;(&lt;/span&gt;nsec&lt;span class="o"&gt;)&lt;/span&gt;:
     &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;211&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,  &lt;span class="m"&gt;5&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;221&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;10&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;221&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;20&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;221&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;221&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;40&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;221&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;50&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;231&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;60&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;231&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;241&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;80&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;302&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;90&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;330&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;95&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;350&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;.00th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;382&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.50th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;410&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.90th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;660&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.95th&lt;span class="o"&gt;=[&lt;/span&gt;  &lt;span class="m"&gt;932&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;.99th&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;12608&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  cpu          : &lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;.00%, &lt;span class="nv"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt;.00%, &lt;span class="nv"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;majf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;minf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;
  IO depths    : &lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;.0%, &lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;8&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;16&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;32&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%
     submit    : &lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.0%, &lt;span class="nv"&gt;8&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;16&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;32&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%
     &lt;span class="nb"&gt;complete&lt;/span&gt;  : &lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.0%, &lt;span class="nv"&gt;8&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;16&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;32&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%, &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0%
     issued rwts: &lt;span class="nv"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,45590,0,0 &lt;span class="nv"&gt;short&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;45590&lt;/span&gt;,0,0,0 &lt;span class="nv"&gt;dropped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0
     latency   : &lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;window&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;percentile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.00%, &lt;span class="nv"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

Run status group &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;all &lt;span class="nb"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
  WRITE: &lt;span class="nv"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;990MiB/s &lt;span class="o"&gt;(&lt;/span&gt;1038MB/s&lt;span class="o"&gt;)&lt;/span&gt;, 990MiB/s-990MiB/s &lt;span class="o"&gt;(&lt;/span&gt;1038MB/s-1038MB/s&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="nv"&gt;io&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.0MiB &lt;span class="o"&gt;(&lt;/span&gt;105MB&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;101&lt;/span&gt;-101msec
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To explain that results in few words: &lt;cite&gt;In 99, it has 382 so it means 0.382ms&lt;/cite&gt;.
Result of that test was obvious, but in later part of that blog, I will be
doing a test of etcd benchmark, where the data directory will be mounted
on the RAM disk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="phoronix-test-suite"&gt;
&lt;h3&gt;Phoronix test suite&lt;/h3&gt;
&lt;p&gt;How we test on Centos 9 stream:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dnf install -y php-cli php-xml php-json git

git clone https://github.com/phoronix-test-suite/phoronix-test-suite &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; phoronix-test-suite/
sudo ./install-sh

sudo phoronix-test-suite run pts/etcd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will not go into details here, but the results showed operational values
that were much below expected values and didn't match minimal requirements
for the etcd service.
Whole results you can find &lt;a class="reference external" href="https://openbenchmarking.org/result/2308286-NE-ALL32952239"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="etcd-benchmark-tool"&gt;
&lt;h3&gt;Etcd benchmark tool&lt;/h3&gt;
&lt;p&gt;The same benchmark is done in the Phoronix test suite, but the below playbook will just
run single tests, and it might be helpful for those who don't want to use
many scenarios, as the Phoronix test suite does.&lt;/p&gt;
&lt;p&gt;To visualize the difference between etcd on RAM disk and on the SSD disk,
I will run the etcd &lt;a class="reference external" href="https://etcd.io/docs/v3.5/op-guide/performance/"&gt;benchmark&lt;/a&gt; tool,
by using the simple Ansible playbook:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;benchmark.yaml file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Benchmark etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;somehost.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# once it would be true, once false. Depends what test is done&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;etcd_ramdisk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ramdisk_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;4096m&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ramdisk_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_user&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(ansible_user_id)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/etcd/data&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;etcd_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.4.27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install required packages&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;golang&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;### RAMDISK&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Configure RAMDISK for etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;when&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;etcd_ramdisk&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create directory for etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ramdisk_path&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0700&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_user&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(ansible_user_id)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_user&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(ansible_user_id)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Mount ramdisk&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;ansible.posix.mount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tmpfs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ramdisk_path&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;fstype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tmpfs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mounted&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;defaults,size={{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ramdisk_size&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set proper permissions after mount&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ramdisk_path&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0700&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_user&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(ansible_user_id)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_user&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(ansible_user_id)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set proper SELinux context&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;restorecon -F {{ ramdisk_path }}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create directory for etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Download etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.get_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/etcd-io/etcd/releases/download/v{{ etcd_version }}/etcd-v{{ etcd_version }}-linux-amd64.tar.gz&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0644&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Unarchive etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.unarchive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/etcd-v{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;etcd_version&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}-linux-amd64.tar.gz&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;remote_src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;extra_opts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;--strip-components=1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check if etcd is not already running&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.wait_for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2379&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;started&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ignore_errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;_etcd_running&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Start etcd as subprocess&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;when&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;failed&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;_etcd_running&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;_etcd_running.failed&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;~/etcd/etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--snapshot-count=5000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--auto-compaction-retention=10&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--auto-compaction-mode=revision&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--data-dir {{ ramdisk_path }}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;&amp;amp;&amp;gt; ~/etcd.log&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;async&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;7200&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Clone etcd repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/etcd-io/etcd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/etcd-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;etcd_version&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install benchmark&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;go install -v ./tools/benchmark&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/etcd-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# https://github.com/phoronix-test-suite/phoronix-test-suite/blob/master/ob-cache/test-profiles/pts/etcd-1.0.0/test-definition.xml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run benchmark&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ansible.builtin.shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;~/go/bin/benchmark&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--endpoints=127.0.0.1:2379&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--target-leader&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--conns=100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--clients=100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;put&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--key-size=8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--sequential-keys&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--total=4000000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;--val-size=256&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;&amp;amp;&amp;gt; ~/benchmark.log&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/etcd-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;inventory file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; inventory.yaml
---
all:
  hosts:
    somehost.dev
      ansible_port: &lt;span class="m"&gt;22&lt;/span&gt;
      ansible_host: myipaddress
      ansible_user: centos
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then Ansible execution looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible-playbook -i inventory.yaml benchmark.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="results-on-ramdisk"&gt;
&lt;h4&gt;Results on ramdisk&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;4000000&lt;/span&gt; / &lt;span class="m"&gt;4000000&lt;/span&gt;  &lt;span class="m"&gt;100&lt;/span&gt;.00% 2m14ss

Summary:
  Total:        &lt;span class="m"&gt;134&lt;/span&gt;.9707 secs.
  Slowest:      &lt;span class="m"&gt;0&lt;/span&gt;.0322 secs.
  Fastest:      &lt;span class="m"&gt;0&lt;/span&gt;.0002 secs.
  Average:      &lt;span class="m"&gt;0&lt;/span&gt;.0032 secs.
  Stddev:       &lt;span class="m"&gt;0&lt;/span&gt;.0015 secs.
  Requests/sec: &lt;span class="m"&gt;29636&lt;/span&gt;.0538

Response &lt;span class="nb"&gt;time&lt;/span&gt; histogram:
  &lt;span class="m"&gt;0&lt;/span&gt;.0002 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0034 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2465154&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  &lt;span class="m"&gt;0&lt;/span&gt;.0066 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1405963&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  &lt;span class="m"&gt;0&lt;/span&gt;.0098 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;109453&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt;∎
  &lt;span class="m"&gt;0&lt;/span&gt;.0130 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;16145&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0162 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2288&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0194 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;535&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0226 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;279&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0258 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;145&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0290 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0322 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;

Latency distribution:
  &lt;span class="m"&gt;10&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0018 secs.
  &lt;span class="m"&gt;25&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0023 secs.
  &lt;span class="m"&gt;50&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0030 secs.
  &lt;span class="m"&gt;75&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0039 secs.
  &lt;span class="m"&gt;90&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0049 secs.
  &lt;span class="m"&gt;95&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0058 secs.
  &lt;span class="m"&gt;99&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0087 secs.
  &lt;span class="m"&gt;99&lt;/span&gt;.9% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0126 secs.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="results-on-disk"&gt;
&lt;h4&gt;Results on disk&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;4000000&lt;/span&gt; / &lt;span class="m"&gt;4000000&lt;/span&gt;  &lt;span class="m"&gt;100&lt;/span&gt;.00% 4m14ss

Summary:
  Total:        &lt;span class="m"&gt;254&lt;/span&gt;.7063 secs.
  Slowest:      &lt;span class="m"&gt;0&lt;/span&gt;.2208 secs.
  Fastest:      &lt;span class="m"&gt;0&lt;/span&gt;.0007 secs.
  Average:      &lt;span class="m"&gt;0&lt;/span&gt;.0063 secs.
  Stddev:       &lt;span class="m"&gt;0&lt;/span&gt;.0053 secs.
  Requests/sec: &lt;span class="m"&gt;15704&lt;/span&gt;.3628

Response &lt;span class="nb"&gt;time&lt;/span&gt; histogram:
  &lt;span class="m"&gt;0&lt;/span&gt;.0007 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0227 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3964476&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  &lt;span class="m"&gt;0&lt;/span&gt;.0447 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23334&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0667 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;6676&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.0887 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2932&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.1108 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;782&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.1328 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;639&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.1548 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;259&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.1768 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;672&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.1988 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;178&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="m"&gt;0&lt;/span&gt;.2208 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;51&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;

Latency distribution:
  &lt;span class="m"&gt;10&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0038 secs.
  &lt;span class="m"&gt;25&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0045 secs.
  &lt;span class="m"&gt;50&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0055 secs.
  &lt;span class="m"&gt;75&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0068 secs.
  &lt;span class="m"&gt;90&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0090 secs.
  &lt;span class="m"&gt;95&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0109 secs.
  &lt;span class="m"&gt;99&lt;/span&gt;% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0211 secs.
  &lt;span class="m"&gt;99&lt;/span&gt;.9% &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0753 secs.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-handle-such-issues"&gt;
&lt;h2&gt;How to handle such issues&lt;/h2&gt;
&lt;p&gt;To handle that problem, we decided to do two things at the same time, especially
for the CI tests, which are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;check if moving etcd to the ramdisk will help&lt;/li&gt;
&lt;li&gt;improve sf-operator, to retry updating the object when it causes an error&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="moving-etcd-to-the-ramdisk"&gt;
&lt;h3&gt;Moving etcd to the ramdisk&lt;/h3&gt;
&lt;p&gt;As it was mentioned, we are using a MicroShift for deploying Kubernetes.
environment. With that &lt;a class="reference external" href="https://github.com/openstack-k8s-operators/ansible-microshift-role/pull/41"&gt;commit&lt;/a&gt;,
we added a feature to put the etcd on the ramdisk.
We did not perform any tests to see if the result would be better, but we did not
saw any error related to the etcd anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hypervisor-stats"&gt;
&lt;h3&gt;Hypervisor stats&lt;/h3&gt;
&lt;p&gt;We have done an experiment to see how the hypervisor (L0 host) stats look
like with etcd on the disk and on ramdisk.&lt;/p&gt;
&lt;p&gt;NOTE:
It was very difficult to provide good, equal visualization for both
environments (ramdisk and disk), because as an OpenStack user, we were
not able to block or disable host for future spawning of new instances there.
It means that during the tests, it might be a situation where there were few
other instances on the same host, which might use a disk.&lt;/p&gt;
&lt;div class="section" id="on-ramdisk-job-has-started-6-46-utc-8-46-cest"&gt;
&lt;h4&gt;on ramdisk - job has started 6:46 UTC / 8:46 CEST&lt;/h4&gt;
&lt;p&gt;There are only 2 instances spawned on same host&lt;/p&gt;
&lt;img alt="instancesCount" src="images/etcd/ramdisk/1.jpg" /&gt;
&lt;div class="section" id="cpu-usage-ramdisk"&gt;
&lt;h5&gt;CPU usage - ramdisk&lt;/h5&gt;
&lt;img alt="cpuUsage" src="images/etcd/ramdisk/2.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="disk-usage-ramdisk"&gt;
&lt;h5&gt;Disk usage - ramdisk&lt;/h5&gt;
&lt;img alt="diskUsage" src="images/etcd/ramdisk/3.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-visualizations-for-cpu-ramdisk"&gt;
&lt;h5&gt;Alternative visualizations for CPU - ramdisk&lt;/h5&gt;
&lt;img alt="cpuUsageAlt" src="images/etcd/ramdisk/4.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-visualization-for-disk-ramdisk"&gt;
&lt;h5&gt;Alternative visualization for disk - ramdisk&lt;/h5&gt;
&lt;img alt="diskUsageAlt" src="images/etcd/ramdisk/5.jpg" /&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;img alt="diskUsageAlt2" src="images/etcd/ramdisk/6.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="on-disk-job-has-started-6-18-utc-8-18-cest"&gt;
&lt;h4&gt;2. on disk - job has started 6:18 UTC / 8:18 CEST&lt;/h4&gt;
&lt;p&gt;There are 3 instances spawned on same host. There were also one more
VM, but it should not affect in tests results.&lt;/p&gt;
&lt;div class="section" id="cpu-usage-disk"&gt;
&lt;h5&gt;CPU usage - disk&lt;/h5&gt;
&lt;img alt="cpuUsage" src="images/etcd/disk/1.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="disk-usage-disk"&gt;
&lt;h5&gt;Disk usage - disk&lt;/h5&gt;
&lt;img alt="diskUsage" src="images/etcd/disk/2.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-visualizations-for-cpu-disk"&gt;
&lt;h5&gt;Alternative visualizations for CPU - disk&lt;/h5&gt;
&lt;img alt="cpuUsageAlt" src="images/etcd/disk/3.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-visualization-for-disk-disk"&gt;
&lt;h5&gt;Alternative visualization for disk - disk&lt;/h5&gt;
&lt;img alt="diskUsageAlt" src="images/etcd/disk/4.jpg" /&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;img alt="diskUsageAlt2" src="images/etcd/disk/5.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="improvements-in-sf-operator"&gt;
&lt;h3&gt;Improvements in sf-operator&lt;/h3&gt;
&lt;p&gt;The main issue while running the reconcile loop was that the object should be
updated, but it was not because of the high etcd (storage) utilization.&lt;/p&gt;
&lt;p&gt;More about that issue will be explained in the next blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Sep 08 to Sep 27 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-sep-08-to-sep-27-summary.html" rel="alternate"></link><published>2023-09-27T10:00:00+00:00</published><updated>2023-09-27T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-09-27:/sprint-2023-sep-08-to-sep-27-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We check issue what community has with zuul-operator change, that the CI job is running on the minikube. We spotted few issue and propose few patches with a fix, but still it does not pass CI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We check issue what community has with zuul-operator change, that the CI job is running on the minikube. We spotted few issue and propose few patches with a fix, but still it does not pass CI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added debootstrap to the nodepool-builder container.&lt;/li&gt;
&lt;li&gt;We Added zuul-client command to sfconfig tool&lt;/li&gt;
&lt;li&gt;We added Status Conditions to all sf-operator services&lt;/li&gt;
&lt;li&gt;We Added Zuul Bootstrap Zuul Tenant Config subcommand to sfconfig cli for ease of use to create zuul pipelines, jobs and playbooks&lt;/li&gt;
&lt;li&gt;We have started to Add GitHub and GitLab connection support to Zuul Connections in sf-operator&lt;/li&gt;
&lt;li&gt;Most of the monitoring stack was merged into sf-operator, adding statsd exporters to zuul and nodepool require a non-trivial rebase + documentation&lt;/li&gt;
&lt;li&gt;We investigated options for log aggregation and collection best practices with the MicroShift and Logging Operator teams&lt;/li&gt;
&lt;li&gt;We gave the documentation a big fat makeover: the doc is now split by roles (operator installer, deployer, user, developer) and also has short &amp;quot;getting started&amp;quot; tutorials for each section. A lot of deprecated/obsolete info was reworked. A CLI reference was also added.&lt;/li&gt;
&lt;li&gt;We made a QoL change to how namespace events get collected in our CI: they're now in chronological order and with absolute timestamps o/&lt;/li&gt;
&lt;li&gt;We wrote and grommed several stories for the next milestone of sf-operator&lt;/li&gt;
&lt;li&gt;We fixed (for zuul 9.1.0) The 'require-approval' trigger attribute is deprecated.  Use 'require' instead. &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29405"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29405&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We wrote ADR 10 about zuul-operator choice &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29397"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29397&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We enabled one job on zuul.microshift.sf.io triggered from sf-operator change&lt;/li&gt;
&lt;li&gt;We provided a command save and dump nodepool-provider-secrets content from sfconfig.yaml&lt;/li&gt;
&lt;li&gt;We fixed job-output zuul does not redirect to the .gz file job-output.txt is 404 &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29474"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29474&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We refined the rbac used by service account config-update &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29480"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29480&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We refectored (removing duplicated code), sanitized (CamelCase) ,splitted some part of the code in re-usable GO packages  &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29527"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29527&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added staticcheck linting &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29502"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29502&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started to add support for Nodepool builder&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Logreduce WASM based web interface</title><link href="https://www.softwarefactory-project.io/logreduce-wasm-based-web-interface.html" rel="alternate"></link><published>2023-09-18T00:00:00+00:00</published><updated>2023-09-18T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2023-09-18:/logreduce-wasm-based-web-interface.html</id><summary type="html">&lt;style type="text/css"&gt;
  blockquote {
    font-size: small;
    padding: 0px 5px;
  }
&lt;/style&gt;&lt;!-- This work is licensed under the Creative Commons Attribution 4.0 International License.
     To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
     or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
--&gt;&lt;p&gt;This post introduces a new Web Assembly (WASM) based web interface to
visualize &lt;a class="reference external" href="https://github.com/logreduce/logreduce#readme"&gt;logreduce&lt;/a&gt;'s reports.&lt;/p&gt;
&lt;p&gt;In three parts, I present:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The logreduce report format.&lt;/li&gt;
&lt;li&gt;WASM and Web APIs.&lt;/li&gt;
&lt;li&gt;HTML macro examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="context-and-problem-statement"&gt;
&lt;h2&gt;Context and problem statement&lt;/h2&gt;
&lt;p&gt;Logreduce produces a &lt;a class="reference external" href="https://github.com/logreduce/logreduce/blob/main/crates/report/src/report.rs"&gt;report&lt;/a&gt; containing the anomalies context …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;style type="text/css"&gt;
  blockquote {
    font-size: small;
    padding: 0px 5px;
  }
&lt;/style&gt;&lt;!-- This work is licensed under the Creative Commons Attribution 4.0 International License.
     To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
     or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
--&gt;&lt;p&gt;This post introduces a new Web Assembly (WASM) based web interface to
visualize &lt;a class="reference external" href="https://github.com/logreduce/logreduce#readme"&gt;logreduce&lt;/a&gt;'s reports.&lt;/p&gt;
&lt;p&gt;In three parts, I present:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The logreduce report format.&lt;/li&gt;
&lt;li&gt;WASM and Web APIs.&lt;/li&gt;
&lt;li&gt;HTML macro examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="context-and-problem-statement"&gt;
&lt;h2&gt;Context and problem statement&lt;/h2&gt;
&lt;p&gt;Logreduce produces a &lt;a class="reference external" href="https://github.com/logreduce/logreduce/blob/main/crates/report/src/report.rs"&gt;report&lt;/a&gt; containing the anomalies context along
with metadata such as read errors and unknown files. By default the
report is printed to the standard output, but it can also be saved as an
HTML file.&lt;/p&gt;
&lt;p&gt;The HTML export is significantly larger than the report itself. Indeed,
each log line needs to be wrapped inside an HTML element, while the
report can be tightly packed using the &lt;a class="reference external" href="https://github.com/bincode-org/bincode#readme"&gt;bincode&lt;/a&gt; serialization format.
Moreover the HTML export is static and it can't be re-imported, for
example to search for known anomalies.&lt;/p&gt;
&lt;p&gt;In the next sections, I present a more efficient implementation using
WASM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-assembly-wasm"&gt;
&lt;h2&gt;Web Assembly (WASM)&lt;/h2&gt;
&lt;p&gt;WASM is a portable binary instruction format that can be executed by web
clients like javascript. Since Rust has extensive support for this
compilation target, I decided to implement the logreduce report
interface with WASM. The main benefits are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Leverage Rust type system.&lt;/li&gt;
&lt;li&gt;Re-use the existing logreduce's source code.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Checkout the &lt;a class="reference external" href="https://rustwasm.github.io/docs/book/"&gt;rustwasm book&lt;/a&gt; to learn more.&lt;/blockquote&gt;
&lt;p&gt;In the next sections I present how to create a web application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-apis"&gt;
&lt;h2&gt;Web APIs&lt;/h2&gt;
&lt;p&gt;WASM programs don't have direct access to the Web APIs. For Rust, the
&lt;a class="reference external" href="https://docs.rs/web-sys"&gt;web-sys&lt;/a&gt; library provides the necessary bindings to manipulate the
DOM. Here is how the hello world demo looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#[wasm_bindgen(start)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;JsValue&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web_sys&lt;/span&gt;::&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no global `window` exists&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;should have a document on window&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;document should have a body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_text_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello from Rust!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Checkout the &lt;a class="reference external" href="https://rustwasm.github.io/wasm-bindgen/"&gt;wasm-bindgen documentation&lt;/a&gt; to learn more.&lt;/blockquote&gt;
&lt;p&gt;Similar to React and Angular, there are libraries built on top of
web-sys to implement higher level APIs.&lt;/p&gt;
&lt;p&gt;In the next section I present the libraries I used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-reactive-programming-frp"&gt;
&lt;h2&gt;Functional Reactive Programming (FRP)&lt;/h2&gt;
&lt;p&gt;In an earlier implementation, I used &lt;a class="reference external" href="https://yew.rs/"&gt;yew&lt;/a&gt; which provides a React style
API. Here is how the report was being fetched:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#[function_component(App)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;: &lt;span class="nc"&gt;UseStateHandle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;use_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;use_effect_with_deps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;wasm_bindgen_futures&lt;/span&gt;::&lt;span class="n"&gt;spawn_local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;report.bin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;render_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;loading...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately such &lt;tt class="docutils literal"&gt;use&lt;/tt&gt; hooks only work inside components and they
require a bit of boilerplate to pass properties. Instead I switched to a
lower level library named &lt;a class="reference external" href="https://github.com/Pauan/rust-dominator#readme"&gt;dominator&lt;/a&gt; which provides FRP APIs I find
easier to work with.&lt;/p&gt;
&lt;p&gt;Here is the equivalent code where the hooks are replaced with a signal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;: &lt;span class="nc"&gt;Mutable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;console_error_panic_hook&lt;/span&gt;::&lt;span class="n"&gt;set_once&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Arc&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;: &lt;span class="nc"&gt;Mutable&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;spawn_local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;report.bin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dominator&lt;/span&gt;::&lt;span class="n"&gt;append_dom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dominator&lt;/span&gt;::&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;render_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;render_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Dom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;child_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal_ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;render_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)])}),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;loading...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)}),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})))})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though the &lt;em&gt;html!&lt;/em&gt; macro is less pretty, it is much more flexible
as it lets you build reactive elements without relying on a virtual DOM
and clunky properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thanks to the Rust WASM target, logreduce can now produce efficient
reports with this &lt;a class="reference external" href="https://github.com/logreduce/logreduce/pull/25"&gt;PR#25&lt;/a&gt;. For a typical CI build, the report size is
reduced from a 881 KiB report.html, down to a 148 KiB report.bin. The
WASM program that decodes the binary report is 525 KiB, which combined
with the binary report, is still smaller than the static HTML. Moverover
the payload can be hosted on a content delivery network so that it is
re-used with every report.&lt;/p&gt;
&lt;img alt="wasm-size" src="./images/logreduce-wasm-size.png" /&gt;
&lt;p&gt;WASM is a fascinating system, and I am looking forward making more use
of it. In particular, it would be interesting to compile the whole
logreduce process to produce the report directly on the client side.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Aug 18 to Sep 06 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-aug-18-to-sep-06-summary.html" rel="alternate"></link><published>2023-09-06T10:00:00+00:00</published><updated>2023-09-06T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-09-06:/sprint-2023-aug-18-to-sep-06-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the zuul-operator switch to quay, but it is now failing with a dns issue with the perconna operator.&lt;/li&gt;
&lt;li&gt;We proposed to add connection health metric to zuul.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;operator - We have implemented the support for …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the zuul-operator switch to quay, but it is now failing with a dns issue with the perconna operator.&lt;/li&gt;
&lt;li&gt;We proposed to add connection health metric to zuul.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;operator - We have implemented the support for Custom Certificate for Route&lt;/li&gt;
&lt;li&gt;operator - We have implemented the support for LetsEncrypt Certificate for Route&lt;/li&gt;
&lt;li&gt;operator - We have ensured that SF on microshift.sf.io got certificates via cert-manager and sf-operator 0.0.4 (&lt;a class="reference external" href="https://zuul.microshift.softwarefactory-project.io/tenants"&gt;https://zuul.microshift.softwarefactory-project.io/tenants&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We integrated Gerrit 3.7 to sf-3.8.&lt;/li&gt;
&lt;li&gt;We updated zuul and nodepool in sf-3.8, which required python3.11.&lt;/li&gt;
&lt;li&gt;We improved zuul-weeder to report config loading error in the web ui.&lt;/li&gt;
&lt;li&gt;operator - we've made good progress on the monitoring stack: add a cli command to deploy a demo prometheus, add automatic collection of metrics for zuul and logserver + default alerting&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Jul 28 to Aug 16 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-jul-28-to-aug-16-summary.html" rel="alternate"></link><published>2023-08-16T10:00:00+00:00</published><updated>2023-08-16T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-08-16:/sprint-2023-jul-28-to-aug-16-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;p&gt;# Software Factory&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We validated and added documentation to add clouds.yaml and add cloud images on nodepool&lt;/li&gt;
&lt;li&gt;We added a workaround to avoid rate-limit issue with github when we setup OLM &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29118"&gt;https://softwarefactory-project.io/r/c/software-factory …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;p&gt;# Software Factory&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We validated and added documentation to add clouds.yaml and add cloud images on nodepool&lt;/li&gt;
&lt;li&gt;We added a workaround to avoid rate-limit issue with github when we setup OLM &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29118"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29118&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We improved the sfconfig cli to deploy gerrit, install the requirements setup the local copy of the config repositories and provision a demo tenant ready to be used.&lt;/li&gt;
&lt;li&gt;We removed unused policy code from managesf.&lt;/li&gt;
&lt;li&gt;We mitigated the update panic error happening on the operator controller.&lt;/li&gt;
&lt;li&gt;We investigated an issue about statefulset rolout discovered after the config repo bootstrap on microshift.sf.io &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29100"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We proposed a change to remove the zuul and nodepool sidecar containers (config-update must use the main container instead) &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29125/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29125/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We proposed a config-check negative test for Zuul and Nodepool &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29146/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/29146/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a post step to get service logs due from time to time CI gates are flapping&lt;/li&gt;
&lt;li&gt;We added a feature to enable custom SSL certificate for the route&lt;/li&gt;
&lt;li&gt;We perform a test if sf-operator will be working with Microshift 4.14 - all is fine, we can think to update the Microshift version in our CI&lt;/li&gt;
&lt;li&gt;We added zuul-client to zuul images and the corresponding sfconfig subcommand&lt;/li&gt;
&lt;li&gt;We added some subcommands to sfconfig tool:
* Create Zuul Tenant config file
* Add Zuul Teanant connection
* Create Zuul Job
* Create Zuul Pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Jul 07 to Jul 26 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-jul-07-to-jul-26-summary.html" rel="alternate"></link><published>2023-07-26T10:00:00+00:00</published><updated>2023-07-26T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-07-26:/sprint-2023-jul-07-to-jul-26-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed some zuul changes&lt;/li&gt;
&lt;li&gt;We propose a change for zuul related to the elasticsearch driver to send the docs to the Opensearch as integer fields instead of string&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We improved the microshift driver integration for …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed some zuul changes&lt;/li&gt;
&lt;li&gt;We propose a change for zuul related to the elasticsearch driver to send the docs to the Opensearch as integer fields instead of string&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We improved the microshift driver integration for nodepool by supporting multiple context and namespace&lt;/li&gt;
&lt;li&gt;We investigated sf-ci flakyness&lt;/li&gt;
&lt;li&gt;We added a new &lt;cite&gt;sfconfig&lt;/cite&gt; command line entrypoint to deploy the sf-operator&lt;/li&gt;
&lt;li&gt;We wrote an ADR for config jobs and finish the implementation using Ansible tasks&lt;/li&gt;
&lt;li&gt;We've completed work on the configcheckjob resource, needs merging&lt;/li&gt;
&lt;li&gt;we have experimented with the mariadb operator on microshift, confirming that it works with minimal effort&lt;/li&gt;
&lt;li&gt;We added jobs on the config repo to use ./tools/sfconfig microshift to deploy microshift on 9-stream instance&lt;/li&gt;
&lt;li&gt;We are working to add multinode ci job for sf-operator-dev job&lt;/li&gt;
&lt;li&gt;We are finishing to work on sf-4-alpha-2 and grommed sf-4-alpha-3&lt;/li&gt;
&lt;li&gt;We set Logserver at root url&lt;/li&gt;
&lt;li&gt;We updated Documentation on who to install Software Factory Operator&lt;/li&gt;
&lt;li&gt;We improve the way we deploy new versions of Software Factory Operator:&lt;ul&gt;
&lt;li&gt;Add each new version to the Catalog Index&lt;/li&gt;
&lt;li&gt;At each new repository tag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Jun 16 to Jul 05 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-jun-16-to-jul-05-summary.html" rel="alternate"></link><published>2023-07-05T10:00:00+00:00</published><updated>2023-07-05T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-07-05:/sprint-2023-jun-16-to-jul-05-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issue that logsender was not removing old directories&lt;/li&gt;
&lt;li&gt;We updated services on logscraper01.opendev.org host&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We modify how CI jobs and sfconfig command run, now both use the same playbooks and variables are …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issue that logsender was not removing old directories&lt;/li&gt;
&lt;li&gt;We updated services on logscraper01.opendev.org host&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We modify how CI jobs and sfconfig command run, now both use the same playbooks and variables are loaded during play instead having variables defined in multiple places&lt;/li&gt;
&lt;li&gt;We added the bits needed for 9-stream in setup-env roles &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28494"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28494&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We experimented with a custom resource to handle config-checks [Demo maybe]&lt;/li&gt;
&lt;li&gt;We can now adjust logserver's loopDelay, retentionDays in a CR, the changes are reconciled automatically.&lt;/li&gt;
&lt;li&gt;We start installing Software Factory via Catalog Source and Subscription and We now, generate operator's bundle, operator's catalog and operator container images, publishing then into a registry&lt;/li&gt;
&lt;li&gt;We fix the Software Factory Operator's bundle versioning problem realted to Operator's upgrade process&lt;/li&gt;
&lt;li&gt;We fix the lack of log files in Zuul Web UI&lt;/li&gt;
&lt;li&gt;We created several subcommand for our sfconfig cli command (operator delete, operator create, sf delete)&lt;/li&gt;
&lt;li&gt;We changed the logserver logs directory to the root url&lt;/li&gt;
&lt;li&gt;We start to write the README file for the end users&lt;/li&gt;
&lt;li&gt;We worked on configuring microshift and nodepool to validate running containerized job on the microshift instance&lt;/li&gt;
&lt;li&gt;We added a feature to spawn pods on the microshift node via nodepool&lt;/li&gt;
&lt;li&gt;We removed the support for managesf related commands&lt;/li&gt;
&lt;li&gt;We extracted the Gerrit service but keep it as a side service for CI and DEV&lt;/li&gt;
&lt;li&gt;We ensured that the Managed resource (SoftwareFactory) can be spawn w/o a config repo setup&lt;/li&gt;
&lt;li&gt;We experienced with TLS on the route with custom cert: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28698/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28698/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We wrote an ADR to write up current understanding and proposal  &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28701"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28701&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added support nodepool-launcher config-update &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28748"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28748&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 May 26 to Jun 14 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-may-26-to-jun-14-summary.html" rel="alternate"></link><published>2023-06-14T10:00:00+00:00</published><updated>2023-06-14T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-06-14:/sprint-2023-may-26-to-jun-14-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issues in logsender that was keeping old directories&lt;/li&gt;
&lt;li&gt;We fixed an issue in logsender where memory value was over max int64 value&lt;/li&gt;
&lt;li&gt;We added a feature into logsender that is trying few times to download most …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issues in logsender that was keeping old directories&lt;/li&gt;
&lt;li&gt;We fixed an issue in logsender where memory value was over max int64 value&lt;/li&gt;
&lt;li&gt;We added a feature into logsender that is trying few times to download most important files to be processed later&lt;/li&gt;
&lt;li&gt;We updated Opensearch version to 2.5 in CI jobs in ci-log-processing project&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We bootstraped sfconfig cli tool to deploy microshift if needed and run ci tests&lt;/li&gt;
&lt;li&gt;We improved setup-env role to ensure we have all the needed bit from a centos-9-stream vanilla and f38 for microshift and run ci tests&lt;/li&gt;
&lt;li&gt;We Introduced a new CustomResource called LogServer and its controller&lt;/li&gt;
&lt;li&gt;We added the Software Factory Operator CI Upgrade Job&lt;/li&gt;
&lt;li&gt;We updated SF-Operator Upgrade Job to user sfconfig cli command&lt;/li&gt;
&lt;li&gt;We enabled the ObservedGeneration pattern &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28556/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28556/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a new field in status reconciledBy: &amp;lt;string&amp;gt; which is the OPERATOR_CONDITION env var value &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28604"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28604&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We are removing Gerrit + managesf to re-focus on essentials components &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28620/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28620/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We removed some CI flakyness thanks to &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28552/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28552/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We Added a test for adding/removing Gerrit connection to Zuul &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28476/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28476/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed containerfile errors related to the decommissioning of the centos registry, use quay.io instead.&lt;/li&gt;
&lt;li&gt;We worked further on metrics for sf-operator (note that these are still open patchsets):&lt;ul&gt;
&lt;li&gt;we added operator metrics&lt;/li&gt;
&lt;li&gt;we finalized the sidecar container to expose volume metrics (logserver)&lt;/li&gt;
&lt;li&gt;we exposed zuul metrics&lt;/li&gt;
&lt;li&gt;we managed to deploy a prometheus instance in a 'monitoring' namespace with OLM, and automated collection with a serviceMonitor CR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We added a feature into the sf-operator to set the replica count for the statefulset apps&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 May 05 to May 24 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-may-05-to-may-24-summary.html" rel="alternate"></link><published>2023-05-24T10:00:00+00:00</published><updated>2023-05-24T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-05-24:/sprint-2023-may-05-to-may-24-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed a bubblewrap security fix for Zuul&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created ADR to create a sfconfig cli tool to manage sf-operator &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28318"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28318&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We boostraped sfconfig cli tool to run local …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed a bubblewrap security fix for Zuul&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created ADR to create a sfconfig cli tool to manage sf-operator &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28318"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28318&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We boostraped sfconfig cli tool to run local and ci tests &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28319"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28319&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We are working to add sfconfig microshift subcmd to setup microshift on a vanilla 9-stream instance &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28377"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28377&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We are working on using zuul 8.3.1 with sf-operator&lt;/li&gt;
&lt;li&gt;We enabled the run operator via &amp;quot;operator-sdk bundle run&amp;quot; in CI &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28276"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28276&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed the empty config repo logs into the artifacts &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28307"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28307&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We published a Blog post about OLM &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/www.softwarefactory-project.io/+/28327"&gt;https://softwarefactory-project.io/r/c/www.softwarefactory-project.io/+/28327&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a CI job for validating the dev - mode (go run) &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28355/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28355/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We discussed about whether or not to leverage multiple CR/Custom controller&lt;/li&gt;
&lt;li&gt;We discussed the milestone 2 Stories&lt;/li&gt;
&lt;li&gt;We made some progress landing changes for sf 3.8.9&lt;/li&gt;
&lt;li&gt;We investigated how to split the sf-operator into multiple controllers&lt;/li&gt;
&lt;li&gt;We added Publish OLM role - &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28349"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28349&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added Publish Operator's Catalog - &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28373"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28373&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a make task to generate the Catalog files - &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28388"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28388&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We Changed from cp to rsync command to sync diretories - &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28396"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28396&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We pinned Websocket-client Python package to version 1.5.1 - &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28400"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28400&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We Created directories using file ansible module - &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28402"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28402&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added Software Factory Operator CI Upgrade Job - &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28378"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28378&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Monocle Operator - OLM</title><link href="https://www.softwarefactory-project.io/monocle-operator-olm.html" rel="alternate"></link><published>2023-05-15T00:00:00+00:00</published><updated>2023-05-15T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2023-05-15:/monocle-operator-olm.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to introduce the &lt;a class="reference external" href="https://olm.operatorframework.io/"&gt;Operator Lifecycle Management (OLM)&lt;/a&gt;
and how we integrated the &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator"&gt;Monocle Operator&lt;/a&gt; as an OLM package into the
&lt;a class="reference external" href="https://operatorhub.io"&gt;operatorhub.io&lt;/a&gt; catalog.&lt;/p&gt;
&lt;p&gt;This article is a follow up post of &amp;quot;&lt;a class="reference external" href="https://www.softwarefactory-project.io/monocle-operator-phase-1-basic-install.html"&gt;Monocle Operator - Phase 1 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to introduce the &lt;a class="reference external" href="https://olm.operatorframework.io/"&gt;Operator Lifecycle Management (OLM)&lt;/a&gt;
and how we integrated the &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator"&gt;Monocle Operator&lt;/a&gt; as an OLM package into the
&lt;a class="reference external" href="https://operatorhub.io"&gt;operatorhub.io&lt;/a&gt; catalog.&lt;/p&gt;
&lt;p&gt;This article is a follow up post of &amp;quot;&lt;a class="reference external" href="https://www.softwarefactory-project.io/monocle-operator-phase-1-basic-install.html"&gt;Monocle Operator - Phase 1 - Basic
Install&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="what-is-olm"&gt;
&lt;h2&gt;What is OLM&lt;/h2&gt;
&lt;p&gt;The Operator Lifecycle Management (OLM) is an approach to simplify
Kubernetes operators deployment, updates and lifecycle management.&lt;/p&gt;
&lt;p&gt;OLM is composed of two main components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Catalogs&lt;/strong&gt;: These are collections of Operators that can be
installed on a Kubernetes cluster. Catalogs can be public or private,
and can be hosted on container registries. Each Operator in a catalog
has a corresponding manifest that describes its deployment,
configuration, and management. Catalogs allow users to easily
discover, install and upgrade Operators on their cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Operator Lifecycle Manager&lt;/strong&gt;: This is the control plane
component of OLM that manages the installation, upgrade, and removal
of Operators on a Kubernetes cluster. The Operator Lifecycle Manager
is responsible for ensuring that Operators are deployed and managed
according to their defined lifecycle. It monitors the status of
Operators, handles upgrades and rollbacks, and ensures that
dependencies between Operators are resolved correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OLM can be seen as a Linux Package Manager like &lt;strong&gt;DNF&lt;/strong&gt;, indeed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;both rely on a manifest to ensure proper installation and
configuration of the package (the operator).&lt;/li&gt;
&lt;li&gt;OLM and DNF package managers ensure that dependencies are resolved
and the component is deployed and managed according to its defined
lifecycle.&lt;/li&gt;
&lt;li&gt;both systems offer a standardized approach to managing software
components, improving system stability and efficiency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a &lt;a class="reference external" href="https://olm.operatorframework.io/docs/glossary/"&gt;glossary&lt;/a&gt; of the OLM terminology.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="olm-installation"&gt;
&lt;h2&gt;OLM installation&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://sdk.operatorframework.io/"&gt;operator-sdk&lt;/a&gt; tool provides a command to deploy OLM on a
Kubernetes deployment. This command creates various k8s resources to
spawn OLM components and associated roles, role bindinds, service users,
...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;operator-sdk olm install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the Ansible role &lt;a class="reference external" href="https://github.com/openstack-k8s-operators/ansible-microshift-role"&gt;ansible-microshift-role&lt;/a&gt; provides an easy
way to deploy a lightweight OpenShift environment (using &lt;a class="reference external" href="https://github.com/openshift/microshift"&gt;Microshift&lt;/a&gt;)
with OLM enabled.&lt;/p&gt;
&lt;p&gt;This command creates two namespaces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;olm&lt;/strong&gt;: It contains the OLM system with the &lt;strong&gt;catalog-operator&lt;/strong&gt;,
&lt;strong&gt;olm-operator&lt;/strong&gt; and the &lt;strong&gt;packageserver&lt;/strong&gt; deployments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;operators&lt;/strong&gt;: It is the placeholder where one can subscribe to one
or more operators. No resource is populated here by the OLM
installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n olm get deployment
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
catalog-operator   &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           17d
olm-operator       &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           17d
packageserver      &lt;span class="m"&gt;2&lt;/span&gt;/2     &lt;span class="m"&gt;2&lt;/span&gt;            &lt;span class="m"&gt;2&lt;/span&gt;           17d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are able to extend our k8s instance by installing operators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="olm-usage"&gt;
&lt;h2&gt;OLM usage&lt;/h2&gt;
&lt;p&gt;In order to learn more about OLM, we will deploy the &lt;a class="reference external" href="https://operatorhub.io/operator/cert-manager"&gt;cert-manager
operator&lt;/a&gt; from OLM.&lt;/p&gt;
&lt;p&gt;The OLM installation should come with the &lt;strong&gt;Community Operators&lt;/strong&gt;
catalog installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n olm get catalogsources operatorhubio-catalog
NAME                    DISPLAY               TYPE   PUBLISHER        AGE
operatorhubio-catalog   Community Operators   grpc   OperatorHub.io   17d

kubectl -n olm get -o json catalogsources operatorhubio-catalog &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.spec&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;displayName&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Community Operators&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;grpcPodConfig&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;securityContextConfig&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;restricted&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;quay.io/operatorhubio/catalog:latest&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;publisher&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;OperatorHub.io&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;sourceType&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;grpc&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;updateStrategy&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;registryPoll&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;60m&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can explore the catalog for available operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# There is more than 300 operators listed so let&amp;#39;s grep for cert-manager&lt;/span&gt;
kubectl -n olm get packagemanifests &lt;span class="p"&gt;|&lt;/span&gt; grep cert-manager
cert-manager                               Community Operators   17d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;strong&gt;PackageManifest&lt;/strong&gt; resource describes the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The name and description of the package being managed.&lt;/li&gt;
&lt;li&gt;The package's installation process and any dependencies required.&lt;/li&gt;
&lt;li&gt;The default channel and available channels through which different
versions of the package can be installed.&lt;/li&gt;
&lt;li&gt;A list of all versions of the package available through each channel.&lt;/li&gt;
&lt;li&gt;The latest version of the package available by channel
(&lt;tt class="docutils literal"&gt;currentCSV&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;A list of CRDs that are installed along with the package.&lt;/li&gt;
&lt;li&gt;A list of global configuration variables for the package.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;PackageManifest&lt;/strong&gt; resource could be heavy to inspect, here are
some commands to help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Show the package provider&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.provider&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;The cert-manager maintainers&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;https://cert-manager.io/&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Show available channels for that package&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.channels[].name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;candidate&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;stable&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Show the default install channel of that package&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.defaultChannel&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;stable&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Last version available (package head) in the stable channel&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.channels[] | select(.name == &amp;quot;stable&amp;quot;) | .currentCSV&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;cert-manager.v1.11.0&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Versions from the stable channel&lt;/span&gt;
kubectl -n olm get -o json packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.channels[] | select(.name == &amp;quot;stable&amp;quot;) | .entries&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;cert-manager.v1.11.0&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.11.0&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;cert-manager.v1.10.2&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.10.2&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  ...
&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# And finally, to show the CSV of the last stable version&lt;/span&gt;
kubectl -n olm get -o json  packagemanifests cert-manager &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.status.channels[] | select(.name == &amp;quot;stable&amp;quot;) | .currentCSVDesc&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;PackageManifest&lt;/strong&gt; is built from a list of &lt;a class="reference external" href="https://docs.openshift.com/container-platform/4.12/operators/understanding/olm-common-terms.html#olm-common-terms-csv_olm-common-terms"&gt;ClusterServiceVersion
definition&lt;/a&gt;. The &lt;strong&gt;ClusterServiceVersion&lt;/strong&gt; resource defines information
that is required to run the Operator, like the RBAC rules it requires
and which custom resources (CRs) it manages or depends on.&lt;/p&gt;
&lt;p&gt;To install the &lt;strong&gt;cert-manager&lt;/strong&gt; operator from the &lt;strong&gt;stable&lt;/strong&gt; channel we
need to create a &lt;a class="reference external" href="https://olm.operatorframework.io/docs/concepts/crds/subscription/"&gt;Subscription&lt;/a&gt;. It describes which channel of an
operator package to subscribe to, and whether to perform updates
automatically or manually.&lt;/p&gt;
&lt;p&gt;Create the file &lt;em&gt;cert-manager.yaml&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;operators.coreos.com/v1alpha1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-cert-manager&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;operators&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stable&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cert-manager&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;operatorhubio-catalog&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;sourceNamespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;olm&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# By default is automatic upgrade plan&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# installPlanApproval: Manual&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then apply it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Apply the subscription&lt;/span&gt;
kubectl apply -f cert-manager.yaml

&lt;span class="c1"&gt;# Get the subscription&lt;/span&gt;
kubectl -n operators get sub
NAME                  PACKAGE            SOURCE                  CHANNEL
my-cert-manager       cert-manager       operatorhubio-catalog   stable

&lt;span class="c1"&gt;# Ensure the CSV is now available&lt;/span&gt;
kubectl -n operators get csv
NAME                       DISPLAY            VERSION   REPLACES                   PHASE
cert-manager.v1.11.0       cert-manager       &lt;span class="m"&gt;1&lt;/span&gt;.11.0    cert-manager.v1.10.2       Succeeded
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that an &lt;a class="reference external" href="https://olm.operatorframework.io/docs/concepts/crds/installplan/"&gt;InstallPlan&lt;/a&gt; resource has been created too. This is where
you can inspect installation steps on the operator. This resource could
be inspected in case the requested operator failed to be installed, for
instance when the &lt;tt class="docutils literal"&gt;csv&lt;/tt&gt; resource has not been created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n operators describe installplan install-tkcrn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default the &lt;strong&gt;Subscription&lt;/strong&gt; set the &lt;strong&gt;installPlanApproval&lt;/strong&gt; as
automatic. However if you decide to set it as manual, when OLM detects a
possible upgrade (because of a new version available in the &lt;tt class="docutils literal"&gt;stable&lt;/tt&gt;
channel), then the &lt;tt class="docutils literal"&gt;InstallPlan&lt;/tt&gt; will need to be manually updated to
approve the upgrade. The process is described &lt;a class="reference external" href="https://olm.operatorframework.io/docs/concepts/crds/subscription/#manually-approving-upgrades-via-subscriptions"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beside the fact that the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cert-manager.v1.11.0&lt;/span&gt;&lt;/tt&gt; CSV phase is
&lt;tt class="docutils literal"&gt;Succeeded&lt;/tt&gt; we can verify that the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cert-manager&lt;/span&gt;&lt;/tt&gt; operator is
running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n operators get all &lt;span class="p"&gt;|&lt;/span&gt; grep cert-manager
pod/cert-manager-68c79ccf94-hkbp8                               &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          62m
pod/cert-manager-cainjector-86c79dd959-q6x2q                    &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          62m
pod/cert-manager-webhook-b685d8cd4-9q6jj                        &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          62m
service/cert-manager                                          ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.43.98.149    &amp;lt;none&amp;gt;        &lt;span class="m"&gt;9402&lt;/span&gt;/TCP   63m
service/cert-manager-webhook                                  ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.43.18.198    &amp;lt;none&amp;gt;        &lt;span class="m"&gt;443&lt;/span&gt;/TCP    63m
service/cert-manager-webhook-service                          ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.43.34.128    &amp;lt;none&amp;gt;        &lt;span class="m"&gt;443&lt;/span&gt;/TCP    62m
deployment.apps/cert-manager                               &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           62m
deployment.apps/cert-manager-cainjector                    &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           62m
deployment.apps/cert-manager-webhook                       &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           62m
replicaset.apps/cert-manager-68c79ccf94                               &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;       62m
replicaset.apps/cert-manager-cainjector-86c79dd959                    &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;       62m
replicaset.apps/cert-manager-webhook-b685d8cd4                        &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;       62m
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The requested operator is installed in the same namespace as its
&lt;tt class="docutils literal"&gt;Subscription&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We can also ensure that the CRDs provided by the operator are available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl api-resources &lt;span class="p"&gt;|&lt;/span&gt; grep cert-manager
challenges                                     acme.cert-manager.io/v1                      &lt;span class="nb"&gt;true&lt;/span&gt;         Challenge
orders                                         acme.cert-manager.io/v1                      &lt;span class="nb"&gt;true&lt;/span&gt;         Order
certificaterequests               cr,crs       cert-manager.io/v1                           &lt;span class="nb"&gt;true&lt;/span&gt;         CertificateRequest
certificates                      cert,certs   cert-manager.io/v1                           &lt;span class="nb"&gt;true&lt;/span&gt;         Certificate
clusterissuers                                 cert-manager.io/v1                           &lt;span class="nb"&gt;false&lt;/span&gt;        ClusterIssuer
issuers                                        cert-manager.io/v1                           &lt;span class="nb"&gt;true&lt;/span&gt;         Issuer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, let's create a &lt;tt class="docutils literal"&gt;namespace&lt;/tt&gt; and request an &lt;tt class="docutils literal"&gt;Issuer&lt;/tt&gt; resource
to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cert-manager&lt;/span&gt; operator&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;Create the file &lt;em&gt;issuer.yaml&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cert-manager.io/v1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Issuer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;example-issuer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;selfSigned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then apply the resource in a new namespace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl ceate ns test-cert-manager

kubectl -n test-cert-manager apply -f issuer.yaml
issuer.cert-manager.io/example-issuer created

kubectl -n test-cert-manager get issuers
NAME             READY   AGE
example-issuer   True    7s
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="packaging-monocle-for-olm"&gt;
&lt;h2&gt;Packaging Monocle for OLM&lt;/h2&gt;
&lt;p&gt;Recently we wrote an &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator"&gt;Operator&lt;/a&gt; for the Monocle project and we were
curious about how to leverage OLM to make it easily consumable.&lt;/p&gt;
&lt;p&gt;An &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator/tree/6b8a02f9087f83798f732ede85cbe35c0304cb58/install"&gt;operator.yaml&lt;/a&gt; file was generated by the
&lt;tt class="docutils literal"&gt;kustomize build config/default&lt;/tt&gt; command, then it was possible to
apply the Monocle CRD and to &lt;em&gt;install&lt;/em&gt; the required resources
(namespace, serviceuser, roles, role bindings, deployments, ...) to get
the operator running.&lt;/p&gt;
&lt;p&gt;From there the process was to create the &lt;a class="reference external" href="https://olm.operatorframework.io/docs/glossary/#bundle"&gt;bundle&lt;/a&gt; (or the package)
using the &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt; target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make bundle
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates a directory called &lt;strong&gt;bundle&lt;/strong&gt; which contains some
sub-directories:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;manifests&lt;/em&gt;: containing mainly the CRD(s), and the
ClusterServiceVersion.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;metadata&lt;/em&gt;: this is some annotations to describe the bundle.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tests/scorecard&lt;/em&gt;: this describes various validation tests to be
performed on the bundle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we would like to &lt;strong&gt;validate our bundle&lt;/strong&gt;, so we need to perform the
following steps.&lt;/p&gt;
&lt;p&gt;First we need to &lt;strong&gt;build and publish&lt;/strong&gt; the &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt;'s container image.
To do so, our &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; provides the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bundle-build&lt;/span&gt;&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bundle-push&lt;/span&gt;&lt;/tt&gt; targets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;BUNDLE_IMG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;quay.io/change-metrics/monocle-operator-bundle:v0.0.1
make bundle-build bundle-push
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;operator-sdk&lt;/span&gt; run bundle&lt;/tt&gt; &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/cli/operator-sdk_run_bundle/"&gt;command&lt;/a&gt; to &lt;strong&gt;validate
the bundle&lt;/strong&gt;. The command drives these steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create an &lt;tt class="docutils literal"&gt;operator catalog&lt;/tt&gt; containing only our &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Run the &lt;tt class="docutils literal"&gt;registry&lt;/tt&gt; pod to serve the new &lt;tt class="docutils literal"&gt;catalog&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;tt class="docutils literal"&gt;CatalogSource&lt;/tt&gt; resource to make the new &lt;tt class="docutils literal"&gt;catalog&lt;/tt&gt;
available&lt;/li&gt;
&lt;li&gt;Create a &lt;tt class="docutils literal"&gt;Subscription&lt;/tt&gt; and wait for the &lt;tt class="docutils literal"&gt;ClusterServiceVersion&lt;/tt&gt;
to be available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this command needs to pull the bundle image from a real
container registry thus we run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bundle-push&lt;/span&gt;&lt;/tt&gt; to publish it. Running a
&lt;a class="reference external" href="https://hub.docker.com/_/registry"&gt;local registry&lt;/a&gt; could ease that process by avoiding the need to push
the bundle image on &lt;tt class="docutils literal"&gt;dockerhub&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;quay.io&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create ns test-bundle
oc adm policy add-scc-to-user privileged system:serviceaccount:test-bundle:default
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;BUNDLE_IMG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;quay.io/change-metrics/monocle-operator-bundle:v0.0.1
operator-sdk run bundle &lt;span class="nv"&gt;$BUNDLE_IMG&lt;/span&gt; --namespace test-bundle --security-context-config restricted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0010&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Creating a File-Based Catalog of the bundle &lt;span class="s2"&gt;&amp;quot;quay.io/change-metrics/monocle-operator-bundle:v0.0.1&amp;quot;&lt;/span&gt;
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0011&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Generated a valid File-Based Catalog
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0016&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Created registry pod: quay-io-change-metrics-monocle-operator-bundle-v0-0-1
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0016&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Created CatalogSource: monocle-operator-catalog
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0016&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; OperatorGroup &lt;span class="s2"&gt;&amp;quot;operator-sdk-og&amp;quot;&lt;/span&gt; created
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0016&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Created Subscription: monocle-operator-v0-0-1-sub
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0022&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Approved InstallPlan install-74dzl &lt;span class="k"&gt;for&lt;/span&gt; the Subscription: monocle-operator-v0-0-1-sub
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0022&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Waiting &lt;span class="k"&gt;for&lt;/span&gt; ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; to reach &lt;span class="s1"&gt;&amp;#39;Succeeded&amp;#39;&lt;/span&gt; phase
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0022&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Waiting &lt;span class="k"&gt;for&lt;/span&gt; ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; to appear
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0035&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Found ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; phase: Pending
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0036&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Found ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; phase: InstallReady
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0037&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Found ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; phase: Installing
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0046&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   Found ClusterServiceVersion &lt;span class="s2"&gt;&amp;quot;test-bundle/monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; phase: Succeeded
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0047&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; OLM has successfully installed &lt;span class="s2"&gt;&amp;quot;monocle-operator.v0.0.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;test-bundle&lt;/span&gt;&lt;/tt&gt; namespace can be cleaned using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;operator-sdk cleanup --namespace test-bundle monocle-operator
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0001&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; subscription &lt;span class="s2"&gt;&amp;quot;monocle-operator-v0-0-1-sub&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0001&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; customresourcedefinition &lt;span class="s2"&gt;&amp;quot;monocles.monocle.monocle.change-metrics.io&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0002&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; clusterserviceversion &lt;span class="s2"&gt;&amp;quot;monocle-operator.v0.0.1&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0002&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; catalogsource &lt;span class="s2"&gt;&amp;quot;monocle-operator-catalog&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0003&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; operatorgroup &lt;span class="s2"&gt;&amp;quot;operator-sdk-og&amp;quot;&lt;/span&gt; deleted
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0003&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Operator &lt;span class="s2"&gt;&amp;quot;monocle-operator&amp;quot;&lt;/span&gt; uninstalled
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At that point, we have a &lt;em&gt;validated&lt;/em&gt; &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt;. The next step is to
publish/distribute it. To do so, either:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;we need to &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/olm-integration/tutorial-bundle/#deploying-bundles-in-production"&gt;maintain a catalog image&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;or we distribute the bundle via an existing catalog like
&lt;a class="reference external" href="https://operatorhub.io"&gt;operatorhub.io&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="monocle-operator-on-operatorhub-io"&gt;
&lt;span id="monocle-operator-on-operatorhubio"&gt;&lt;/span&gt;&lt;h2&gt;Monocle operator on OperatorHub.io&lt;/h2&gt;
&lt;p&gt;We decided to propose the operator to the &lt;strong&gt;Community Catalog&lt;/strong&gt;. This
section explains the process we followed to publish the Monocle Operator
on &lt;a class="reference external" href="https://operatorhub.io"&gt;operatorhub.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we ensured that the &lt;strong&gt;required bundle CSV fields are present&lt;/strong&gt;
(see the &lt;a class="reference external" href="https://k8s-operatorhub.github.io/community-operators/packaging-required-fields/"&gt;required fields&lt;/a&gt;). If not the CSV template needs to be
adapted in
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;config/manifests/bases/monocle-operator.clusterserviceversion.yaml&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;make bundle&lt;/tt&gt; command must be run to apply changes to the
&lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt; directory.&lt;/p&gt;
&lt;p&gt;We also &lt;strong&gt;validated the bundle&lt;/strong&gt; with the &lt;tt class="docutils literal"&gt;validate&lt;/tt&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;operator-sdk bundle validate ./bundle --select-optional &lt;span class="nv"&gt;suite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;operatorframework
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; All validation tests have completed successfully
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore we &lt;strong&gt;run the scorecard validation&lt;/strong&gt; (built-in basic and OLM
tests. See &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/testing-operators/scorecard/"&gt;scorecard&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;operator-sdk scorecard bundle -o text --pod-security restricted -n scorecard
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally we created a &lt;a class="reference external" href="https://github.com/k8s-operatorhub/community-operators/pull/2668"&gt;Pull Request&lt;/a&gt; on the
&lt;a class="reference external" href="https://github.com/k8s-operatorhub/community-operators"&gt;k8s-operatorhub/community-operators&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;This Pull Request includes a copy of the &lt;tt class="docutils literal"&gt;bundle&lt;/tt&gt; located in a new
directory called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;operators/monocle-operator/0.0.1&lt;/span&gt;&lt;/tt&gt;. The
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;operators/monocle-operator/ci.yaml&lt;/span&gt;&lt;/tt&gt; file was also needed to define
&lt;a class="reference external" href="https://k8s-operatorhub.github.io/community-operators/operator-ci-yaml/#operator-versioning"&gt;various settings&lt;/a&gt; for the operatorhub.io's CI pipelines.&lt;/p&gt;
&lt;p&gt;After some back and forth, mainly thanks to the operatorhub.io's CI
catching issues, the Monocle Operator Pull Request landed and few
minutes later (propably the time required by the CD pipeline to update
and publish the catalog) it &lt;a class="reference external" href="https://operatorhub.io/operator/monocle-operator"&gt;appeared on the operatorhub.io website&lt;/a&gt;,
and was available on our Microshift installation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n olm get packagemanifests monocle-operator
NAME               CATALOG               AGE
monocle-operator   Community Operators   18d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Feel free to refer to the upstream &lt;a class="reference external" href="https://k8s-operatorhub.github.io/community-operators/"&gt;Add your operator - documentation&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-conclude"&gt;
&lt;h2&gt;To conclude&lt;/h2&gt;
&lt;p&gt;As we are working closer with OpenShift and the Go Operator pattern, our
team decided to investigate OLM to gather knowledge. After some readings
and experimentations we were able to figure out how to leverage OLM to
distribute a Kubernetes operator. We used the Monocle Operator to
perform that experimentation because it was almost &lt;em&gt;ready to bundle&lt;/em&gt;.
This experimentation will help us to better align our further
developments for &lt;strong&gt;SF 4.X&lt;/strong&gt; aka the &lt;a class="reference external" href="https://github.com/softwarefactory-project/sf-operator"&gt;sf-operator&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Apr 14 to May 03 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-apr-14-to-may-03-summary.html" rel="alternate"></link><published>2023-05-03T10:00:00+00:00</published><updated>2023-05-03T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-05-03:/sprint-2023-apr-14-to-may-03-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We now use stream9-minimal containers for all sf services and all containers are built with microdnf without weak dependencies&lt;/li&gt;
&lt;li&gt;We fixed the SecurityContextConstraint violations triggered by running in restricted namespace&lt;/li&gt;
&lt;li&gt;We reported an issue to quay where …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We now use stream9-minimal containers for all sf services and all containers are built with microdnf without weak dependencies&lt;/li&gt;
&lt;li&gt;We fixed the SecurityContextConstraint violations triggered by running in restricted namespace&lt;/li&gt;
&lt;li&gt;We reported an issue to quay where image can become a zombie&lt;/li&gt;
&lt;li&gt;We fixed the rbac issues triggered by running the operator in a deployment&lt;/li&gt;
&lt;li&gt;We are working on having a next 3.8.9 release of SF 3.8&lt;/li&gt;
&lt;li&gt;We defined the SF4 alpha-1 milestone&lt;/li&gt;
&lt;li&gt;We did some Some refactoring on the post.yaml (artifacts fetching) &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28122"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28122&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated why our container was not working as random user by openshift&lt;/li&gt;
&lt;li&gt;We enabled OLM for sf-operator test node via ansible-microshift-role &lt;a class="reference external" href="https://github.com/openstack-k8s-operators/ansible-microshift-role/pull/20"&gt;https://github.com/openstack-k8s-operators/ansible-microshift-role/pull/20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We are installing the cert-manager via OLM &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28216"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28216&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We enabled the vanilla installation the operator and updated the RBAC &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28251"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28251&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adding Purgelogs Service to Software Factory Operator - &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28111"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LogServer Controller - &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28288"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/28288&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Mar 24 to Apr 12 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-mar-24-to-apr-12-summary.html" rel="alternate"></link><published>2023-04-12T10:00:00+00:00</published><updated>2023-04-12T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-04-12:/sprint-2023-mar-24-to-apr-12-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed few issues related to the logsender, where some files were empty or subunit files were incorrect and the files were still available on the server.&lt;/li&gt;
&lt;li&gt;We upgraded Opensearch on Opendev to version 2.5 (from 1 …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed few issues related to the logsender, where some files were empty or subunit files were incorrect and the files were still available on the server.&lt;/li&gt;
&lt;li&gt;We upgraded Opensearch on Opendev to version 2.5 (from 1.1 to 1.3 then 1.3 to 2.5)&lt;/li&gt;
&lt;li&gt;If all would be fine with logscraper and logsender changes, we will do a release version for ci-log-processing o/&lt;/li&gt;
&lt;li&gt;We proposed a change to upload-logs to better support log servers that implement rrsync &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/878829"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/878829&lt;/a&gt; but no love (so we modified the scp container to remove rrsync)&lt;/li&gt;
&lt;li&gt;Merged support for username/password as arguments in zuul-client if the OIDC provider supports direct grant access, negating the need to fetch a JWT by your own means&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;we now use stream9-minimal for all containers except zookeeper and logserver we have to migrate&lt;/li&gt;
&lt;li&gt;we bumped zuul and nodepool to version 8.2.0, and 3.6.4 for gerrit&lt;/li&gt;
&lt;li&gt;we added functional tests to validate zuul-web api and from user &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27984"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27984&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added cache dir volume for MySQL service due the temporary file were stored in delta dir in podman storage overlay, so the servers were from time to time out of the disk space&lt;/li&gt;
&lt;li&gt;We added PodSecurityContext and SecurityContext to avoid warning message on running sf-operator. It should also unlock partially using Microshift 4.13&lt;/li&gt;
&lt;li&gt;We fixed an issue related to the Zuul console log was not working correctly&lt;/li&gt;
&lt;li&gt;We've added a playbook to streamline microshift deployment in sf-operator's toolbox&lt;/li&gt;
&lt;li&gt;We validated that volume expansion is available out of the box with microshift&lt;/li&gt;
&lt;li&gt;We are adding storageSize properties to sf-operator services instead of using default sizes. Next step will be to react to CR changes for these properties to expand volumes.&lt;/li&gt;
&lt;li&gt;We investigated how to handle PVC deletion&lt;/li&gt;
&lt;li&gt;We added the support for the config-update (resources and zuul config apply)&lt;/li&gt;
&lt;li&gt;We improved CI job duration and fixed various flakiness&lt;/li&gt;
&lt;li&gt;We fixed the Zuul Gerrit comment to link to the logserver &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27921/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27921/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We improved the README and CONTRIBUTING doc and added a section about how to deploy Microshift &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27958/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27958/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a CI task to fetch artifacts produced by zuul jobs during the sf-operator functional test &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27977/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27977/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on defining the next milestone for sf-4.0&lt;/li&gt;
&lt;li&gt;We are working on maintainance release sf-config 3.8.9 including some fixes discovered after the upgrade&lt;/li&gt;
&lt;li&gt;We added Logserver and tests with official OpenShift Container to SFO&lt;/li&gt;
&lt;li&gt;We are adding PurgeLogs and test to SFO&lt;/li&gt;
&lt;li&gt;We fixed Zuul Web UI broken Gerrit UI links&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Mar 02 to Mar 22 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-mar-02-to-mar-22-summary.html" rel="alternate"></link><published>2023-03-22T10:00:00+00:00</published><updated>2023-03-22T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-03-22:/sprint-2023-mar-02-to-mar-22-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We scheduled the Opensearch upgrade date&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed all components not included in the mvp from sf-operator&lt;/li&gt;
&lt;li&gt;We created script to allow dev to run ci-jobs from laptop to reproduce zuul workflow and modify roles to …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We scheduled the Opensearch upgrade date&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed all components not included in the mvp from sf-operator&lt;/li&gt;
&lt;li&gt;We created script to allow dev to run ci-jobs from laptop to reproduce zuul workflow and modify roles to work in both envs&lt;/li&gt;
&lt;li&gt;We are working to add simple tests to clone, modify and submit change on the config repo, then check results in zuul-web (ported from sf-ci)&lt;/li&gt;
&lt;li&gt;We started working on the logserver operator. This requires an rsync container that we need to develop.&lt;/li&gt;
&lt;li&gt;We improved the CI flakyness by ensuring the zuul-scheduler container is running before doing the tenant configuration.&lt;/li&gt;
&lt;li&gt;We replaced the kubernetes Ingress with openshift Route: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27808"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/27808&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on improving developer experience (like by the use of topolvm: this use dynamic PV provisionning and remove the need to hack on the microshift node to clear PVs, removing needs for MY_NS var as we all use a dedicated microshift instance, ...)&lt;/li&gt;
&lt;li&gt;We added a fix for sf-config that is not including the SELinux labels on mounting the volume for the purgelogs because the service restart takes ages and from time to time it just &amp;quot;freeze&amp;quot; probably because of missing label.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Monocle Operator - Phase 1 - Basic Install</title><link href="https://www.softwarefactory-project.io/monocle-operator-phase-1-basic-install.html" rel="alternate"></link><published>2023-03-10T00:00:00+00:00</published><updated>2023-03-10T00:00:00+00:00</updated><author><name>Fabien Boucher and Fransisco De Seruca Salgado</name></author><id>tag:www.softwarefactory-project.io,2023-03-10:/monocle-operator-phase-1-basic-install.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to explain how we built a k8s Operator using the
&lt;a class="reference external" href="https://sdk.operatorframework.io/"&gt;operator SDK&lt;/a&gt; for the &lt;a class="reference external" href="https://changemetrics.io"&gt;Monocle&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;We used the opportunity of &lt;tt class="docutils literal"&gt;Monocle&lt;/tt&gt;, which is a quite simple project
in terms of architecture and workflows, to …&lt;/p&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to explain how we built a k8s Operator using the
&lt;a class="reference external" href="https://sdk.operatorframework.io/"&gt;operator SDK&lt;/a&gt; for the &lt;a class="reference external" href="https://changemetrics.io"&gt;Monocle&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;We used the opportunity of &lt;tt class="docutils literal"&gt;Monocle&lt;/tt&gt;, which is a quite simple project
in terms of architecture and workflows, to experiment with the k8s's
&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"&gt;operator pattern&lt;/a&gt; and the &lt;tt class="docutils literal"&gt;operator SDK&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We started that work based on limited knowledges about the k8s and
especially the Operator pattern, so this blog post also serves the
purpose of sharing our understanding from a novice perspective.&lt;/p&gt;
&lt;p&gt;We'll cover the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is a k8s Operator&lt;/li&gt;
&lt;li&gt;How to create the project skeleton&lt;/li&gt;
&lt;li&gt;Workflows related to the Monocle's operations&lt;/li&gt;
&lt;li&gt;Handling Monocle' workflows with the operator&lt;/li&gt;
&lt;li&gt;How to generate and deploy the operator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator&lt;/span&gt;&lt;/tt&gt; on this &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator/tree/813eb65df2da2249a5f2f0dd348ac4a3b6f11f0c"&gt;github project&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="what-is-a-k8s-operator-1"&gt;
&lt;span id="what-is-a-k8s-operator"&gt;&lt;/span&gt;&lt;h2&gt;What is a k8s Operator ?&lt;/h2&gt;
&lt;p&gt;An &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"&gt;Operator&lt;/a&gt; is a software capable of handling various operations
related to another software. The Operator handles operations usually
ensured by a SRE.&lt;/p&gt;
&lt;p&gt;Handled operations are such as (but not limited to):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;(Re-)Configuration&lt;/li&gt;
&lt;li&gt;Update&lt;/li&gt;
&lt;li&gt;Scaling&lt;/li&gt;
&lt;li&gt;Backup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Capabilities of an operator are split into &lt;a class="reference external" href="https://operatorframework.io/operator-capabilities/"&gt;phases&lt;/a&gt; as described in the
Operator framework documentation.&lt;/p&gt;
&lt;p&gt;To create an Operator a developer needs to well understand how to
operate the target software.&lt;/p&gt;
&lt;p&gt;A multitude of Operators for various softwares are already available
especially on &lt;a class="reference external" href="https://operatorhub.io"&gt;Operator Hub&lt;/a&gt; and &lt;a class="reference external" href="https://catalog.redhat.com/software/search?deployed_as=Operator"&gt;Red Hat Ecosystem Catalog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An Operator is designed to live inside a k8s or OpenShift cluster. The
operator uses k8s' resources (Deployment, ConfigMap, ...) to handle the
target software' operations. It manages at least one CR (&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/"&gt;Custom
Resource&lt;/a&gt;) that is defined by a CRD (&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions"&gt;Custom Resource Definition&lt;/a&gt;) and
controlled by a &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#custom-controllers"&gt;Custom Controller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A Custom Controller watches for CR instances and ensures that k8s'
resources needed by the CR' instances are spawned and fully functional.
The controller runs continuously and reacts to various events ensuring
the declared state of the software is maintained. This is called
&amp;quot;Reconciliation&amp;quot;.&lt;/p&gt;
&lt;p&gt;In this blog post we introduce an Operator for the Monocle software,
based on a Custom Resource and a Custom controller. The controller is
implemented in Go to benefit from well tested and documented libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-create-the-project-skeleton-1"&gt;
&lt;span id="how-to-create-the-project-skeleton"&gt;&lt;/span&gt;&lt;h2&gt;How to create the project skeleton ?&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://operatorframework.io/"&gt;Operator framework project&lt;/a&gt; provides a &lt;a class="reference external" href="https://sdk.operatorframework.io/"&gt;SDK&lt;/a&gt; to ease the
bootstrap and maintainance of an operator.&lt;/p&gt;
&lt;p&gt;First install the &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/installation/"&gt;GO operator SDK&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -OL https://github.com/operator-framework/operator-sdk/releases/download/v1.26.0/operator-sdk_linux_amd64
mkdir -p ~/.local/bin &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv operator-sdk_linux_amd64 ~/.local/bin/operator-sdk &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x ~/.local/bin/operator-sdk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://sdk.operatorframework.io/docs/cli/operator-sdk_init/"&gt;Initialise your repository&lt;/a&gt; using the &lt;tt class="docutils literal"&gt;init&lt;/tt&gt; sub command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir monocle-operator &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; monocle-operator
git init .
operator-sdk init --repo github.com/change-metrics/monocle-operator --owner &lt;span class="s2"&gt;&amp;quot;Monocle developers&amp;quot;&lt;/span&gt; --domain monocle.change-metrics.io
git diff
git add -A . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m&lt;span class="s2"&gt;&amp;quot;Init the operator&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/cli/operator-sdk_create_api/"&gt;add the new API&lt;/a&gt; (a CRD) and a controller for the new
&lt;tt class="docutils literal"&gt;Monocle&lt;/tt&gt; Custom Resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;operator-sdk create api --group monocle --version v1alpha1 --kind Monocle --resource --controller
git status
git diff
git add -A . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m&lt;span class="s2"&gt;&amp;quot;Add skeleton code for the Monocle CR&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the Operator handles more that one CR then run the previous command
with the new &lt;tt class="docutils literal"&gt;Kind&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The SDK for a &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/building-operators/golang/quickstart/"&gt;GO operator&lt;/a&gt; generates the project code structure
composed of various files and directories. Check the &lt;a class="reference external" href="https://master.sdk.operatorframework.io/docs/overview/project-layout/"&gt;layout details
here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can see that an Operator is, at least defined, by the following
resources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A &lt;a class="reference external" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime#hdr-Managers"&gt;manager&lt;/a&gt; and a set of &lt;a class="reference external" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime#hdr-Controllers"&gt;controllers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A set of &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions"&gt;CRDs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A container image capable of running the &lt;tt class="docutils literal"&gt;manager&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;A suite of YAML manifests to apply to the Kubernetes cluster to
deploy the operator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From there we are ready to write the Monocle Operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="workflows-related-to-the-monocle-s-operations"&gt;
&lt;h2&gt;Workflows related to the Monocle's operations&lt;/h2&gt;
&lt;p&gt;An operator handles various workflows for the targeted software. Thus,
as a first step we need to identify exactly what are those workflows and
what they involve.&lt;/p&gt;
&lt;p&gt;For our &lt;tt class="docutils literal"&gt;Phase 1&lt;/tt&gt; journey we'd like to handle the deployment and the
configuration of Monocle. It is important to have a minimum
understanding of the software we intent to create an operator for. Feel
free to read the &lt;a class="reference external" href="https://github.com/change-metrics/monocle#readme"&gt;Monocle's README file&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;A minimal Monocle deployment is composed of three services. The upstream
project provides a &lt;a class="reference external" href="https://github.com/change-metrics/monocle/blob/master/docker-compose.yml"&gt;Docker Compose file&lt;/a&gt; that we will replicate.&lt;/p&gt;
&lt;div class="section" id="the-database-elasticsearch"&gt;
&lt;h4&gt;The database (ElasticSearch)&lt;/h4&gt;
&lt;p&gt;Monocle needs to get access to an ElasticSearch instance:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The service needs a storage for its indices.&lt;/li&gt;
&lt;li&gt;We can use the upstream ElasticSearch container image.&lt;/li&gt;
&lt;li&gt;We can rely on the minimal and default settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-monocle-api-serve-the-api-and-the-web-ui"&gt;
&lt;h4&gt;The Monocle API (serve the API and the WEB UI)&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The upstream project provides a container image.&lt;/li&gt;
&lt;li&gt;The service is stateless.&lt;/li&gt;
&lt;li&gt;The service connects to the database.&lt;/li&gt;
&lt;li&gt;A configuration file is needed.&lt;/li&gt;
&lt;li&gt;Some environment variables must be exposed (especially for the
secrets).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-monocle-crawler"&gt;
&lt;h4&gt;The Monocle crawler&lt;/h4&gt;
&lt;p&gt;The crawler requires the same as the API, except that the service
connects to the API service (not to the database).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Here we need to determine how an User will interact with the Monocle
Operator in order to change the Monocle configuration.&lt;/p&gt;
&lt;div class="section" id="update-secrets"&gt;
&lt;h4&gt;Update secrets&lt;/h4&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/change-metrics/monocle#environment-variables"&gt;secrets&lt;/a&gt; hosts sensitive information used by the API and the
crawler processes (Code Review provider's API tokens, OpenID Token,
...). Any changes to the &lt;tt class="docutils literal"&gt;secrets&lt;/tt&gt; require an API and crawler
processes restart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-config-yaml"&gt;
&lt;span id="update-configyaml"&gt;&lt;/span&gt;&lt;h4&gt;Update config.yaml&lt;/h4&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/change-metrics/monocle#configuration-file"&gt;config file&lt;/a&gt; is used by the API and the crawler. Monocle is able
to detect changes in its configuration file and apply configuration
updates automatically.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;janitor &lt;span class="pre"&gt;update-idents&lt;/span&gt;&lt;/tt&gt; command must be run in case of updating
the &lt;tt class="docutils literal"&gt;config file&lt;/tt&gt; to &lt;a class="reference external" href="https://github.com/change-metrics/monocle#apply-idents-configuration"&gt;update identities&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="handling-monocle-s-workflows-with-the-operator"&gt;
&lt;h2&gt;Handling Monocle's workflows with the Operator&lt;/h2&gt;
&lt;p&gt;As we know better about workflows we need to implement inside our
Monocle controller we can start to implement it. We'll just explain some
code blocks.&lt;/p&gt;
&lt;p&gt;Feel free to refer to the &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator/blob/813eb65df2da2249a5f2f0dd348ac4a3b6f11f0c/controllers/monocle_controller.go"&gt;complete controller code&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-reconcile-loop"&gt;
&lt;h3&gt;The reconcile loop&lt;/h3&gt;
&lt;p&gt;The operator SDK generated an empty Monocle's &lt;tt class="docutils literal"&gt;Reconcile&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;This function aims to make the requested state (by applying the
&lt;tt class="docutils literal"&gt;Monocle&lt;/tt&gt; resource) to be the state into the cluster. When a
&lt;tt class="docutils literal"&gt;Monocle&lt;/tt&gt; resource is applied to the cluster we want to provide a
working Monocle deployment with the database, the api, and the crawler.&lt;/p&gt;
&lt;p&gt;Furthermore various attributes can be configured into the &lt;tt class="docutils literal"&gt;spec&lt;/tt&gt; (see
&lt;tt class="docutils literal"&gt;api/v1alpha1/monocle_types.go&lt;/tt&gt;&lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator/blob/813eb65df2da2249a5f2f0dd348ac4a3b6f11f0c/api/v1alpha1/monocle_types.go"&gt;monocle-types&lt;/a&gt;) via the CRD so we
need to get the instance's &lt;tt class="docutils literal"&gt;spec&lt;/tt&gt; to gather all information about the
expected state.&lt;/p&gt;
&lt;p&gt;The Monocle CRD is autogenerated from the &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator/blob/813eb65df2da2249a5f2f0dd348ac4a3b6f11f0c/api/v1alpha1/monocle_types.go"&gt;monocle go types&lt;/a&gt; by the SDK
(&lt;tt class="docutils literal"&gt;make manifests&lt;/tt&gt;). Here you can see the &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator/blob/813eb65df2da2249a5f2f0dd348ac4a3b6f11f0c/config/crd/bases/monocle.monocle.change-metrics.io_monocles.yaml"&gt;Monocle CRD&lt;/a&gt;. For Monocle,
we added only one field into the &lt;tt class="docutils literal"&gt;spec&lt;/tt&gt; to set up the
&lt;tt class="docutils literal"&gt;monoclePublicURL&lt;/tt&gt;. Any changes to the CRD must be done via the Go
types defintion.&lt;/p&gt;
&lt;p&gt;To do so we write the function in order to get the Monocle instance
Resource according to the &lt;a class="reference external" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime&amp;#64;v0.14.5/pkg/reconcile#Request"&gt;req&lt;/a&gt; content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;MonocleReconciler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Reconcile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FromContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;RequeueAfter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;stopReconcile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;monoclev1alpha1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Monocle&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Get the Monocle instance related to request&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NamespacedName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k8s_errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsNotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// Request object not found. Return and don&amp;#39;t requeue.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Instance object not found. Stop reconcile.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// Stop reconcile&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stopReconcile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Error reading the object - requeue the request.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to read the Monocle object. Reconcile continues ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Stop reconcile&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Found Monocle object.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stopReconcile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &lt;tt class="docutils literal"&gt;Reconcile&lt;/tt&gt; function is called every time an event occurs on a
Monocle instance such as by an apply or an update:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl apply -f config/samples/monocle_v1alpha1_monocle.yaml
$ kubectl edit Monocle monocle-sample
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;operator-sdk&lt;/span&gt; create api&lt;/tt&gt; created a default
&lt;tt class="docutils literal"&gt;config/samples/monocle_v1alpha1_monocle.yaml&lt;/tt&gt; file that we can use to
reclaim an instance of &lt;tt class="docutils literal"&gt;Monocle&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Based on that minimal &lt;tt class="docutils literal"&gt;Reconcile&lt;/tt&gt; function implementation we can
experiment:&lt;/p&gt;
&lt;p&gt;Start the manager in dev mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make run
&lt;span class="c1"&gt;# or&lt;/span&gt;
$ go run ./main.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In another terminal you can &lt;tt class="docutils literal"&gt;apply&lt;/tt&gt; the resource with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl apply -f config/samples/monocle_v1alpha1_monocle.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the &lt;tt class="docutils literal"&gt;Monocle's controller&lt;/tt&gt; should display and stop the reconcile
loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.6781911388888087e+09  INFO    controller-runtime.metrics      Metrics server is starting to listen    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;addr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
...
&lt;span class="m"&gt;1&lt;/span&gt;.6781911390910478e+09  INFO    Starting workers        &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerGroup&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle.monocle.change-metrics.io&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerKind&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;worker count&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;.6781911505580697e+09  INFO    Found Monocle object.   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerGroup&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle.monocle.change-metrics.io&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerKind&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;Monocle&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;monocle-sample&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;namespace&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;fbo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;namespace&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;fbo&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle-sample&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;reconcileID&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;580d1b93-e4d8-41ef-8996-817e198727ff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can observe that the &lt;tt class="docutils literal"&gt;controller&lt;/tt&gt; re-enters the reconcile loop
when we edit the Monocle instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Add a new label in metadata.labels and save.&lt;/span&gt;
$ kubectl edit monocle monocle-sample
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The return value of the reconcile function controls how the
&lt;tt class="docutils literal"&gt;controller&lt;/tt&gt; re-enter it. See &lt;a class="reference external" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime&amp;#64;v0.14.5/pkg/reconcile#Reconciler"&gt;details here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next steps are to handle the deployment of the services that compose a
Monocle deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-the-operator-starts-monocle-components"&gt;
&lt;h3&gt;How the operator starts Monocle' components&lt;/h3&gt;
&lt;p&gt;We'll only focus on the &lt;tt class="docutils literal"&gt;api&lt;/tt&gt; service in that section. Other services
are pretty similar except the database service that is deployed via the
&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/"&gt;StatefulSet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to refer to the &lt;a class="reference external" href="https://github.com/change-metrics/monocle-operator/blob/813eb65df2da2249a5f2f0dd348ac4a3b6f11f0c/controllers/monocle_controller.go"&gt;complete controller code&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-api-secret"&gt;
&lt;h4&gt;The API secret&lt;/h4&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Monocle&lt;/tt&gt; API service needs to access some secrets data. Here we
use the &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/secret/"&gt;Secret&lt;/a&gt; resource to store this data.&lt;/p&gt;
&lt;p&gt;The Monocle's controller needs to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check if the secret exist&lt;/li&gt;
&lt;li&gt;Create the secret resource if it does not exist&lt;/li&gt;
&lt;li&gt;Continue if it exists&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;secret&lt;/tt&gt; is identified by its name and as a good practice
Resource's names must be unique in a single &lt;tt class="docutils literal"&gt;namespace&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Here is how we handle the &lt;tt class="docutils literal"&gt;secret&lt;/tt&gt; resource (&lt;a class="reference external" href="https://pkg.go.dev/k8s.io/api/core/v1#Secret"&gt;type&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;////////////////////////////////////////////////////////&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//       Handle the Monocle API Secret Instance       //&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;////////////////////////////////////////////////////////&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// This secret contains environment variables required by the&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// API and/or crawlers. The CRAWLERS_API_KEY entry is&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// mandatory for crawlers to authenticate against the API.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// preprend the resource name with the instance name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiSecretName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resourceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// initialize a mapping with a random crawler&amp;#39;s api key&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiSecretData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CRAWLERS_API_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randstr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// create the secret instance with required metadata for the lookup&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiSecret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Secret&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;apiSecretName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// get the secret resource by name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectKey&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k8s_errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsNotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// The resource does not exist yet. Let&amp;#39;s create it.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Set secret data&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;apiSecret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretData&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Add an owner reference (Monocle instance) on the secret resource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl_util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetControllerReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to set controller reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Create the secret&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Creating secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiSecret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to create secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Handle the unexpected err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to get resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Eventually handle resource update&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Resource fetched successfuly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Get the resource version - to be used later ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiSecretsVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResourceVersion&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apiSecret resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretsVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, we check for the secret state and perform actions
according to the state. We use the &lt;a class="reference external" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/client"&gt;Client&lt;/a&gt; exposed through the
&lt;tt class="docutils literal"&gt;MonocleReconciler&lt;/tt&gt; interface to perform CRUD actions.&lt;/p&gt;
&lt;p&gt;This is a common pattern that we'll use for other resources managed by
the controller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-api-config"&gt;
&lt;h4&gt;The API config&lt;/h4&gt;
&lt;p&gt;The
&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/configmap/"&gt;ConfigMap&lt;/a&gt;(&lt;a class="reference external" href="https://pkg.go.dev/k8s.io/api/core/v1#ConfigMap"&gt;type&lt;/a&gt;)
are pretty similar regarding their API so the implementation is
equivalent as for the &lt;tt class="docutils literal"&gt;secret&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;////////////////////////////////////////////////////////&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//     Handle the Monocle API ConfigMap Instance      //&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;////////////////////////////////////////////////////////&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// preprend the resource name with the instance name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resourceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// initialize a mapping with the default config file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiConfigMapData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;config.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;`&lt;/span&gt;
&lt;span class="s"&gt;workspaces:&lt;/span&gt;
&lt;span class="s"&gt;  - name: demo&lt;/span&gt;
&lt;span class="s"&gt;    crawlers: []&lt;/span&gt;
&lt;span class="s"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// create the config-map instance with required metadata for the lookup&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiConfigMap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConfigMap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// get the configmap resource by name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectKey&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiConfigMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k8s_errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsNotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// The resource does not exist yet. Let&amp;#39;s create it.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapData&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Add an owner reference (Monocle instance) on the configmap resource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl_util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetControllerReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiConfigMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to set controller reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Create the configMap&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Creating ConfigMap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiConfigMap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to create configMap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Handle the unexpected err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to get resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Eventually handle resource update&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Resource fetched successfuly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Get the resource version - to be used later ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiConfigVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResourceVersion&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apiConfig resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For all resources created by the Monocle &lt;tt class="docutils literal"&gt;controller&lt;/tt&gt; we set an
&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/"&gt;OwnerReference&lt;/a&gt;. This ensures that when we delete the CR instance then
all dependents resources are also deleted. It serves also to the
&lt;tt class="docutils literal"&gt;manager&lt;/tt&gt; to call the reconcile function when a dependent resource is
updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-api-deployment"&gt;
&lt;h4&gt;The API deployment&lt;/h4&gt;
&lt;p&gt;To run the API service we use the &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"&gt;Deployment
resource&lt;/a&gt;(&lt;a class="reference external" href="https://pkg.go.dev/k8s.io/api&amp;#64;v0.26.2/apps/v1#Deployment"&gt;type&lt;/a&gt;)
and in front of it we configure a
&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;Service&lt;/a&gt;(&lt;a class="reference external" href="https://pkg.go.dev/k8s.io/api/core/v1#Service"&gt;type&lt;/a&gt;)
resource.&lt;/p&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt; manages a set of &lt;tt class="docutils literal"&gt;Pods&lt;/tt&gt; according to rules and
workflows implemented in the &lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt;'s controller.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Pods&lt;/tt&gt; can be spawned on different cluster's nodes, in which the node
will assign an IP address to each container within a pod. To tackle this
dynamic address assiging &lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; resource is needed on top of a
&lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Let's start by creating the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;api-service&lt;/span&gt;&lt;/tt&gt; resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Handle service for api //&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;////////////////////////////&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// The monocle API listen to 8080/TCP&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiPort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// MatchLabels shared between the service and the deployment&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiMatchLabels&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;monocle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tier&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Service resource name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiServiceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resourceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Instanciate a Service object for the lookup&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;apiServiceName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Get the service by name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectKey&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiServiceName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k8s_errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsNotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Resource is not found&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Define the Service resource to create&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;apiService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServiceSpec&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServicePort&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;resourceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api-port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProtocolTCP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;Port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nb"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiPort&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// The labels used to discover deployment&amp;#39; Pods&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiMatchLabels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Add an owner reference (Monocle instance) on the service resource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl_util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetControllerReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to set controller reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiServiceName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Creating Service&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiServiceName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Create the resource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiService&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to create service&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Handle the unexpected err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to get resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiServiceName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Eventually handle resource update&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Resource fetched successfuly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiServiceName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let's see how the Monocle API is deployed. It leverages the
&lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt; resource to start a &lt;tt class="docutils literal"&gt;Pod&lt;/tt&gt; containing one &lt;tt class="docutils literal"&gt;Monocle&lt;/tt&gt;
container based on the upstream container image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Handle API deployment //&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;///////////////////////////&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Service resource name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resourceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;appsv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deployment&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;apiReplicasCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// We read the Monocle Public URL value passed via the CRD&amp;#39;s spec&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;monoclePublicURL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:8090&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MonoclePublicURL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;monoclePublicURL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MonoclePublicURL&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Monocle public URL set to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;monoclePublicURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Get the deployment by name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectKey&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k8s_errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsNotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Setup the deployment object&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapVolumeName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resourceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api-cm-volume&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Once created Deployment selector is immutable&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Selector&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LabelSelector&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// Enable relation between Pod, Deployment and Service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;MatchLabels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiMatchLabels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Set replicas count&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Replicas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiReplicasCount&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Set the Deployment annotations&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Annotations&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// Here we set the Resource version of the Monocle ConfigMap&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apiConfigVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Set the Deployment pod template&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PodTemplateSpec&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// Enable relation between Pod, Deployment and Service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiMatchLabels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// Here we set the Resource version of the Monocle secrets&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// Any update on the Template (here the annotation) starts a rollout&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apiSecretsVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretsVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PodSpec&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;RestartPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RestartPolicyAlways&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;resourceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api-pod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;quay.io/change-metrics/monocle:1.8.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;monocle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// This exposes the Secret as environment variables into the running container&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;EnvFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EnvFromSource&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;SecretRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SecretEnvSource&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="nx"&gt;LocalObjectReference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LocalObjectReference&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// An additional environment variable&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EnvVar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nx"&gt;elasticUrlEnvVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MONOCLE_PUBLIC_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;monoclePublicURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// We defines ports exposed by the container&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;Ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ContainerPort&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;ContainerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiPort&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// Define the live test probe&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// The Monocle API exposes the &amp;#39;/health&amp;#39; endpoint&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;LivenessProbe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nx"&gt;ProbeHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProbeHandler&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;HTTPGet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTPGetAction&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/health&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="nx"&gt;Port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;intstr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FromInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiPort&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nx"&gt;TimeoutSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nx"&gt;FailureThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// A Volume device is exposed to the container&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// We mount it into /etc/monocle. It contains the Monocle config file.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;VolumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VolumeMount&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapVolumeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;ReadOnly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;MountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/etc/monocle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// Expose a Volume device to the Pod&amp;#39; containers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// The Volume is the API ConfigMap that we expose as a volume.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Volume&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapVolumeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;VolumeSource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VolumeSource&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nx"&gt;ConfigMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConfigMapVolumeSource&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;LocalObjectReference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LocalObjectReference&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Add an owner reference (Monocle instance) on the deployment resource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl_util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetControllerReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to set controller reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Creating Deployment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Create the resource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to create deployment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Handle the unexpected err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to get resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Eventually handle resource update&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Resource fetched successfuly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some key points that are important here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt; ensures that we always have a working &lt;tt class="docutils literal"&gt;Pod&lt;/tt&gt; that
serves the Monocle API.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"&gt;liveness probe&lt;/a&gt; is used by the &lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt; to ensure the
Monocle API is ready. The &lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt;'s status is based on the
probe's status.&lt;/li&gt;
&lt;li&gt;We expose the configuration file from a &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/configmap/"&gt;ConfigMap&lt;/a&gt; using a
&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#add-configmap-data-to-a-volume"&gt;volume&lt;/a&gt;. When the &lt;tt class="docutils literal"&gt;configMap&lt;/tt&gt;'s data is updated, the exposed
files as volume's mount are automatically updated.&lt;/li&gt;
&lt;li&gt;We expose the &lt;tt class="docutils literal"&gt;Secret&lt;/tt&gt; resource containing Monocle' secrets &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables"&gt;as
environment variables&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assuming that others Monocle' services are set up in the controller we
can inspect &lt;tt class="docutils literal"&gt;Resources&lt;/tt&gt; spawned by the &lt;tt class="docutils literal"&gt;controller&lt;/tt&gt; when we reclaim
a &lt;tt class="docutils literal"&gt;Monocle&lt;/tt&gt; resource.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat config/samples/monocle_v1alpha1_monocle-alt.yaml
apiVersion: monocle.monocle.change-metrics.io/v1alpha1
kind: Monocle
metadata:
  labels:    app.kubernetes.io/name: monocle
    app.kubernetes.io/instance: monocle-sample
    app.kubernetes.io/part-of: monocle-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: monocle-operator
  name: monocle-samplespec:
  monoclePublicURL: &lt;span class="s2"&gt;&amp;quot;http://localhost:8090&amp;quot;&lt;/span&gt;
$ kubectl apply -f config/samples/monocle_v1alpha1_monocle-alt.yaml
$ kubectl get statefulset,deployment,replicaset,service,configmap,secret
NAME                                      READY   AGE
statefulset.apps/monocle-sample-elastic   &lt;span class="m"&gt;1&lt;/span&gt;/1     15s

NAME                                     READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/monocle-sample-api       &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           15s
deployment.apps/monocle-sample-crawler   &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           15s

NAME                                                DESIRED   CURRENT   READY   AGE
replicaset.apps/monocle-sample-api-8cd74454f        &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;       15s
replicaset.apps/monocle-sample-crawler-7fc7f659b7   &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;       15s

NAME                             TYPE        CLUSTER-IP     EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;    AGE
service/monocle-sample-api       ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.96.36.244   &amp;lt;none&amp;gt;        &lt;span class="m"&gt;8080&lt;/span&gt;/TCP   15s
service/monocle-sample-elastic   ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.96.68.155   &amp;lt;none&amp;gt;        &lt;span class="m"&gt;9200&lt;/span&gt;/TCP   15s

NAME                           DATA   AGE
configmap/kube-root-ca.crt     &lt;span class="m"&gt;1&lt;/span&gt;      21h
configmap/monocle-sample-api   &lt;span class="m"&gt;1&lt;/span&gt;      15s

NAME                        TYPE     DATA   AGE
secret/monocle-sample-api   Opaque   &lt;span class="m"&gt;1&lt;/span&gt;      15s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Accessing the Monocle WEB UI access served by the API can be locally
done using a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;port-forward&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl port-forward service/monocle-sample-api &lt;span class="m"&gt;8090&lt;/span&gt;:8080
$ firefox http://localhost:8090
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-the-operator-handles-monocle-reconfigurations"&gt;
&lt;h3&gt;How the operator handles Monocle' reconfigurations&lt;/h3&gt;
&lt;p&gt;Now let's see how we handled the (re-)configuration workflow.&lt;/p&gt;
&lt;p&gt;As &lt;a class="reference external" href="#configuration"&gt;described previously&lt;/a&gt; we need to handle:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A change to the Monocle secrets (stored in a &lt;tt class="docutils literal"&gt;Secret&lt;/tt&gt; resource)
restarts the API and the Crawler &lt;tt class="docutils literal"&gt;Pods&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;A change to the Monocle config file (stored in a &lt;tt class="docutils literal"&gt;ConfigMap&lt;/tt&gt;
resource) triggers the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;update-idents&lt;/span&gt;&lt;/tt&gt; CLI command.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="handling-secret-changes"&gt;
&lt;h4&gt;Handling Secret changes&lt;/h4&gt;
&lt;p&gt;API and Crawler processes are handled by the &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"&gt;Deployment Resource&lt;/a&gt;.
This resource's controller handles a &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment"&gt;rollout&lt;/a&gt; workflow when the
&lt;tt class="docutils literal"&gt;podSpec&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;Image&lt;/tt&gt; field or the &lt;tt class="docutils literal"&gt;podTemplateSpec&lt;/tt&gt;'s annotations
are updated. A &lt;tt class="docutils literal"&gt;rollout&lt;/tt&gt; restarts &lt;tt class="docutils literal"&gt;Pods&lt;/tt&gt; in safe manner according to
the configured rollout strategy.&lt;/p&gt;
&lt;p&gt;To ensure that API and Crawlers containers are restarted when the
Monocle's administrator changes the secrets we use an annotation (we
only focus on the API, the same applies for the Crawler's Deployment):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// else case (an API Deployment resource exists) of the API deployment part&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Eventually handle resource update&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Resource fetched successfuly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// We call the rollOutWhenApiSecretsChange function&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rollOutWhenApiSecretsChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretsVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to update spec deployment annotations&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;MonocleReconciler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rollOutWhenApiSecretsChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;depl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;appsv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deployment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretsVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;previousSecretsVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;depl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Annotations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apiSecretsVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;previousSecretsVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretsVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Start a rollout due to secrets update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;depl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;previous secrets version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;previousSecretsVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;new secrets version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretsVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;depl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Annotations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apiSecretsVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiSecretsVersion&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;depl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At &lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt; creation we set an annotation called:
&lt;tt class="docutils literal"&gt;apiSecretsVersion&lt;/tt&gt;, and every time the &lt;tt class="docutils literal"&gt;Reconcile&lt;/tt&gt; function is
called the &lt;tt class="docutils literal"&gt;rollOutWhenApiSecretsChange&lt;/tt&gt; function checks if the
resource version changed. In the case of a change (meaning that the
administrator changed one of the Monocle's secrets) we do an &lt;tt class="docutils literal"&gt;Update&lt;/tt&gt;
of the annotation and store the new &lt;tt class="docutils literal"&gt;apiSecretsVersion&lt;/tt&gt; value.&lt;/p&gt;
&lt;p&gt;This triggers the &lt;tt class="docutils literal"&gt;Deployments&lt;/tt&gt; rollout process, where the current
containers in a &lt;tt class="docutils literal"&gt;Pod&lt;/tt&gt; are terminated and the new ones are created. In
this case with the &lt;tt class="docutils literal"&gt;apiSecretsVersion&lt;/tt&gt; annotation value updated.&lt;/p&gt;
&lt;p&gt;This can be observed by editing secrets to add a new one, then ensuring
pods are re-spawned and that the new secret is available in the &lt;tt class="docutils literal"&gt;env&lt;/tt&gt;
of the pod's container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A secret value must be encoded as base64&lt;/span&gt;
$ kubectl edit secrets monocle-sample-api
$ kubectl get pods
$ kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; -it monocle-sample-api-c75dcc789-gmwwm -- env &lt;span class="p"&gt;|&lt;/span&gt; grep -i &amp;lt;new-secret&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To configure the controller to call the &lt;tt class="docutils literal"&gt;Reconcile&lt;/tt&gt; function when a
dependent resource is changed, we need to sets up the &lt;a class="reference external" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime#hdr-Managers"&gt;Manager&lt;/a&gt; this
way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// SetupWithManager sets up the controller with the Manager.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;MonocleReconciler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SetupWithManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mgr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewControllerManagedBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mgr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;monoclev1alpha1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Monocle&lt;/span&gt;&lt;span class="p"&gt;{}).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Owns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;appsv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deployment&lt;/span&gt;&lt;span class="p"&gt;{}).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Owns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConfigMap&lt;/span&gt;&lt;span class="p"&gt;{}).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Owns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Secret&lt;/span&gt;&lt;span class="p"&gt;{}).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Owns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;appsv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatefulSet&lt;/span&gt;&lt;span class="p"&gt;{}).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Owns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;{}).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/builder#Builder.Owns"&gt;Owns&lt;/a&gt; coupled to the &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/"&gt;owner references&lt;/a&gt; ensure that the
&lt;tt class="docutils literal"&gt;Reconcile&lt;/tt&gt; function is called when a dependent resource is updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="handling-config-changes"&gt;
&lt;h4&gt;Handling Config changes&lt;/h4&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;ConfigMap&lt;/tt&gt; that stores the Monocle's config &lt;tt class="docutils literal"&gt;config.yaml&lt;/tt&gt; is
exposed as a &lt;tt class="docutils literal"&gt;Volume Mount&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;/etc/monocle&lt;/tt&gt; and Monocle knows how
to reload itself when its file is changed.&lt;/p&gt;
&lt;p&gt;However we still need to detect updates on the &lt;tt class="docutils literal"&gt;ConfigMap&lt;/tt&gt; and start a
Monocle's CLI command to &lt;a class="reference external" href="https://github.com/change-metrics/monocle#apply-idents-configuration"&gt;update idents&lt;/a&gt;. To do that we use a &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/job/"&gt;Job&lt;/a&gt;
Resource (&lt;a class="reference external" href="https://pkg.go.dev/k8s.io/api/batch/v1#Job"&gt;type&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Job&lt;/tt&gt; starts a &lt;tt class="docutils literal"&gt;Pod&lt;/tt&gt; and reports execution status of the
container's command.&lt;/p&gt;
&lt;p&gt;Similarly to the Monocle secrets, we store, in an annotation
(&lt;tt class="docutils literal"&gt;apiConfigVersion&lt;/tt&gt;) on the API &lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt; resource, the
&lt;tt class="docutils literal"&gt;ResourceVersion&lt;/tt&gt; of the &lt;tt class="docutils literal"&gt;ConfigMap&lt;/tt&gt; and by checking for a version
change we can create a &lt;tt class="docutils literal"&gt;Job&lt;/tt&gt; resource and trigger the CLI command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// else case (an API Deployment resource exists) of the API deployment part&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Eventually handle resource update&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Resource fetched successfuly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeploymentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Check if Deployment Pod Annotation for ConfigMap resource version was updated&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;previousVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Annotations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apiConfigVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;previousVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Start the update-idents jobs because of api configMap update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;previous configmap version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;previousVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;new configmap version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Annotations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apiConfigVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigVersion&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Update Deployment Resource to set the new configMap resource version&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiDeployment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Trigger the job&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;triggerUpdateIdentsJob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;elasticUrlEnvVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to trigger update-idents&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;reconcileLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;triggerUpdateIdentsJob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;MonocleReconciler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;monoclev1alpha1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Monocle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;elasticUrlEnvVar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EnvVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;jobname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;update-idents-job&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;batchv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;jobname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Checking if there is a Job Resource by Name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectKey&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;jobname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Delete it if there is an old job resource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DeletePropagationBackground&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DeleteOptions&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PropagationPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;fg&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapVolumeName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;api-cm-volume&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ttlSecondsAfterFinished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;jobToCreate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;batchv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;jobname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;batchv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JobSpec&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// We ensure that Jobs objects are garbaged collected after 1 hour&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;TTLSecondsAfterFinished&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ttlSecondsAfterFinished&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PodTemplateSpec&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PodSpec&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// We don&amp;#39;t want to restart the job if it fails&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;RestartPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Never&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;Containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;jobname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;quay.io/change-metrics/monocle:1.8.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;monocle janitor update-idents --elastic ${MONOCLE_ELASTIC_URL} --config /etc/monocle/config.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EnvVar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="nx"&gt;elasticUrlEnvVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;VolumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VolumeMount&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapVolumeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="nx"&gt;ReadOnly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="nx"&gt;MountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/etc/monocle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nx"&gt;Volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Volume&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapVolumeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;VolumeSource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VolumeSource&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="nx"&gt;ConfigMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConfigMapVolumeSource&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="nx"&gt;LocalObjectReference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corev1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LocalObjectReference&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                        &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConfigMapName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ctrl_util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetControllerReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;jobToCreate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to set controller reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;jobname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;jobToCreate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Key points here are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We first check for an existing job (with the same name) and delete it
if exists. This ensures that we only run one job at a time.&lt;/li&gt;
&lt;li&gt;We set a &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#ttl-mechanism-for-finished-jobs"&gt;job TTL&lt;/a&gt; to ensure that the Job Resource and its
decendents are deleted to avoid leftovers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To observe that behavior, just edit the &lt;tt class="docutils literal"&gt;config.yaml&lt;/tt&gt; key of the
&lt;tt class="docutils literal"&gt;ConfigMap&lt;/tt&gt; to define a crawler's config in the &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; &lt;tt class="docutils literal"&gt;workspace&lt;/tt&gt;
and see the job's logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get &lt;span class="nb"&gt;jobs&lt;/span&gt;
NAME                COMPLETIONS   DURATION   AGE
update-idents-job   &lt;span class="m"&gt;1&lt;/span&gt;/1           6s         21s
$ kubectl get pods
NAME                                      READY   STATUS      RESTARTS   AGE
monocle-sample-api-c75dcc789-gmwwm        &lt;span class="m"&gt;1&lt;/span&gt;/1     Running     &lt;span class="m"&gt;0&lt;/span&gt;          163m
monocle-sample-crawler-867888fb8c-95jgt   &lt;span class="m"&gt;1&lt;/span&gt;/1     Running     &lt;span class="m"&gt;0&lt;/span&gt;          163m
monocle-sample-elastic-0                  &lt;span class="m"&gt;1&lt;/span&gt;/1     Running     &lt;span class="m"&gt;0&lt;/span&gt;          3h1m
update-idents-job-t7vgh                   &lt;span class="m"&gt;0&lt;/span&gt;/1     Completed   &lt;span class="m"&gt;0&lt;/span&gt;          9s
$ kubectl logs update-idents-job-t7vgh
&lt;span class="m"&gt;2023&lt;/span&gt;-03-08 &lt;span class="m"&gt;13&lt;/span&gt;:57:52 INFO    Monocle.Backend.Janitor:48: Janitor will process changes and event &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;workspace&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;changes&amp;quot;&lt;/span&gt;:285,&lt;span class="s2"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;:8670&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;2023&lt;/span&gt;-03-08 &lt;span class="m"&gt;13&lt;/span&gt;:57:52 INFO    Monocle.Backend.Janitor:50: Updated changes &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;count&amp;quot;&lt;/span&gt;:0&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;2023&lt;/span&gt;-03-08 &lt;span class="m"&gt;13&lt;/span&gt;:57:52 INFO    Monocle.Backend.Janitor:52: Updated events &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;count&amp;quot;&lt;/span&gt;:0&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;2023&lt;/span&gt;-03-08 &lt;span class="m"&gt;13&lt;/span&gt;:57:52 INFO    Monocle.Backend.Janitor:54: Author cache re-populated with entries &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;count&amp;quot;&lt;/span&gt;:60&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-generate-and-deploy-the-operator"&gt;
&lt;h2&gt;How to generate and deploy the operator&lt;/h2&gt;
&lt;p&gt;The Monocle project publishes and maintains the &lt;a class="reference external" href="https://quay.io/repository/change-metrics/monocle-operator"&gt;operator image&lt;/a&gt; in his
quay.io organisation and provides in the &lt;tt class="docutils literal"&gt;install&lt;/tt&gt; directory two yaml
files to install:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the CRDs: &lt;tt class="docutils literal"&gt;crd.yml&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;the required Resources defintion to install the operator:
&lt;tt class="docutils literal"&gt;operator.yml&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The installation is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl apply -f install/crds.yml
$ kubectl apply -f install/operator.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both commands, above, require the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cluster-admin&lt;/span&gt;&lt;/tt&gt; role.&lt;/p&gt;
&lt;p&gt;The operator is installed into a dedicated namespace
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator-system&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;operator.yml&lt;/tt&gt; takes care of creating:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the operator's &lt;strong&gt;Namespace&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator-system&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;Service Account&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator-controller-manager&lt;/span&gt;&lt;/tt&gt; into
the namespace&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;ClusterRole&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator-manager-role&lt;/span&gt;&lt;/tt&gt;. This role
defines &lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole"&gt;authorizations&lt;/a&gt; needed by the &lt;tt class="docutils literal"&gt;controller&lt;/tt&gt; to act on the
cluster's API. Authorizations are handled by the operator SDK through
the &lt;a class="reference external" href="https://book.kubebuilder.io/reference/markers/rbac.html"&gt;kubebuilder markers system&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;ClusterRole&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator-monocle-editor-role&lt;/span&gt;&lt;/tt&gt; which
can be assigned to a User to give authorisation to manipulate Monocle
instances (CR).&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;ClusterRoleBinding&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator-manager-rolebinding&lt;/span&gt;&lt;/tt&gt;
that allows the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator-controller-manager&lt;/span&gt;&lt;/tt&gt; Service
Account to act upon the resources.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;Deployment&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator-controller-manager&lt;/span&gt;&lt;/tt&gt; which runs
the operator's image.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see if the deployment is successful by running the following
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl -n monocle-operator-system get all
NAME                                                      READY   STATUS    RESTARTS   AGE
pod/monocle-operator-controller-manager-b999fdcc8-cxjkn   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          32s

NAME                                                  READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/monocle-operator-controller-manager   &lt;span class="m"&gt;1&lt;/span&gt;/1     &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;           32s

NAME                                                            DESIRED   CURRENT   READY   AGE
replicaset.apps/monocle-operator-controller-manager-b999fdcc8   &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;       32s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and verify logs of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;monocle-operator-controller-manager&lt;/span&gt;&lt;/tt&gt; pod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl -n monocle-operator-system logs deployment.apps/monocle-operator-controller-manager
...
&lt;span class="m"&gt;1&lt;/span&gt;.6784568095333292e+09  INFO    Starting EventSource    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerGroup&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle.monocle.change-metrics.io&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerKind&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;kind source: *v1.StatefulSet&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;.678456809533342e+09   INFO    Starting EventSource    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerGroup&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle.monocle.change-metrics.io&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerKind&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;kind source: *v1.Service&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;.6784568095333524e+09  INFO    Starting Controller     &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerGroup&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle.monocle.change-metrics.io&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerKind&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Monocle&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;.678456809634908e+09   INFO    Starting workers        &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerGroup&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monocle.monocle.change-metrics.io&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;controllerKind&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Monocle&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;worker count&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="how-to-start-a-monocle-instance"&gt;
&lt;h3&gt;How to start a Monocle instance&lt;/h3&gt;
&lt;p&gt;A Monocle instance can be reclaimed to the operator by applying the
&lt;tt class="docutils literal"&gt;Sample&lt;/tt&gt; resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl apply -f config/samples/monocle_v1alpha1_monocle-alt.yaml
$ kubectl get monocle monocle-sample -o yaml
apiVersion: monocle.monocle.change-metrics.io/v1alpha1
kind: Monocle
metadata:
  creationTimestamp: &lt;span class="s2"&gt;&amp;quot;2023-03-10T14:20:24Z&amp;quot;&lt;/span&gt;
  generation: &lt;span class="m"&gt;1&lt;/span&gt;
  labels:
    app.kubernetes.io/created-by: monocle-operator
    app.kubernetes.io/instance: monocle-sample
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: monocle
    app.kubernetes.io/part-of: monocle-operator
  name: monocle-sample
  namespace: dev-admin
  resourceVersion: &lt;span class="s2"&gt;&amp;quot;326755&amp;quot;&lt;/span&gt;
  uid: 4b72edc4-1192-4369-9348-2a669ae4d65d
spec:
  monoclePublicURL: http://localhost:8090
status:
  monocle-api: Ready
  monocle-crawler: Ready
  monocle-elastic: Ready
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-generate-the-operator"&gt;
&lt;h3&gt;How to generate the operator&lt;/h3&gt;
&lt;p&gt;The operator is composed of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the operator container image&lt;/li&gt;
&lt;li&gt;some Kubernetes Resources to enable its installation into a cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The operator SDK provides the tooling to generate the operator image via
the Makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make docker-build
$ &lt;span class="c1"&gt;# or&lt;/span&gt;
$ make container-build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generated image can be found locally and then can be pushed to the
image registry via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make docker-push
$ &lt;span class="c1"&gt;# or&lt;/span&gt;
$ make container-push
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Monocle we have created an additional &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# Generate the install/operator.yml and install/crds.yml&lt;/span&gt;
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;-&lt;span class="n"&gt;operator&lt;/span&gt;-&lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="nf"&gt;gen-operator-install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;manifests&lt;/span&gt; &lt;span class="n"&gt;kustomize&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; config/manager &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;KUSTOMIZE&lt;span class="k"&gt;)&lt;/span&gt; edit &lt;span class="nb"&gt;set&lt;/span&gt; image &lt;span class="nv"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;IMG&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;KUSTOMIZE&lt;span class="k"&gt;)&lt;/span&gt; build config/operator &amp;gt; install/operator.yml
    &lt;span class="k"&gt;$(&lt;/span&gt;KUSTOMIZE&lt;span class="k"&gt;)&lt;/span&gt; build config/crd &amp;gt; install/crds.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This generates two &lt;tt class="docutils literal"&gt;manifests&lt;/tt&gt; files needed to install the Monocle
operator by relying on the &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/"&gt;kustomize&lt;/a&gt; tool and provisionned (by the
operator SDK) configs stored into &lt;tt class="docutils literal"&gt;/config&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="to-conclude"&gt;
&lt;h2&gt;To conclude&lt;/h2&gt;
&lt;p&gt;It was our first attempt working with Kubernetes Operators, at first we
were astonished with the quantity of information and tools there are to
start developing an Operator like &lt;a class="reference external" href="https://kubebuilder.io/"&gt;kubebuiler&lt;/a&gt; and &lt;a class="reference external" href="https://sdk.operatorframework.io/"&gt;operator SDK&lt;/a&gt;.
Then deciding which stack to use for the operator's development &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/building-operators/helm/tutorial/"&gt;helm&lt;/a&gt;,
&lt;a class="reference external" href="https://sdk.operatorframework.io/docs/building-operators/ansible/tutorial/"&gt;ansible&lt;/a&gt; or &lt;a class="reference external" href="https://sdk.operatorframework.io/docs/building-operators/golang/tutorial/"&gt;go&lt;/a&gt;, and at the same time learning new things and
finding out how Kubernetes works in more detail every day.&lt;/p&gt;
&lt;p&gt;It was a great and challenging oportunity to learn this big new world of
Kubernetes, and we hope to have made the right choices for the
continuity of Monocle Operator.&lt;/p&gt;
&lt;p&gt;Stay tuned for the next posts, where we will continue in this exciting
new world of Operators. Fell free to talk to us.&lt;/p&gt;
&lt;p&gt;Thank you hanging with us.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Feb 10 to Mar 01 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-feb-10-to-mar-01-summary.html" rel="alternate"></link><published>2023-03-01T10:00:00+00:00</published><updated>2023-03-01T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-03-01:/sprint-2023-feb-10-to-mar-01-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="sf-release-sf-3-8"&gt;
&lt;h3&gt;sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We handled various sub-releases of SF 3.8 and finally announced the release &lt;a class="reference external" href="https://www.softwarefactory-project.io/releases/3.8/"&gt;https://www.softwarefactory-project.io/releases/3.8/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-operator-sf-4-0"&gt;
&lt;h3&gt;sf operator (sf-4.0)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated SF Operator containers to mirror the SF …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="sf-release-sf-3-8"&gt;
&lt;h3&gt;sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We handled various sub-releases of SF 3.8 and finally announced the release &lt;a class="reference external" href="https://www.softwarefactory-project.io/releases/3.8/"&gt;https://www.softwarefactory-project.io/releases/3.8/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-operator-sf-4-0"&gt;
&lt;h3&gt;sf operator (sf-4.0)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated SF Operator containers to mirror the SF 3.8 release&lt;/li&gt;
&lt;li&gt;We created a spec for sf-operator MVP&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Hacking Zuul for developers - Running unit tests</title><link href="https://www.softwarefactory-project.io/hacking-zuul-for-developers-running-unit-tests.html" rel="alternate"></link><published>2023-02-09T00:00:00+00:00</published><updated>2023-02-09T00:00:00+00:00</updated><author><name>Matthieu Huin</name></author><id>tag:www.softwarefactory-project.io,2023-02-09:/hacking-zuul-for-developers-running-unit-tests.html</id><summary type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This article was updated on Dec. 11, 2023 to change the suggested version of the Ubuntu VM.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This article is a followup on my previous post about &lt;a class="reference external" href="https://www.softwarefactory-project.io/hacking-zuul-for-developers.html"&gt;playing around with Zuul's source code&lt;/a&gt; .
Here I will explain how to set up an environment where you can run Zuul's unit …&lt;/p&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This article was updated on Dec. 11, 2023 to change the suggested version of the Ubuntu VM.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This article is a followup on my previous post about &lt;a class="reference external" href="https://www.softwarefactory-project.io/hacking-zuul-for-developers.html"&gt;playing around with Zuul's source code&lt;/a&gt; .
Here I will explain how to set up an environment where you can run Zuul's unit tests suite.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;The simplest way to set up this environment is to use a VM running Ubuntu 23.04 Server LTS or
above; or any OS where python 3.11+ is the default python interpreter.&lt;/p&gt;
&lt;p&gt;I will assume you have a way to spawn one such system, whether as a VM or something else,
and that you have it configured in a way that you can SSH into it, and become root on it.&lt;/p&gt;
&lt;p&gt;I strongly advise you to deploy the &amp;quot;beefiest&amp;quot; server you can, with the amount of CPUs being
the most impactful parameter in terms of performances. As a point of reference, I am using
a VM with 8GB of RAM and 4 vCPUs, and I run the full test suite in slightly over 2 hours.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-basic-tools"&gt;
&lt;h2&gt;Install basic tools&lt;/h2&gt;
&lt;p&gt;We're going to need a few things like git, pip and docker-compose to get everything up and running.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt -y install git python3-pip docker docker-compose
&lt;/pre&gt;
&lt;p&gt;Once we have pip, we'll use it to install &lt;a class="reference external" href="https://docs.opendev.org/opendev/bindep/latest/"&gt;bindep&lt;/a&gt;
to figure out which dependencies are needed to run the tests, and &lt;a class="reference external" href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt;
to actually run the test suite.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo pip install nox bindep
&lt;/pre&gt;
&lt;p&gt;Note that I am setting up a VM so I am not too worried about messing up with the OS, but you might want
to install these in user space rather than as root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fetch-the-zuul-repo-and-install-test-dependencies"&gt;
&lt;h2&gt;Fetch the zuul repo and install test dependencies&lt;/h2&gt;
&lt;p&gt;If you don't have a copy of the repository somewhere already, let's fetch the source code:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
git clone --depth &lt;span class="m"&gt;1&lt;/span&gt; https://opendev.org/zuul/zuul &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; zuul
&lt;/pre&gt;
&lt;p&gt;Bindep will next tell us what else we need to install:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt -y install &lt;span class="k"&gt;$(&lt;/span&gt;bindep --brief &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;At this point bindep should install two database services: mysql and postgresql. We are going to
set these up via containers, so we need to remove the packages. We do however want to make sure the DB clients
are still installed.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt -y remove mysql-server postgresql
sudo apt -y install postgresql-client mysql-client
sudo apt -y autoremove
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="start-external-services"&gt;
&lt;h2&gt;Start external services&lt;/h2&gt;
&lt;p&gt;Zuul requires a database backend and a &lt;a class="reference external" href="https://zookeeper.apache.org/"&gt;Zookeeper&lt;/a&gt; instance to be available,
even when running the unit tests suite. Luckily for us, Zuul's developers team created a very handy script
to deploy these services via a docker compose. Assuming you are still in the zuul directory:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;ROOTCMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sudo tools/test-setup-docker.sh
&lt;/pre&gt;
&lt;p&gt;Once the script terminates, you should have two databases, certificates for Zookeeper and Zookeeper itself
up and running, with parameters that can be used by the test suite. You can check the compose status with
&lt;cite&gt;docker ps&lt;/cite&gt; or check logs with &lt;cite&gt;docker-compose logs -f&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;If you are using a VM, it might be good to snapshot it now so you can easily get back to this state
whenever you want to run tests. Note that binary dependencies might change in the future so it might
be necessary to re-run bindep to keep up to date.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-the-test-suite"&gt;
&lt;h2&gt;Running the test suite&lt;/h2&gt;
&lt;p&gt;Before anything else, we must ensure we can use as many file descriptors as we can, because the Zookeeper
connections require a lot of them.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nb"&gt;ulimit&lt;/span&gt; -n &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;ulimit&lt;/span&gt; -Hn&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Once again, I am running a VM so I am not worried about breaking stuff, but you might want instead to
use a lower value than the hard limit provided by &lt;cite&gt;ulimit -Hn&lt;/cite&gt;. What's for sure is that the default value,
1024, is ridiculously low and needs to be increased.&lt;/p&gt;
&lt;p&gt;Also, note that this command will set the limit only for the current user session; don't forget to set it
again as needed.&lt;/p&gt;
&lt;p&gt;Assuming we are still in the zuul directory, we can list the different testing sessions configured for nox:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
nox -l
&lt;/pre&gt;
&lt;p&gt;Let's do a dry run that will install python libraries requirements, but not run the actual tests:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
nox -s tests --install-only
&lt;/pre&gt;
&lt;p&gt;This also will compile the React GUI application, which might take some time.&lt;/p&gt;
&lt;p&gt;We could have run the tests directly. But with this dry run, we can now install our own dependencies
like Zuul would with a Depends-On keyword in the commit message - except we do it manually.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; .nox/tests/bin/activate
&lt;span class="nb"&gt;cd&lt;/span&gt; path/to/your/dependency
python setup.py install &lt;span class="c1"&gt;# or whatever you use to install the dependency&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To run the test suite with the modified virtualenv, use:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
nox -R -s tests
&lt;/pre&gt;
&lt;p&gt;Drop the &lt;cite&gt;-R&lt;/cite&gt; argument to recreate the virtualenv.&lt;/p&gt;
&lt;p&gt;Given that the test suite is pretty extensive, you may want to limit your run to a few tests at a time.
You can filter out which tests to run by matching a specific regex like
&lt;a class="reference external" href="https://stestr.readthedocs.io/en/stable/MANUAL.html#test-selection"&gt;explained in the stestr documentation&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This article presented a way to set up an environment where you can run Zuul's unit tests suite.
I have compiled all the commands used here in a script in a &lt;a class="reference external" href="https://gist.github.com/mhuin/1177dc30971112404fd7c078651682ed"&gt;gist&lt;/a&gt;, if you want to automate things.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Jan 20 to Feb 08 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-jan-20-to-feb-08-summary.html" rel="alternate"></link><published>2023-02-08T10:00:00+00:00</published><updated>2023-02-08T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-02-08:/sprint-2023-jan-20-to-feb-08-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added a feature for logscraper and logsender that will use configparser library to parse config file&lt;/li&gt;
&lt;li&gt;We fixed an issue in logscraper config that zuul_api_url was rendered incorrect&lt;/li&gt;
&lt;li&gt;We added a tenant quick selector to the GUI …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added a feature for logscraper and logsender that will use configparser library to parse config file&lt;/li&gt;
&lt;li&gt;We fixed an issue in logscraper config that zuul_api_url was rendered incorrect&lt;/li&gt;
&lt;li&gt;We added a tenant quick selector to the GUI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We are working on SF 3.8 release&lt;/li&gt;
&lt;li&gt;We read more about OpenShift and Operators&lt;/li&gt;
&lt;li&gt;We Updated some containers and pipelines for SF 3.8&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Reproducible Shell environments via Nix Flakes</title><link href="https://www.softwarefactory-project.io/reproducible-shell-environments-via-nix-flakes.html" rel="alternate"></link><published>2023-01-24T00:00:00+00:00</published><updated>2023-01-24T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2023-01-24:/reproducible-shell-environments-via-nix-flakes.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to help you getting started with Nix Flakes in order to
ease the distribution of reproducible shell environments.&lt;/p&gt;
&lt;div class="section" id="what-is-nix-flakes-1"&gt;
&lt;span id="what-is-nix-flakes"&gt;&lt;/span&gt;&lt;h2&gt;What is Nix Flakes ?&lt;/h2&gt;
&lt;p&gt;In a previous &lt;a class="reference external" href="https://www.softwarefactory-project.io/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html"&gt;blog post about nix-shell&lt;/a&gt; we have introduced &lt;a class="reference external" href="https://nixos.org/"&gt;Nix&lt;/a&gt; and
how …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to help you getting started with Nix Flakes in order to
ease the distribution of reproducible shell environments.&lt;/p&gt;
&lt;div class="section" id="what-is-nix-flakes-1"&gt;
&lt;span id="what-is-nix-flakes"&gt;&lt;/span&gt;&lt;h2&gt;What is Nix Flakes ?&lt;/h2&gt;
&lt;p&gt;In a previous &lt;a class="reference external" href="https://www.softwarefactory-project.io/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html"&gt;blog post about nix-shell&lt;/a&gt; we have introduced &lt;a class="reference external" href="https://nixos.org/"&gt;Nix&lt;/a&gt; and
how to benefit from the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nix-shell&lt;/span&gt;&lt;/tt&gt; feature to manage shareable and
reproducible shell environments.&lt;/p&gt;
&lt;p&gt;However defining an environment using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nix-shell&lt;/span&gt;&lt;/tt&gt; lacks of
standardization. The new Nix &lt;a class="reference external" href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-flake.html"&gt;flake&lt;/a&gt; standardizes the usage of Nix
artifacts. The Nix project provides a new command called &lt;tt class="docutils literal"&gt;nix flake&lt;/tt&gt;
which handles &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-enable-nix-flake"&gt;
&lt;h2&gt;How to enable nix flake&lt;/h2&gt;
&lt;p&gt;To install Nix please refer to the &lt;a class="reference external" href="https://www.softwarefactory-project.io/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html#how-to-install-nix"&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;flake&lt;/tt&gt; feature is still considered experimental thus a specific
Nix configuration is necessary in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/nix/nix.conf&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
experimental-features = nix-command flakes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="a-shell-environment-described-as-a-flake"&gt;
&lt;h2&gt;A Shell environment described as a Flake&lt;/h2&gt;
&lt;p&gt;Based on the &lt;a class="reference external" href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-flake.html#flake-format"&gt;format definition for a flake&lt;/a&gt; we can rewrite our
&lt;a class="reference external" href="https://www.softwarefactory-project.io/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html#a-simple-shell-nix-definition"&gt;previous simple shell&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
  description = &amp;quot;My-project build environment&amp;quot;;
  nixConfig.bash-prompt = &amp;quot;[nix(my-project)] &amp;quot;;
  inputs = { nixpkgs.url = &amp;quot;github:nixos/nixpkgs/22.11&amp;quot;; };

  outputs = { self, nixpkgs }:
    let
      pkgs = nixpkgs.legacyPackages.x86_64-linux.pkgs;
      fooScript = pkgs.writeScriptBin &amp;quot;foo.sh&amp;quot; ''
        #!/bin/sh
        echo $FOO
      '';
    in {
      devShells.x86_64-linux.default = pkgs.mkShell {
        name = &amp;quot;My-project build environment&amp;quot;;
        buildInputs = [
          pkgs.python39
          pkgs.python39Packages.tox
          pkgs.python39Packages.flake8
          pkgs.python39Packages.requests
          pkgs.python39Packages.ipython
          fooScript
        ];
        shellHook = ''
          echo &amp;quot;Welcome in $name&amp;quot;
          export FOO=&amp;quot;BAR&amp;quot;
        '';
      };
    };
}
&lt;/pre&gt;
&lt;p&gt;Then by running &lt;tt class="docutils literal"&gt;nix develop&lt;/tt&gt; we enter the shell (&lt;tt class="docutils literal"&gt;devShell&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Note that, when working inside a Git repository, Nix expects that the
&lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; file is known by git (at least staged with
&lt;tt class="docutils literal"&gt;git add flake.nix&lt;/tt&gt;) or it will ignore it.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;nix flake check&lt;/tt&gt; command can be used to validate the flake file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nix develop
Welcome in My-project-build-environment
[nix(my-project)] python --version
Python 3.9.15
[nix(my-project)] which ipython
/nix/store/1kgkssy7lkgsxpjii618ddjq2v03473x-python3.9-ipython-8.4.0/bin/ipython
&lt;/pre&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; file must follow a specific format based on the &lt;a class="reference external" href="https://nixos.org/guides/nix-language.html"&gt;Nix
language&lt;/a&gt;. The base structure in an &lt;tt class="docutils literal"&gt;attribute set&amp;nbsp; { ... }&lt;/tt&gt; with
specific attributes such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;description: a simple string that defines the flake's purpose.&lt;/li&gt;
&lt;li&gt;inputs: an attribute set that defines the flake's dependencies.&lt;/li&gt;
&lt;li&gt;outputs: a function that returns an attribute set with arbitratry
attributes. However nix' subcommands expect to find specific
attributes in the flake's output. For instance the &lt;tt class="docutils literal"&gt;nix develop&lt;/tt&gt;
expects to find the &lt;tt class="docutils literal"&gt;devShells&lt;/tt&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that we pin the &lt;tt class="docutils literal"&gt;nixpkgs&lt;/tt&gt; version to the &lt;tt class="docutils literal"&gt;22.11&lt;/tt&gt; tag by
overiding the nixpkgs's url in the input attribute. For better
reproducibility, nix creates a &lt;tt class="docutils literal"&gt;flake.lock&lt;/tt&gt; file to pin dependencies
to specific git hashes. This &lt;tt class="docutils literal"&gt;lock&lt;/tt&gt; file should be distributed along
with the &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;The nix flake &lt;tt class="docutils literal"&gt;metadata&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;show&lt;/tt&gt; subcommands can be used to
display flake' dependencies and output.&lt;/p&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;flake&lt;/tt&gt; can be easily shared via a git repository. For instance the
&lt;a class="reference external" href="https://github.com/change-metrics/monocle"&gt;Monocle&lt;/a&gt; project provides a flake with a &lt;tt class="docutils literal"&gt;devShell&lt;/tt&gt; output then to
get the same development environment than Monocle' developers, then
simply run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Note that the first run might take long to fetch binary dependencies from the
# nix cache and to build unavailable binary dependencies (from the cache).

$ nix develop github:change-metrics/monocle
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="a-flake-to-build-the-software-factory-website"&gt;
&lt;h2&gt;A flake to build the Software Factory website&lt;/h2&gt;
&lt;p&gt;Our website requires some dependencies available on the system in order
to be built. To ensure that each teams' member can build the website
locally, without spending time understanding which dependencies are
needed and then struggling with versions/incompatibility issues, we
provide a &lt;tt class="docutils literal"&gt;flake&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;Here is the &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; we are using:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
  description = &amp;quot;sf.io site builder flake&amp;quot;;
  inputs = { nixpkgs.url = &amp;quot;github:nixos/nixpkgs/22.11&amp;quot;; };

  outputs = { self, nixpkgs }:
    let
      pkgs = nixpkgs.legacyPackages.x86_64-linux.pkgs;
      buildScript = pkgs.writeScriptBin &amp;quot;build-site.sh&amp;quot; ''
        #!/bin/sh

        pushd src
        ./blog-htmx.sh
        ./blog-practical-haskell-use-cases.sh
        ./blog-introducing-effects.sh
        ./blog-introducing-functional-programming-to-pythonistas.sh
        ./blog-sf-resources-in-reason.sh
        ./blog-nix-shell.sh
        ./blog-nix-shell-flakes.sh
        popd

        pushd website
        pelican content -o output
        popd
      '';
    in {
      devShells.x86_64-linux.default = pkgs.mkShell {
        name = &amp;quot;Website toolings shell&amp;quot;;
        buildInputs = [ pkgs.pandoc pkgs.python39Packages.pelican buildScript ];
        shellHook = ''
          echo &amp;quot;Welcome in the nix shell for $name&amp;quot;
          echo &amp;quot;Run the build-site.sh command to build the website in website/output&amp;quot;
          echo &amp;quot;Then run: firefox website/output/index.html&amp;quot;
        '';
      };
    };
}
&lt;/pre&gt;
&lt;p&gt;It is then really easy to build the website:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nix develop
$ build-site.sh
&lt;/pre&gt;
&lt;div class="section" id="package-override"&gt;
&lt;h3&gt;Package override&lt;/h3&gt;
&lt;p&gt;If a specific package version is needed in the shell, then it is
possible to override a package' attributes to make a new &lt;a class="reference external" href="https://nixos.org/manual/nix/stable/language/derivations.html"&gt;derivation&lt;/a&gt;.
For instance, let's say that we need, for some reason, to stick to
&lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; version 4.7.2 instead of 4.8.0 version provided in
&lt;tt class="docutils literal"&gt;nixpkgs&lt;/tt&gt; 22.11. Then, we can override the &lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/22.11/pkgs/development/python-modules/pelican/default.nix"&gt;current definition&lt;/a&gt; in
our &lt;tt class="docutils literal"&gt;flake.nix&lt;/tt&gt; using the &lt;tt class="docutils literal"&gt;overridePythonAttrs&lt;/tt&gt; function this way:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
let pelican = pkgs.python39Packages.pelican.overridePythonAttrs (old: rec {
  version = &amp;quot;4.7.2&amp;quot;;
  src = pkgs.fetchFromGitHub {
    owner = &amp;quot;getpelican&amp;quot;;
    repo = old.pname;
    rev = &amp;quot;refs/tags/${version}&amp;quot;;
    hash = &amp;quot;sha256-ZBGzsyCtFt5uj9mpOpGdTzGJET0iwOAgDTy80P6anRU=&amp;quot;;
    postFetch = ''
      rm -r $out/pelican/tests/output/custom_locale/posts
    '';
  };
});
&lt;/pre&gt;
&lt;p&gt;and finally use the new &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; derivation in the &lt;tt class="docutils literal"&gt;buildInputs&lt;/tt&gt; of
the &lt;tt class="docutils literal"&gt;mkShell&lt;/tt&gt; function' attributes.&lt;/p&gt;
&lt;p&gt;Note that you might need to set &lt;tt class="docutils literal"&gt;hash&lt;/tt&gt; to an empty string to force Nix
to provide you the new hash to be set in the override.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2023 Dec 30 to Jan 18 summary</title><link href="https://www.softwarefactory-project.io/sprint-2023-dec-30-to-jan-18-summary.html" rel="alternate"></link><published>2023-01-18T10:00:00+00:00</published><updated>2023-01-18T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2023-01-18:/sprint-2023-dec-30-to-jan-18-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issue in logscraper, that it was not downloading important files from the logserver (zuul-info/inventory.yaml), so the logsender was skipping the log directory&lt;/li&gt;
&lt;li&gt;We added a OpenSearch Dashboards script thas is base on the script …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issue in logscraper, that it was not downloading important files from the logserver (zuul-info/inventory.yaml), so the logsender was skipping the log directory&lt;/li&gt;
&lt;li&gt;We added a OpenSearch Dashboards script thas is base on the script that we have in Software Factory project, but with few featues, for example: added support for AWS OpenSearch Dashboards&lt;/li&gt;
&lt;li&gt;We set tags permissions for openstack/ci-log-processing project, so we will be ready to make a release after merging all content that is in review state&lt;/li&gt;
&lt;li&gt;We splitted variables related to the ca certificates for logscraper and logsender because they might not use same CA provider&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed all keycloak's conditionals and cauth mentions&lt;/li&gt;
&lt;li&gt;We fixed Gerrit container 3.5.4 reviewers-by-blame plugin and added zuul-results-summary plugin&lt;/li&gt;
&lt;li&gt;We fixed highlight Cgit feature&lt;/li&gt;
&lt;li&gt;We updated SF documentation for 3.8 release&lt;/li&gt;
&lt;li&gt;sf-docs : We removed an option from sfconfig command: provision-demo&lt;/li&gt;
&lt;li&gt;We set several containers to user a dedicated user instead of root&lt;/li&gt;
&lt;li&gt;We fixed some obsolete auth parameters being injected in sfconfig.yaml (remnants from previous upgrades sanitizing) when upgrading to 3.8&lt;/li&gt;
&lt;li&gt;We validated various patches and did some manual testing for the 3.8 release &lt;a class="reference external" href="https://softwarefactory-project.io/etherpad/p/3.8_changes"&gt;https://softwarefactory-project.io/etherpad/p/3.8_changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started the release process of 3.8 and got a candidate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Howto manage shareable, reproducible Nix environments via nix-shell</title><link href="https://www.softwarefactory-project.io/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html" rel="alternate"></link><published>2023-01-09T00:00:00+00:00</published><updated>2023-01-09T00:00:00+00:00</updated><author><name>Fabien</name></author><id>tag:www.softwarefactory-project.io,2023-01-09:/howto-manage-shareable-reproducible-nix-environments-via-nix-shell.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to teach how to leverage nix via the nix-shell feature in
order to ease the distribution of reproducible environment.&lt;/p&gt;
&lt;div class="section" id="what-is-nix-1"&gt;
&lt;span id="what-is-nix"&gt;&lt;/span&gt;&lt;h2&gt;What is Nix ?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nixos.org"&gt;Nix&lt;/a&gt; is a purely functional package manager. It manages packages
independently from your …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to teach how to leverage nix via the nix-shell feature in
order to ease the distribution of reproducible environment.&lt;/p&gt;
&lt;div class="section" id="what-is-nix-1"&gt;
&lt;span id="what-is-nix"&gt;&lt;/span&gt;&lt;h2&gt;What is Nix ?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nixos.org"&gt;Nix&lt;/a&gt; is a purely functional package manager. It manages packages
independently from your system by maintaining a package store in
&lt;tt class="docutils literal"&gt;/nix/store&lt;/tt&gt;. This makes Nix convenient because various softwares and
libraries can be installed without the fear of breaking the base system
provided by your Linux distribution, nor having to handle potential
conflicts in the versions of dependencies. Furthermore, as the Nix store
is a graph of cryptographic hashes of package’s build dependencies, then
it brings the guarantee reproducible environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-install-nix"&gt;
&lt;h2&gt;How to install nix&lt;/h2&gt;
&lt;p&gt;This page describes &lt;a class="reference external" href="https://nixos.org/download.html#download-nix"&gt;installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'll use the single user installation process (the user needs to be
able to &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;-i&lt;/span&gt;&lt;/tt&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh &amp;lt;(curl -L https://nixos.org/nix/install) --no-daemon
. ~/.nix-profile/etc/profile.d/nix.sh
&lt;/pre&gt;
&lt;p&gt;Now let's verify our nix installation is working as expected:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nix --version
nix (Nix) 2.12.0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-nix-shell-to-setup-an-environment"&gt;
&lt;h2&gt;Using the nix-shell to setup an environment&lt;/h2&gt;
&lt;p&gt;A Nix shell environment gives access to specified packages.&lt;/p&gt;
&lt;p&gt;For instance, this command enhances the current shell environment to
make &lt;tt class="docutils literal"&gt;cowsay&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;fortune&lt;/tt&gt; available in the PATH:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nix-shell -p cowsay fortune
these 3 paths will be fetched (1.76 MiB download, 6.34 MiB unpacked):
  /nix/store/4agvv4d3jl9lcwxd46qjlkzcibsbryvz-recode-3.7.9
  /nix/store/fkrh0bzwymq0220fscz7grd3yrh5hzsd-cowsay-3.04
  /nix/store/k5dfq7qj0vp10jyb2pn780f323f4vdzm-fortune-mod-3.6.1
copying path '/nix/store/fkrh0bzwymq0220fscz7grd3yrh5hzsd-cowsay-3.04' from 'https://cache.nixos.org'...
copying path '/nix/store/4agvv4d3jl9lcwxd46qjlkzcibsbryvz-recode-3.7.9' from 'https://cache.nixos.org'...
copying path '/nix/store/k5dfq7qj0vp10jyb2pn780f323f4vdzm-fortune-mod-3.6.1' from 'https://cache.nixos.org'...

$ type cowsay fortune
cowsay is hashed (/nix/store/fkrh0bzwymq0220fscz7grd3yrh5hzsd-cowsay-3.04/bin/cowsay)
fortune is hashed (/nix/store/k5dfq7qj0vp10jyb2pn780f323f4vdzm-fortune-mod-3.6.1/bin/fortune)
&lt;/pre&gt;
&lt;p&gt;The Nix project maintains a binary cache then packages are usually just
downloaded from the cache.&lt;/p&gt;
&lt;p&gt;However this command does not guarantee the same versions of packages
will be installed when the same command runs on another machine. Indeed
package definitions are maintained in the &lt;a class="reference external" href="https://github.com/NixOS/nixpkgs"&gt;nixpkgs&lt;/a&gt; project, and to
ensure reproducibility the version of nixpkgs must be pinned.&lt;/p&gt;
&lt;p&gt;By default, running &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nix-shell&lt;/span&gt;&lt;/tt&gt;, uses the default nixpkgs channel,
which might be set to a different version across nix installations.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nix-instantiate --eval -E '(import &amp;lt;nixpkgs&amp;gt; {}).lib.version'
&amp;quot;23.05pre440754.0c9aadc8eff&amp;quot;
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nix-shell&lt;/span&gt;&lt;/tt&gt; command can be run with a pinned version of nixpkgs,
by doing so we get the guarantee run a reproducible shell environment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/refs/tags/22.11.tar.gz -p cowsay
&lt;/pre&gt;
&lt;p&gt;Now let use our new knowledge to get a Python 3.9 shell with various
Python libraries and ipython:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/refs/tags/22.11.tar.gz -p \
python39 python39Packages.tox python39Packages.flake8 python39Packages.requests \
python39Packages.ipython

$ type python tox flake8 ipython
python is /nix/store/h4h5rxs0hzpzvz37yrwv1k2na1acgzww-python3-3.9.15/bin/python
tox is hashed (/nix/store/0iifww8anqsg84apj0dklrpiqjwn1nzy-python3.9-tox-3.27.1/bin/tox)
flake8 is hashed (/nix/store/mri6xdgqa5b4hj7by88mlidksi1h7kd2-python3.9-flake8-5.0.4/bin/flake8)
ipython is /nix/store/1kgkssy7lkgsxpjii618ddjq2v03473x-python3.9-ipython-8.4.0/bin/ipython

$ python --version &amp;amp;&amp;amp; flake8 --version &amp;amp;&amp;amp; tox --version &amp;amp;&amp;amp; ipython --version
Python 3.9.15
5.0.4 (mccabe: 0.7.0, pycodestyle: 2.9.1, pyflakes: 2.5.0) CPython 3.9.15 on Linux
3.27.1 imported from /nix/store/0iifww8anqsg84apj0dklrpiqjwn1nzy-python3.9-tox-3.27.1/lib/python3.9/site-packages/tox/__init__.py
8.4.0

$ exit

# Note that running again the nix-shell command will enter the shell instantanously as all
# binaries have been fetched into /nix/store already.
&lt;/pre&gt;
&lt;p&gt;If you try the same commands as above on your machine you should see the
extact same output.&lt;/p&gt;
&lt;p&gt;Currently, nixpkgs owns definitions for around 80,000 packages. You can
search for available packages on &lt;a class="reference external" href="https://search.nixos.org"&gt;search.nixos.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-simple-shell-nix-definition"&gt;
&lt;span id="a-simple-shellnix-definition"&gt;&lt;/span&gt;&lt;h2&gt;A simple shell.nix definition&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nix-shell&lt;/span&gt;&lt;/tt&gt; command looks for a &lt;tt class="docutils literal"&gt;shell.nix&lt;/tt&gt; file in the current
directory and if it exists the shell environment is loaded. This is
handy in order to share with co-workers a common and reproducible work
environment for a given project. Since it is a pure text file, it can
also be easily versioned with git.&lt;/p&gt;
&lt;p&gt;As the most simple example of &lt;tt class="docutils literal"&gt;shell.nix&lt;/tt&gt; to deploy the previous
Python environment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{ pkgs ? import (fetchTarball &amp;quot;https://github.com/NixOS/nixpkgs/archive/refs/tags/22.11.tar.gz&amp;quot;) {} }:

let fooScript = pkgs.writeScriptBin &amp;quot;foo.sh&amp;quot; ''
  #!/bin/sh
  echo $FOO
'';

in pkgs.mkShell {
  name = &amp;quot;My-project build environment&amp;quot;;
  buildInputs = [
    pkgs.python39
    pkgs.python39Packages.tox
    pkgs.python39Packages.flake8
    pkgs.python39Packages.requests
    pkgs.python39Packages.ipython
    fooScript
  ];
  shellHook = ''
    echo &amp;quot;Welcome in $name&amp;quot;
    export FOO=&amp;quot;BAR&amp;quot;
  '';
}
&lt;/pre&gt;
&lt;p&gt;This &lt;tt class="docutils literal"&gt;shell.nix&lt;/tt&gt; sample describes a shell with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some Python packages available&lt;/li&gt;
&lt;li&gt;A script &lt;tt class="docutils literal"&gt;foo.sh&lt;/tt&gt; available in the PATH&lt;/li&gt;
&lt;li&gt;Some commands (via &lt;tt class="docutils literal"&gt;shellHook&lt;/tt&gt; to run a shell startup)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enter the shell by typing: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nix-shell&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-go-further"&gt;
&lt;h2&gt;To go further&lt;/h2&gt;
&lt;p&gt;In this post we learned the basic steps to bootstrap a simple shell
environment with Nix. However more complex and reproducible environment
setups can be built via a Nix shell, like the setup of services
(MariaDB, Zookeeper, ...), installation of additional scripts,
compilation/installation of softwares and libraries not available in
nixpkgs, but this goes beyond that simple introdution.&lt;/p&gt;
&lt;p&gt;Here are some interesting resources to &lt;a class="reference external" href="https://nix.dev/recommended-reading"&gt;continue your learning&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Checking SF Operator with Kubernetes</title><link href="https://www.softwarefactory-project.io/checking-sf-operator-with-kubernetes.html" rel="alternate"></link><published>2022-12-22T00:00:00+00:00</published><updated>2022-12-22T00:00:00+00:00</updated><author><name>dpawlik</name></author><id>tag:www.softwarefactory-project.io,2022-12-22:/checking-sf-operator-with-kubernetes.html</id><summary type="html">&lt;div class="section" id="early-stage-of-sf-operator"&gt;
&lt;h2&gt;Early stage of SF Operator&lt;/h2&gt;
&lt;p&gt;In the beginning, the &lt;cite&gt;sf-operator&lt;/cite&gt; were deployed on &lt;a class="reference external" href="https://kind.sigs.k8s.io/"&gt;Kind&lt;/a&gt; tool,
because it was fast to deploy, easy to enable features like &lt;cite&gt;extraPortMapping&lt;/cite&gt;,
configure local storage. So it was a perfect tool to run in CI and only for CI.
After a while we realized that …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="early-stage-of-sf-operator"&gt;
&lt;h2&gt;Early stage of SF Operator&lt;/h2&gt;
&lt;p&gt;In the beginning, the &lt;cite&gt;sf-operator&lt;/cite&gt; were deployed on &lt;a class="reference external" href="https://kind.sigs.k8s.io/"&gt;Kind&lt;/a&gt; tool,
because it was fast to deploy, easy to enable features like &lt;cite&gt;extraPortMapping&lt;/cite&gt;,
configure local storage. So it was a perfect tool to run in CI and only for CI.
After a while we realized that Kind won't be used in production and every
simplification in use will need to be applied on production environment like
Kubernetes or OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-kubernetes-deployment"&gt;
&lt;h2&gt;The Kubernetes deployment&lt;/h2&gt;
&lt;p&gt;The Kubernetes deployment compared to the Kind tool is more time consuming,
and it requires more knowledge how to deploy Kubernetes, like: choose
proper container runtime, configure properly ingress, choose proper
container networking solution etc.
Basic Kubernetes deployment is done by using &lt;cite&gt;extra/kubernetes&lt;/cite&gt; role from
&lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/sf-infra/+/refs/heads/master/roles/extra/kubernetes/"&gt;sf-infra&lt;/a&gt; project.
The role uses &lt;a class="reference external" href="https://cri-o.io/"&gt;cri-o&lt;/a&gt; as a container runtime, &lt;a class="reference external" href="https://www.tigera.io/project-calico/"&gt;calico&lt;/a&gt; as networking driver,
&lt;a class="reference external" href="https://github.com/kubernetes/ingress-nginx/"&gt;ingress&lt;/a&gt; with localhost port mapping (port 80, 443) and
&lt;a class="reference external" href="https://github.com/rancher/local-path-provisioner"&gt;local-path-provisioner&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a simple playbook to deploy Kubernetes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy Kubernetes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kubernetes.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;extra/kubernetes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="why-ingress-port-mapping-is-bound-to-host"&gt;
&lt;h3&gt;Why ingress port mapping is bound to host?&lt;/h3&gt;
&lt;p&gt;We have been using host-bound ingress port mapping with Kind, and we would
like to keep doing so far for CI check, because it is simpler and takes less time.
That solution might be helpful for development purposes, that it does not
require to attach more resources from your Cloud Provider to the VM or baremetal.
With that setup, on one Kubernetes cluster we are able to deploy many
&lt;cite&gt;sf-operator&lt;/cite&gt; deployments and communicate with the resources via host ip address,
but with a different hostname.
For example, in the resource definition of &lt;cite&gt;sf-operator&lt;/cite&gt;, there is a &lt;cite&gt;fqdn&lt;/cite&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# cat config/samples/sf_v1_softwarefactory.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sf.softwarefactory-project.io/v1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;SoftwareFactory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-sf&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;fqdn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sftests.com&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here is how I modified my resource definition to deploy a test instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# cat config/samples/sf_v1_softwarefactory.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sf.softwarefactory-project.io/v1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;SoftwareFactory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-sf&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;fqdn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dpawlik.sftests.com&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By changing the &lt;cite&gt;fqdn&lt;/cite&gt; variable to something different and re-deploy &lt;cite&gt;sf-operator&lt;/cite&gt;
in another namespace, you should be able to perform a query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;KIND_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123.123.123.123&amp;quot;&lt;/span&gt;
curl &lt;span class="s2"&gt;&amp;quot;http://&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;KIND_IP&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt; -H &lt;span class="s2"&gt;&amp;quot;HOST: etherpad.dpawlik.sftests.com&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# or alternative way&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;KIND_IP&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; etherpad.dpawlik.sftests.com&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /ets/hosts
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;KIND_IP&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; etherpad.sftests.com&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /ets/hosts

&lt;span class="c1"&gt;# make query&lt;/span&gt;
curl -SL etherpad.dpawlik.sftests.com
curl -SL etherpad.sftests.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;cite&gt;hostNetwork&lt;/cite&gt; and added &lt;cite&gt;hostPort&lt;/cite&gt; for the &lt;cite&gt;ingress-nginx-controller&lt;/cite&gt;
deployment resource, you would be able to reach the resources outside the
VM/Baremetal without deploying HAProxy, Cloud Provider resources like
IP Load Balancer or use alternative ingress configuration. [ &lt;a class="reference external" href="https://kubernetes.github.io/ingress-nginx/deploy/baremetal/"&gt;samples&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;What is worth to mention, the host port binding solution is temporary and
it is used mostly for development purpose. In the future, our team will consider
alternative configuration of ingress and local-storage-provisioner to be
more compatible with the Kubernetes/OpenShift deployment, where
the user is not an administrator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-local-path-provisioner"&gt;
&lt;h3&gt;The local-path-provisioner&lt;/h3&gt;
&lt;p&gt;Local Path Provisioner provides a way for the Kubernetes users to utilize
the local storage in each node. Based on the user configuration,
the Local Path Provisioner will create either hostPath or local based
persistent volume on the node automatically. [ &lt;a class="reference external" href="https://github.com/rancher/local-path-provisioner#overview"&gt;source&lt;/a&gt; ].&lt;/p&gt;
&lt;p&gt;For the CI deployment, we create a local persistent volume, on which the service's
data is stored. However we are likely to discard this approach in future
production deployments, because the storage content needs to be available
on all nodes. It is possible to create an NFS storage, or attach the same volume
on all of the nodes, but if you are not an administrator, that solution
would be problematic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Getting started with CodeReady Containers</title><link href="https://www.softwarefactory-project.io/getting-started-with-codeready-containers.html" rel="alternate"></link><published>2022-12-22T00:00:00+00:00</published><updated>2022-12-22T00:00:00+00:00</updated><author><name>dpawlik</name></author><id>tag:www.softwarefactory-project.io,2022-12-22:/getting-started-with-codeready-containers.html</id><summary type="html">&lt;div class="section" id="crc-codeready-containers"&gt;
&lt;h2&gt;CRC - CodeReady Containers&lt;/h2&gt;
&lt;div class="section" id="what-is-crc"&gt;
&lt;h3&gt;What is CRC?&lt;/h3&gt;
&lt;p&gt;The CRC (Red Hat CodeReady Containers) is a solution to deploy OpenShift
cluster on your local machine in minutes.
Red Hat OpenShift provides a complete solution that includes a stable Kubernetes
engine with robust security and many integrated capabilities required to
operate a complete …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="crc-codeready-containers"&gt;
&lt;h2&gt;CRC - CodeReady Containers&lt;/h2&gt;
&lt;div class="section" id="what-is-crc"&gt;
&lt;h3&gt;What is CRC?&lt;/h3&gt;
&lt;p&gt;The CRC (Red Hat CodeReady Containers) is a solution to deploy OpenShift
cluster on your local machine in minutes.
Red Hat OpenShift provides a complete solution that includes a stable Kubernetes
engine with robust security and many integrated capabilities required to
operate a complete application platform. It comes in several
editions including as a fully managed public cloud service or
self-managed on infrastructure across datacenters, public clouds, and edge. [ &lt;a class="reference external" href="https://www.redhat.com/en/technologies/cloud-computing/openshift/red-hat-openshift-kubernetes#benefits"&gt;source&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;That project is very resource-hungry, because it deploys a dedicated
libvirt instance (virtual machine), configures network, deploys Kubernetes inside
the instance (VM) and on the end deploys OpenShift with operators.
All new pods that would be spawned later by &lt;cite&gt;sf-operator&lt;/cite&gt; would be running inside
that VM, that's why the minimum of our configuration to deploy CRC and &lt;cite&gt;sf-operator&lt;/cite&gt;
took 14 GB of RAM, 6 vcpus and 60 GB of HDD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="few-words-about-sf-operator"&gt;
&lt;h3&gt;Few words about SF Operator&lt;/h3&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/sf-operator"&gt;SF Operator&lt;/a&gt; project
is most likely a new solution that the Software Factory Project will use.
The &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"&gt;operators&lt;/a&gt; are software
extensions to Kubernetes that make use of custom resources to manage applications and their components.
Operators follow Kubernetes principles, notably the control loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-are-we-using-it"&gt;
&lt;h3&gt;Why are we using it?&lt;/h3&gt;
&lt;p&gt;The SF Operator project is already tested on a vanilla Kubernetes deployment, however
we cannot assume that all of Software Factory Project users are using it.
The future Software Factory release that would be based on Kubernetes deployment
should be also tested on different platform. That's why we aim to
create an universal operator, that would be possible to deploy on many
Kubernetes base clusters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-setup-crc"&gt;
&lt;h3&gt;How to setup CRC?&lt;/h3&gt;
&lt;p&gt;The CRC deployment is easy to deploy. The CRC community has simple &lt;a class="reference external" href="https://crc.dev/crc/"&gt;documentation&lt;/a&gt;.
Also the OpenStack community creates its own repository where they describe
how to setup the environment. More information you can find &lt;a class="reference external" href="https://github.com/openstack-k8s-operators/install_yamls/tree/master/devsetup#crc-automation--tool-deployment"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Software Factory Project uses the crc Ansible role, which
you can find in &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/sf-infra"&gt;sf-infra&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Here is a playbook that deploy a crc cluster using the crc role we maintain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;crc.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;crc_debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;nested_virtualization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;openshift_pull_secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;&amp;lt; ADD YOUR PULL-SECRET.TXT HERE&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pre_tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ensure CentOS runs with selinux permissive&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;selinux&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;targeted&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;permissive&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;extra/crc&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the pull-secret.txt can be generated &lt;a class="reference external" href="https://cloud.redhat.com/openshift/create/local"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ingress-how-it-s-done-for-testing-purpose"&gt;
&lt;h3&gt;Ingress - how it's done for testing purpose?&lt;/h3&gt;
&lt;p&gt;Kubernetes Ingress is an API object that provides routing rules to manage
external users' access to the services in a Kubernetes cluster,
typically via HTTPS/HTTP.
With Ingress, you can easily set up rules for routing traffic without creating
a bunch of Load Balancers or exposing each service on the node. [ &lt;a class="reference external" href="https://www.ibm.com/cloud/blog/kubernetes-ingress"&gt;source&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;In short, ingress exposes HTTP and HTTPS routes from outside the
cluster to services within the cluster. Traffic routing is controlled by
rules defined on the Ingress resource. [ &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/ingress/#what-is-ingress"&gt;source&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;On Kubernetes deployment created with &lt;a class="reference external" href="https://kind.sigs.k8s.io/"&gt;Kind&lt;/a&gt; tool,
to forward ports from the host to an ingress controller running on the node, it just
requires to add a dedicated &lt;a class="reference external" href="https://kind.sigs.k8s.io/docs/user/ingress/#setting-up-an-ingress-controller"&gt;extraPortMapping&lt;/a&gt;
parameter into the configuration file.&lt;/p&gt;
&lt;p&gt;By default, the VM L0 (the VM where you are deploying CRC), creates a new
network that is also routed on that VM. In most cases, the ip address of the
crc services are bound to &lt;cite&gt;192.168.130.11&lt;/cite&gt;.
It means, that to communicate with the services such as Openshift Web Console
or sf-operator deployed services, it requires to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;add security group rules to your instance (if you are deploying CRC in Cloud Provider VM),&lt;/li&gt;
&lt;li&gt;setup HAProxy that will redirect queries to the services working in CRC network.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to add the security group rules should be described in your Cloud Provider
documentation, so I will skip that step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-enable-crc-console-by-using-haproxy"&gt;
&lt;h3&gt;How to enable CRC Console by using HAProxy&lt;/h3&gt;
&lt;p&gt;The manual is based on blog &lt;a class="reference external" href="https://nerc-project.github.io/nerc-docs/other-tools/kubernetes/crc/#using-crc-web-interface"&gt;post&lt;/a&gt;.
How to enable:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;install required services&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dnf install -y haproxy policycoreutils-python-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;configure environment variables&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SERVER_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;hostname --ip-address &lt;span class="p"&gt;|&lt;/span&gt;cut -d&lt;span class="se"&gt;\ &lt;/span&gt; -f3&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CRC_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;crc ip&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create HAProxy configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF | sudo tee /etc/haproxy/haproxy.cfg&lt;/span&gt;
&lt;span class="s"&gt;global&lt;/span&gt;

&lt;span class="s"&gt;defaults&lt;/span&gt;
&lt;span class="s"&gt;log global&lt;/span&gt;
&lt;span class="s"&gt;mode http&lt;/span&gt;
&lt;span class="s"&gt;timeout connect 0&lt;/span&gt;
&lt;span class="s"&gt;timeout client 0&lt;/span&gt;
&lt;span class="s"&gt;timeout server 0&lt;/span&gt;

&lt;span class="s"&gt;frontend apps&lt;/span&gt;
&lt;span class="s"&gt;bind ${SERVER_IP}:80&lt;/span&gt;
&lt;span class="s"&gt;bind ${SERVER_IP}:443&lt;/span&gt;
&lt;span class="s"&gt;option tcplog&lt;/span&gt;
&lt;span class="s"&gt;mode tcp&lt;/span&gt;
&lt;span class="s"&gt;default_backend apps&lt;/span&gt;

&lt;span class="s"&gt;backend apps&lt;/span&gt;
&lt;span class="s"&gt;mode tcp&lt;/span&gt;
&lt;span class="s"&gt;balance roundrobin&lt;/span&gt;
&lt;span class="s"&gt;option ssl-hello-chk&lt;/span&gt;
&lt;span class="s"&gt;server webserver1 ${CRC_IP}:443 check&lt;/span&gt;

&lt;span class="s"&gt;frontend api&lt;/span&gt;
&lt;span class="s"&gt;bind ${SERVER_IP}:6443&lt;/span&gt;
&lt;span class="s"&gt;option tcplog&lt;/span&gt;
&lt;span class="s"&gt;mode tcp&lt;/span&gt;
&lt;span class="s"&gt;default_backend api&lt;/span&gt;

&lt;span class="s"&gt;backend api&lt;/span&gt;
&lt;span class="s"&gt;mode tcp&lt;/span&gt;
&lt;span class="s"&gt;balance roundrobin&lt;/span&gt;
&lt;span class="s"&gt;option ssl-hello-chk&lt;/span&gt;
&lt;span class="s"&gt;server webserver1 ${CRC_IP}:6443 check&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;add SELinux policy (if you did not set SELinux to permissive)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo semanage port -a -t http_port_t -p tcp &lt;span class="m"&gt;6443&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;start the service&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl start haproxy
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; haproxy
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;optionally, generate the /etc/hosts entries (execute that on crc host, but add into your local VM)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ip route get &lt;span class="m"&gt;1&lt;/span&gt;.2.3.4 &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $7}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; console-openshift-console.apps-crc.testing api.crc.testing canary-openshift-ingress-canary.apps-crc.testing default-route-openshift-image-registry.apps-crc.testing downloads-openshift-console.apps-crc.testing oauth-openshift.apps-crc.testing apps-crc.testing&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /etc/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above steps are automatically done by Ansible due it has been included in
&lt;cite&gt;extra/crc&lt;/cite&gt; role in &lt;cite&gt;sf-infra&lt;/cite&gt; project.&lt;/p&gt;
&lt;p&gt;After applying that, the OpenShift WebUI console should be available on
&lt;cite&gt;https://console-openshift-console.apps-crc.testing/&lt;/cite&gt;.&lt;/p&gt;
&lt;img alt="loginpage" src="images/crc-1.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="overview" src="images/crc-2.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="overview_cont" src="images/crc-3.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="pods" src="images/crc-4.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="pv" src="images/crc-5.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="nodes" src="images/crc-6.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="remove-crc-pull-secret-txt-from-the-cluster"&gt;
&lt;h2&gt;Remove CRC pull-secret.txt from the cluster&lt;/h2&gt;
&lt;p&gt;If you would like to make a snapshot of the CRC VM and remove sensitive
content from the cluster, it is required to perform an action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From https://github.com/crc-org/snc/blob/master/snc.sh#L241&lt;/span&gt;
&lt;span class="nv"&gt;mc_before_removing_pullsecret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/usr/local/bin/oc get mc --sort-by&lt;span class="o"&gt;=&lt;/span&gt;.metadata.creationTimestamp --no-headers -oname&lt;span class="k"&gt;)&lt;/span&gt;
/usr/local/bin/oc replace -f https://raw.githubusercontent.com/crc-org/snc/master/pull-secret.yaml
&lt;span class="nv"&gt;mc_after_removing_pullsecret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/usr/local/bin/oc get mc --sort-by&lt;span class="o"&gt;=&lt;/span&gt;.metadata.creationTimestamp --no-headers -oname&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;mc_before_removing_pullsecret&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;mc_after_removing_pullsecret&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Machine config is still not rendered&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;mc_after_removing_pullsecret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/usr/local/bin/oc get mc --sort-by&lt;span class="o"&gt;=&lt;/span&gt;.metadata.creationTimestamp --no-headers -oname&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-local-path-provisioner"&gt;
&lt;h3&gt;The local-path-provisioner&lt;/h3&gt;
&lt;p&gt;Local Path Provisioner provides a way for the Kubernetes users to utilize
the local storage in each node. Based on the user configuration,
the Local Path Provisioner will create either hostPath or local based
persistent volume on the node automatically. [ &lt;a class="reference external" href="https://github.com/rancher/local-path-provisioner#overview"&gt;source&lt;/a&gt; ].&lt;/p&gt;
&lt;p&gt;For the CI deployment, we did not provide dynamic persistent volume, but
we create few local persistent volume, which is storing the service
content on the CRC VM disk.
To create the PVs, we choose the solution proposed by &lt;a class="reference external" href="https://github.com/openstack-k8s-operators/install_yamls"&gt;OpenStack K8S Operators project&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connect-to-the-crc-vm"&gt;
&lt;h3&gt;Connect to the CRC VM&lt;/h3&gt;
&lt;p&gt;Sometimes for debuging purpose you would like to connect to the
CRC instance and check for example the VM logs. The &lt;cite&gt;crc&lt;/cite&gt; community
has prepared a &lt;a class="reference external" href="https://github.com/crc-org/crc/wiki/Debugging-guide"&gt;documment&lt;/a&gt; how to do it.
Below simple script to connect to the VM.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CRC_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;192.168.130.11&amp;quot;&lt;/span&gt;
cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.ssh/config&lt;/span&gt;
&lt;span class="s"&gt;Host crc&lt;/span&gt;
&lt;span class="s"&gt;    Hostname ${CRC_IP}&lt;/span&gt;
&lt;span class="s"&gt;    User core&lt;/span&gt;
&lt;span class="s"&gt;    IdentityFile ~/.crc/machines/crc/id_rsa&lt;/span&gt;
&lt;span class="s"&gt;    IdentityFile ~/.crc/machines/crc/id_ecdsa&lt;/span&gt;
&lt;span class="s"&gt;    StrictHostKeyChecking no&lt;/span&gt;
&lt;span class="s"&gt;    UserKnownHostsFile /dev/null&lt;/span&gt;
&lt;span class="s"&gt; EOF&lt;/span&gt;

 chmod &lt;span class="m"&gt;0600&lt;/span&gt; ~/.ssh/config
 ssh -i ~/.crc/machines/crc/id_ecdsa -o &lt;span class="nv"&gt;StrictHostKeyChecking&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no -o &lt;span class="nv"&gt;UserKnownHostsFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/null  core@&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CRC_IP&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Deploying the Quay container registry</title><link href="https://www.softwarefactory-project.io/deploying-the-quay-container-registry.html" rel="alternate"></link><published>2022-12-12T00:00:00+00:00</published><updated>2023-01-19T00:00:00+00:00</updated><author><name>dpawlik</name></author><id>tag:www.softwarefactory-project.io,2022-12-12:/deploying-the-quay-container-registry.html</id><summary type="html">&lt;div class="section" id="what-is-quay"&gt;
&lt;h2&gt;What is Quay ?&lt;/h2&gt;
&lt;p&gt;As the infra team we deploy and maintain a Quay service which is a distributed
and highly available container image registry for the RDO and TripleO project.
In the blog post we'll introduce an Ansible role that we have created to
ease Quay deployment and configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-services"&gt;
&lt;h2&gt;Additional …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="what-is-quay"&gt;
&lt;h2&gt;What is Quay ?&lt;/h2&gt;
&lt;p&gt;As the infra team we deploy and maintain a Quay service which is a distributed
and highly available container image registry for the RDO and TripleO project.
In the blog post we'll introduce an Ansible role that we have created to
ease Quay deployment and configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-services"&gt;
&lt;h2&gt;Additional services&lt;/h2&gt;
&lt;p&gt;The Quay service can communicate with additional services:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.redhat.com/en/topics/containers/what-is-clair"&gt;clair&lt;/a&gt; - is an open source project which provides a tool to monitor the
security of your containers through the static analysis of vulnerabilities
in appc and docker containers. [1].&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://access.redhat.com/documentation/en-us/red_hat_quay/3/html/manage_red_hat_quay/repo-mirroring-in-red-hat-quay"&gt;quay-mirror&lt;/a&gt; - it is a service
that provides mirroring functionality of external repository and pull
it into current one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-deploy"&gt;
&lt;h2&gt;How to deploy ?&lt;/h2&gt;
&lt;p&gt;The service can be deployed by using dedicated role provided in &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/sf-infra/+/refs/heads/master/roles/rdo/quay/"&gt;software-factory/sf-infra project&lt;/a&gt;
It deploys automatically required services such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;redis - an in-memory data structure store, used as a distributed,
in-memory key–value database, cache and message broker, with
optional durability,&lt;/li&gt;
&lt;li&gt;PostgreSQL - open source object-relational database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The playbook below relies on the &lt;cite&gt;quay&lt;/cite&gt; role to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;deploy Quay,&lt;/li&gt;
&lt;li&gt;setup two superusers that would be an owner of own project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This deployment is minimal and later will see how to use the role to add more
configuration to our Quay deployment.&lt;/p&gt;
&lt;p&gt;Two things worth to know:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Only admin user has password with at least 8 characters.
Other users password are generated after creating the superuser account.&lt;/li&gt;
&lt;li&gt;To generate a token for an organization, after creating a superuser
account (after bootstrap), login into the Quay as this user, create
new organization: &amp;quot;config&amp;quot;, then inside the organization &amp;quot;config&amp;quot;,
create new application &amp;quot;admin_token&amp;quot;, with:&lt;ul&gt;
&lt;li&gt;&amp;quot;Administer Organization&amp;quot;,&lt;/li&gt;
&lt;li&gt;&amp;quot;Administer Repositories&amp;quot;,&lt;/li&gt;
&lt;li&gt;&amp;quot;Create Repositories&amp;quot;,&lt;/li&gt;
&lt;li&gt;&amp;quot;View all visible repositories&amp;quot;,&lt;/li&gt;
&lt;li&gt;&amp;quot;Read/Write to any accessible repositories&amp;quot;,&lt;/li&gt;
&lt;li&gt;&amp;quot;Administer User&amp;quot; permissions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Bootstrap Quay service&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;fqdn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;enable_clair&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;enable_mirror&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;self_signed_certs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;initial_config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;quay_validate_cert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;database_secret_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;dc52fef2-eed2-4efd-9de6-5af89f86df0a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;46bc0133-09b0-486c-bef7-bbe1575f7672&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# NOTE: password needs to be at least 8 characters&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;quay_users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;admin@somemail.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;someuser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;someuser@someemail.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup quay&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;include_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rdo/quay&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;tasks_from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next steps for creating new project, users, etc. are done in &lt;a class="reference external" href="#Quay-organizations,users,roles..."&gt;section&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="loginpage" src="images/quay-1.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="quay-organizations-users-roles"&gt;
&lt;h2&gt;Quay - organizations, users, roles...&lt;/h2&gt;
&lt;div class="section" id="quay-components"&gt;
&lt;h3&gt;Quay components&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;organizations -organizations provide a way of sharing repositories
under a common namespace that does not belong to a single user,
but rather to many users in a shared setting (such as a company),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;teams - organizations are organized into a set of Teams which provide
access to a subset of the repositories under that namespace.
Teams have defined global permissions in the organization: member, creator
and admin. More info &lt;a class="reference external" href="https://docs.quay.io/glossary/teams.html"&gt;here&lt;/a&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;users - it is a user account that later would connect to the Quay
by using for example: &lt;cite&gt;podman login&lt;/cite&gt; command,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;robots - it is an account which can be shared by multiple repositories
that are owned by a user organization. That account might be helpful,
when you create new container images in CI and you would like just to push
the content to the repository,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;prototypes - it is default permissions in the organization,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;applications - it generates an API &lt;cite&gt;token&lt;/cite&gt; possible permissions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;administer organization,&lt;/li&gt;
&lt;li&gt;administer repositories,&lt;/li&gt;
&lt;li&gt;create repositories,&lt;/li&gt;
&lt;li&gt;view all visible repositories,&lt;/li&gt;
&lt;li&gt;read/write to any accessible repositories,&lt;/li&gt;
&lt;li&gt;super user access,&lt;/li&gt;
&lt;li&gt;administer user,&lt;/li&gt;
&lt;li&gt;read user information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The applications can be used by for example &lt;cite&gt;pruner&lt;/cite&gt; script, to
set expiration time to the image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;tokens - a string that can communicate with Quay API that has
already configured permissions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we enhance our playbook to setup some organizations and playbooks.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create project, user, robot etc.:
As it was mentioned earlier, token generation are done in application.
Create application before execute playbook with &lt;cite&gt;quay-project-creation&lt;/cite&gt; role.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;fqdn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;enable_clair&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;enable_mirror&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;self_signed_certs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;initial_config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;quay_validate_cert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;database_secret_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;dc52fef2-eed2-4efd-9de6-5af89f86df0a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;46bc0133-09b0-486c-bef7-bbe1575f7672&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;quay_users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Token for admin is generated during bootstrap.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Later it is located in: /var/data/quay/admin_token&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;admin@somemail.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GXI7D7Y4RY7C6KQA23P435SJZTO126WZ&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Password for someuser is located in: /var/data/quay/someuser_token&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# The token is created in created application.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;someuser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;someuser@someemail.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;33W59Q10MHLWX79G8LAU722DMP2819ZT&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;quay_organizations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# The token variable is necessary just for RDO deployment, where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# new created application token is used by the pruner script to&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# cleanup old images. More information in: `Pruner` section.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;someuser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;myorganization1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;myorganization2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup quay - reconfigure&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;include_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rdo/quay&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;tasks_from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Configure Quay projects&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;include_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rdo/quay-project-creation&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;tasks_from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="users" src="images/quay-2.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="config_application" src="images/quay-3.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="application_permissions" src="images/quay-4.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="application_permissions_authorize" src="images/quay-5.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="repositories" src="images/quay-6.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="robotInOrganization" src="images/quay-7.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="quay-config-mode"&gt;
&lt;h3&gt;Quay config mode&lt;/h3&gt;
&lt;p&gt;The Quay service has a dedicated startup mode, that the administrator would
be able to manage service configuration via Web interface.&lt;/p&gt;
&lt;p&gt;By using &lt;cite&gt;quay&lt;/cite&gt; role from from sf-infra project, there is an Ansible
variable: &lt;cite&gt;initial_config&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Below is an example playbook to start the service in &amp;quot;config mode&amp;quot;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;fqdn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;enable_clair&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;enable_mirror&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;self_signed_certs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;initial_config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;quay_validate_cert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;database_secret_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;dc52fef2-eed2-4efd-9de6-5af89f86df0a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;46bc0133-09b0-486c-bef7-bbe1575f7672&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;quay_users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;admin@somemail.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup quay&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;include_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rdo/quay&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;tasks_from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After playbook finish, the site should be available on &lt;cite&gt;http://quay.dev&lt;/cite&gt;
with credentials:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username: quayconfig
password: secret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can always use SSH tuneling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L &lt;span class="m"&gt;8443&lt;/span&gt;:localhost:443 -L &lt;span class="m"&gt;8080&lt;/span&gt;:localhost:80 centos@quay.dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then the site would be available on &lt;cite&gt;http://localhost:8080&lt;/cite&gt;.&lt;/p&gt;
&lt;img alt="quayconfig" src="images/quay-8.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="quay-user-automation"&gt;
&lt;h2&gt;Quay user automation&lt;/h2&gt;
&lt;div class="section" id="python-quay-tool"&gt;
&lt;h3&gt;Python Quay tool&lt;/h3&gt;
&lt;p&gt;The Python Quay tool is a Python base script, that helps automate
the Quay deployment.
For example, there is some new Openstack release and each release
got its own dedicated organization just for it.
That needs the following manual actions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create organization,&lt;/li&gt;
&lt;li&gt;create &lt;cite&gt;robot&lt;/cite&gt; user,&lt;/li&gt;
&lt;li&gt;create default permissions for robot user (prototype),&lt;/li&gt;
&lt;li&gt;create &lt;cite&gt;creators&lt;/cite&gt; team that will allow create new repositories,&lt;/li&gt;
&lt;li&gt;add the robot user to the team.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of those actions can be done using the Quay Tool which is
communicating with the Quay API and perform required actions.&lt;/p&gt;
&lt;p&gt;The tool repository is available &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/python-quay-tool"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example commands that you can find in the tool:&lt;/p&gt;
&lt;p&gt;Set image to be public:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quaytool --api-url https://quay.dev/api/v1 --token &amp;lt;token&amp;gt; --organization myorganization --visibility public
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Specify image repository to be public:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quaytool --api-url https://quay.dev/api/v1 --token &amp;lt;token&amp;gt; --organization myorganization --repository &lt;span class="nb"&gt;test&lt;/span&gt; --repository test2 --visibility public
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set all repository to be private, but skip some of them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quaytool --api-url https://quay.dev/api/v1 --token &amp;lt;token&amp;gt; --organization myorganization --skip test3 --skip test4 --visibility public
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;List all robots in organization:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quay_tool --api-url https://quay.dev/api/v1 --organization &lt;span class="nb"&gt;test&lt;/span&gt; --token sometoken --insecure --list-robots
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create robot in organization:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quay_tool --api-url https://quay.dev/api/v1 --organization &lt;span class="nb"&gt;test&lt;/span&gt; --token sometoken --create-robot bender
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set write permissions for a user for repositories inside the
organziation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quaytool  --api-url https://quay.dev/api/v1 --organization &lt;span class="nb"&gt;test&lt;/span&gt; --token sometoken --user test+cirobot --set-permissions
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restore deleted tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quaytool --api-url https://quay.dev/api/v1 --organization &lt;span class="nb"&gt;test&lt;/span&gt; --token sometoken--tag 14ee273e8565960cf6d5b6e26ae92ade --restore-tag
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set the prototype (default permissions) in the organization. By default
it creates prototype with write permissions.&lt;/p&gt;
&lt;p&gt;For a user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quaytool  --api-url https://quay.dev/api/v1 --organization &lt;span class="nb"&gt;test&lt;/span&gt; --token sometoken --create-prototype --user test+cirobot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a team:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quaytool  --api-url https://quay.dev/api/v1 --organization &lt;span class="nb"&gt;test&lt;/span&gt; --token sometoken --create-prototype --team creators
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pruner"&gt;
&lt;h3&gt;Pruner&lt;/h3&gt;
&lt;p&gt;The RDO team is using &lt;cite&gt;pruner&lt;/cite&gt; scripts that are communicating with the DLRN (Delorian)
service to get the latest promotion hash. Later, images containing the
hash in the tag, will be skipped from deletion.&lt;/p&gt;
&lt;p&gt;The pruner script is using Quay API. To communicate with the API, first you
need to create a dedicated application in Quay inside your organization with
following permissions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;administer organization,&lt;/li&gt;
&lt;li&gt;view all visible repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="pruner-application-token" src="images/quay-9.jpg" /&gt;
&lt;p&gt;You can find the pruner scripts used by the RDO project &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/sf-infra/+/refs/heads/master/roles/rdo/quay/files/quay_tag_pruner.py"&gt;here&lt;/a&gt;.
Other scripts and crontab job you can find in the &lt;cite&gt;sf-infra&lt;/cite&gt; project
in &lt;cite&gt;roles/rdo/quay&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="swagger"&gt;
&lt;h3&gt;Swagger&lt;/h3&gt;
&lt;p&gt;Swagger is a suite of tools for API developers from SmartBear Software and
a former specification upon which the OpenAPI Specification is based.&lt;/p&gt;
&lt;p&gt;You can start running the Swagger tool in the container and communicate
with Quay API.&lt;/p&gt;
&lt;p&gt;How to start Swagger:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Start swagger container&lt;/span&gt;
podman run -p &lt;span class="m"&gt;8888&lt;/span&gt;:8080 -e &lt;span class="nv"&gt;API_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://quay.dev/api/v1/discovery docker.io/swaggerapi/swagger-ui

&lt;span class="c1"&gt;# If you are using local instance with firewall rules, you can tunel&lt;/span&gt;
&lt;span class="c1"&gt;# the ssh connection and redirect the port&lt;/span&gt;
&lt;span class="c1"&gt;# OPTIONAL&lt;/span&gt;
ssh -L &lt;span class="m"&gt;18888&lt;/span&gt;:localhost:8888 centos@quay.dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After running above commands, you should be able to reach the swagger
Web UI interface on URL: &lt;cite&gt;http://quay.dev:8080&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;More information how to use Swagger with Quay you can find &lt;a class="reference external" href="https://access.redhat.com/documentation/en-us/red_hat_quay/3/html/red_hat_quay_api_guide/using_the_red_hat_quay_api#accessing_your_quay_api_from_a_web_browser"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-how-to-automate-quay-organization-deployment-base-on-tripleo-release"&gt;
&lt;h3&gt;Example how to automate Quay organization deployment base on TripleO release&lt;/h3&gt;
&lt;p&gt;The RDO Project has automated the creation of projects, users, robots, prototypes, etc.
There is a dedicated &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/sf-infra/+/refs/heads/master/roles/rdo/quay-project-creation/"&gt;role&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The bootstrap new organization in &lt;cite&gt;tripleo&lt;/cite&gt; project is done in two steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add into the &lt;cite&gt;quay_organizations&lt;/cite&gt; Ansible variable, to the &lt;cite&gt;tripleo&lt;/cite&gt; object a
new entry, that creates a new organization - let's call it &lt;cite&gt;my-new-project&lt;/cite&gt;.
That entry should have empty value for &lt;cite&gt;token&lt;/cite&gt; parameter, for example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;quay_organizations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;tripleo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tripleomastercentos9&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;token&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;generated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tripleomastercentos9&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;organization&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;application&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;prune_days&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;7&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-new-project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When the Ansible run is done, create a new application token inside the
new created organization ( &lt;cite&gt;my-new-project&lt;/cite&gt; ), and modify the playbook
variables and add into your organization a token, that you generated.
The step how to generate the token has been described in the &lt;a class="reference internal" href="#pruner"&gt;Pruner&lt;/a&gt; section.
Now the playbook vars will look like:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.dev&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;quay_organizations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;tripleo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tripleomastercentos9&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;token&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;generated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tripleomastercentos9&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;organization&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;application&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;prune_days&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;7&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-new-project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zjakss7oXpNAM8F22iB02abb9ysWb3rbN2raAApm&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;prune_days&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;7&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example of the whole Ansible playbook, you can find in &lt;a class="reference internal" href="#quay-components"&gt;Quay components&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;Also please note, that same actions can be perfomed without the Ansible
by using Web browser and Quay Web site.
All steps are described in the &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/python-quay-tool/+/refs/heads/master/README.md#basic-workflow-how-to-setup-new-organziation"&gt;README file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;p&gt;Quay provides documentation that has a troubleshooting chapter.
The documentation can be found &lt;a class="reference external" href="https://docs.quay.io/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Nov 18 to Dec 07 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-nov-18-to-dec-07-summary.html" rel="alternate"></link><published>2022-12-07T10:00:00+00:00</published><updated>2022-12-07T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-12-07:/sprint-2022-nov-18-to-dec-07-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We are working to bump grafana to 9.2.6 for sf-3.8, we builded grafyaml-ubi-8 container and are doing the integration right now&lt;/li&gt;
&lt;li&gt;we implemented a way to create a {tenant …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We are working to bump grafana to 9.2.6 for sf-3.8, we builded grafyaml-ubi-8 container and are doing the integration right now&lt;/li&gt;
&lt;li&gt;we implemented a way to create a {tenant}_zuul_admin role automatically in keycloak whenever a tenant is added in the resources. Zuul is then configured so that whoever holds that role is an admin on the tenant (web UI)&lt;/li&gt;
&lt;li&gt;we worked on updating the documentation on SSO and user management&lt;/li&gt;
&lt;li&gt;We have removed sfmanager usage removal from sf-ci &lt;a class="reference external" href="https://issues.redhat.com/browse/RHOSZUUL-1114"&gt;https://issues.redhat.com/browse/RHOSZUUL-1114&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have removed cauth related&lt;/li&gt;
&lt;li&gt;We worked on a sf-telegraf role base on container for mitigate the telegraf repository issue: &lt;a class="reference external" href="https://github.com/influxdata/telegraf/issues/12303"&gt;https://github.com/influxdata/telegraf/issues/12303&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-operator-sf-4-0"&gt;
&lt;h3&gt;SF-operator (sf-4.0)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We set the Zuul scheduler main.yaml automatically generated from the resources defintion &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/26703"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-operator/+/26703&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We enabled a first flow for the config-update post job&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Oct 28 to Nov 16 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-oct-28-to-nov-16-summary.html" rel="alternate"></link><published>2022-11-16T10:00:00+00:00</published><updated>2022-11-16T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-11-16:/sprint-2022-oct-28-to-nov-16-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a opensearch dashboards backup object tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We bumped opensearch and opensearch dashboards to 2.4.0 on sf-master&lt;/li&gt;
&lt;li&gt;We bumped zuul to 8.0.1 and nodepool to 8 …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a opensearch dashboards backup object tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We bumped opensearch and opensearch dashboards to 2.4.0 on sf-master&lt;/li&gt;
&lt;li&gt;We bumped zuul to 8.0.1 and nodepool to 8.0.0 on sf-master&lt;/li&gt;
&lt;li&gt;We took time to investigate CI flakyness&lt;/li&gt;
&lt;li&gt;Most of the keycloak patch chain has been merged&lt;/li&gt;
&lt;li&gt;We added support for default admin rules related to zuul tenants&lt;/li&gt;
&lt;li&gt;We worked on doc update for the keycloak migration&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-operator-sf-4-0"&gt;
&lt;h3&gt;SF-operator (sf-4.0)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added Landing Page to SF Operator&lt;/li&gt;
&lt;li&gt;We improved SF Operator Output&lt;/li&gt;
&lt;li&gt;We fixed an issue with ingress traffic in Kubernetes&lt;/li&gt;
&lt;li&gt;We proposed a change that is providing MetalLB traffic that can be used in the future deployment where ingress will be binding to the loadbalancer&lt;/li&gt;
&lt;li&gt;We created simply test to verify service ingress&lt;/li&gt;
&lt;li&gt;We added securityContenxt to some services and now is more stable&lt;/li&gt;
&lt;li&gt;We wrote some ADRs (Architecture Design Records) &lt;a class="reference external" href="https://softwarefactory-project.io/r/q/topic:sf-operator-adr"&gt;https://softwarefactory-project.io/r/q/topic:sf-operator-adr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Oct 07 to Oct 26 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-oct-07-to-oct-26-summary.html" rel="alternate"></link><published>2022-10-26T10:00:00+00:00</published><updated>2022-10-26T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-10-26:/sprint-2022-oct-07-to-oct-26-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added a feature for logscraper that it should not quit the service when zuul api is not reachable&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We bumped zuul version to 7.1.0&lt;/li&gt;
&lt;li&gt;We updated the sf-ui …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added a feature for logscraper that it should not quit the service when zuul api is not reachable&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We bumped zuul version to 7.1.0&lt;/li&gt;
&lt;li&gt;We updated the sf-ui to adapt to Keycloak&lt;/li&gt;
&lt;li&gt;We worked on tracking issues with SF-CI to remove flakyness&lt;/li&gt;
&lt;li&gt;We worked on switching from cauth to keycloak, various fixes along the way to opensearch, grafana, managesf&lt;/li&gt;
&lt;li&gt;We updated the Landing Page icons for Keycloak and Opensearch Dashboards&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-operator-sf-4-0"&gt;
&lt;h3&gt;SF-operator (sf-4.0)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added Managesf, Hound, GerritBot, Cgit, Postfix and Grafana Operators&lt;/li&gt;
&lt;li&gt;We started improving roles by adding securityContext or move some containers that were using &amp;quot;root&amp;quot; as a user that later would be easier to move the CI to Openshift&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Sep 16 to Oct 05 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-sep-16-to-oct-05-summary.html" rel="alternate"></link><published>2022-10-05T10:00:00+00:00</published><updated>2022-10-05T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-10-05:/sprint-2022-sep-16-to-oct-05-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the tracing spec implementation.&lt;/li&gt;
&lt;li&gt;We import Lukas Piwowarski Opensearch Dashboards objects that contains visualizations and dashboard&lt;/li&gt;
&lt;li&gt;We merged few changes related to subunit in ci-log-processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added feature on …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the tracing spec implementation.&lt;/li&gt;
&lt;li&gt;We import Lukas Piwowarski Opensearch Dashboards objects that contains visualizations and dashboard&lt;/li&gt;
&lt;li&gt;We merged few changes related to subunit in ci-log-processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added feature on sf-config to use public ip for services like zk for external instances&lt;/li&gt;
&lt;li&gt;We added feature to not ssh-keyscan hosts in private clouds but which are part of the deployment&lt;/li&gt;
&lt;li&gt;We made good progress on transitioning from cauth to keycloak - we're still seeing a few problems with tenant deployments but we are ironing out the bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-operator-sf-4-0"&gt;
&lt;h3&gt;SF-operator (sf-4.0)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've added the setup for Zuul to authenticate via Keycloak + default admin rules&lt;/li&gt;
&lt;li&gt;We've added the setup for Opensearch Dashboards to authenticate via Keycloak&lt;/li&gt;
&lt;li&gt;We've worked on having user authenticated via Keycloak to be able to get write access to opensearch indices&lt;/li&gt;
&lt;li&gt;We enabled CI job that is validating sf operator with Kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Introducing an effects system for Monocle</title><link href="https://www.softwarefactory-project.io/introducing-an-effects-system-for-monocle.html" rel="alternate"></link><published>2022-09-27T00:00:00+00:00</published><updated>2022-09-27T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2022-09-27:/introducing-an-effects-system-for-monocle.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;!-- This work is licensed under the Creative Commons Attribution 4.0 International License.
     To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
     or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
--&gt;&lt;p&gt;This blog post explains the reasons we integrated an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Effect_system"&gt;effect system&lt;/a&gt; in
&lt;a class="reference external" href="https://changemetrics.io/"&gt;Monocle&lt;/a&gt;. This post aims to be beginner friendly. We understand that
some concepts sound intimidating and we hope that this post demystifies
them a bit.&lt;/p&gt;
&lt;p&gt;First …&lt;/p&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;!-- This work is licensed under the Creative Commons Attribution 4.0 International License.
     To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
     or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
--&gt;&lt;p&gt;This blog post explains the reasons we integrated an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Effect_system"&gt;effect system&lt;/a&gt; in
&lt;a class="reference external" href="https://changemetrics.io/"&gt;Monocle&lt;/a&gt;. This post aims to be beginner friendly. We understand that
some concepts sound intimidating and we hope that this post demystifies
them a bit.&lt;/p&gt;
&lt;p&gt;First, it describes the context and its main issue. Next, it defines key
terms and concepts. Finally, it shows how we used the &lt;a class="reference external" href="https://github.com/haskell-effectful/effectful#readme"&gt;effectful&lt;/a&gt;
library to improve Monocle composability.&lt;/p&gt;
&lt;div class="section" id="context-and-problem-statement"&gt;
&lt;h2&gt;Context and problem statement&lt;/h2&gt;
&lt;p&gt;Monocle components are implemented using dedicated actions. The goal is
to limit the available side-effects and to maintain a clear separation
of concerns.&lt;/p&gt;
&lt;p&gt;The current implementation is based on the 'ReaderT over IO' pattern and
it is affected by a problem known as the 'n² instances'. The issue is
that adding new side-effects requires unnecessary modifications, which
limit the composability and testability of the components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-a-side-effect"&gt;
&lt;h2&gt;What is a side-effect?&lt;/h2&gt;
&lt;p&gt;A function has &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side-effects&lt;/a&gt; when it modifies a state outside of its
local environment. Common examples of side-effects include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Accessing the filesystem,&lt;/li&gt;
&lt;li&gt;Executing another program, or&lt;/li&gt;
&lt;li&gt;Connecting to a network service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, a function has side-effects if its output does not
depend solely on its input. It's valuable to identify side-effects
because they require extra care when testing and optimizing.&lt;/p&gt;
&lt;p&gt;The Haskell type system defines function with side-effects by wrapping
the return value in the IO action. For example, the standard 'readFile'
function is defined as &lt;tt class="docutils literal"&gt;FilePath &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; IO String&lt;/tt&gt;: given a file path,
'readFile' returns an IO action that produces a string.&lt;/p&gt;
&lt;p&gt;Previously, in Monocle, we used the 'ReaderT over IO' pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-a-reader"&gt;
&lt;h2&gt;What is a reader?&lt;/h2&gt;
&lt;p&gt;A reader provides an environment to the functions. For example, instead
of passing the environment using explicit parameters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;computeMetric&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Logger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Database&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Metric&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A reader can declare the available environment by wrapping the return
value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;computeMetric&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ReaderT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Metric&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function signature means: given a parameter, 'computeMetric'
returns a reader action that procudes a metric using the
&lt;tt class="docutils literal"&gt;(Logger, Database)&lt;/tt&gt; environment. This lets us focus on the business
logic without manually handling the environment. This is particularly
convenient for intermediary functions which don't have to pass the
environment parameters around. In other words, the reader re-arranges
the function's parameters to move the environment out of the way.&lt;/p&gt;
&lt;p&gt;A reader is analogous to this Python construct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute_metric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Metric&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This 'Api' object attaches the environment to a general purpose &lt;tt class="docutils literal"&gt;self&lt;/tt&gt;
reference which is passed on to every object method. The
&lt;tt class="docutils literal"&gt;compute_metric&lt;/tt&gt; method can freely read and modify the &lt;tt class="docutils literal"&gt;self&lt;/tt&gt;
attributes. On the other hand, the reader action precisely describes the
available environment for the &lt;tt class="docutils literal"&gt;computeMetric&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;The next sections present how Monocle used to be implemented and what is
the benefit of using an effect system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="monocle-action-contexts"&gt;
&lt;h2&gt;Monocle action contexts&lt;/h2&gt;
&lt;p&gt;The Monocle component actions were defined as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;newtype AppAction a = AppAction (ReaderT AppEnv IO a)&lt;/tt&gt; to
initialize the index and serve the API.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;newtype QueryActon a = QueryAction (ReaderT QueryEnv IO a)&lt;/tt&gt; to
serve user metric.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;newtype CrawlerAction a = CrawlerAction (ReaderT CrawlerEnv IO a)&lt;/tt&gt;
to collect changes data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of using the new types, the individual functions used mtl-style
typeclass constraints to enable generic implementations. For example
Monocle had:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;class TimeContext m&lt;/tt&gt;, to enable reading the local time,&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;class RetryContext m&lt;/tt&gt;, to catch network error and retry the action
with exponential backoff,&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;class LoggerContext m&lt;/tt&gt;, to log messages, and&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;class DatabaseContext m&lt;/tt&gt;, to access the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such typeclasses are different from Python's class: a typeclass defines
a set of methods that is shared across multiple types. This is analogous
to the Rust &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch10-02-traits.html"&gt;trait system&lt;/a&gt;. That means each action needed to provide
its own instance, for example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;instance DatabaseContext AppAction&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;instance DatabaseContext QueryAction&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Monocle also defined super constraints for the component code to avoid
listing the individual constraint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;class (TimeContext m, LoggerContext m, DatabaseContext m) =&amp;gt; AppContext m&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;class (LoggerContext m, DatabaseContext m) =&amp;gt; QueryContext m&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;class (TimeContext m, RetryContext m) =&amp;gt; CrawlerContext m&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So that the &lt;tt class="docutils literal"&gt;computeMetric&lt;/tt&gt; function was defined as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;computeMetric&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;QueryContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Metric&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, the &lt;tt class="docutils literal"&gt;getChanges&lt;/tt&gt; crawler function was defined as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;getChanges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;CrawlerContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Changes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Restricted side effects: the function can't do arbitrary IO.&lt;/li&gt;
&lt;li&gt;The constraints can be implemented differently depending on the
context.&lt;/li&gt;
&lt;li&gt;The types enforce the available effects. For example, accessing the
database from a crawler context is a compile time error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adding a new contraint requires adding new instances, the so called
'n² instances' problem.&lt;/li&gt;
&lt;li&gt;This abstraction has an overhead cost, though it was not noticable in
Monocle performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="effects-system"&gt;
&lt;h2&gt;Effects system&lt;/h2&gt;
&lt;p&gt;To improve the Monocle code base, we replaced the mtl-style constraints
with an effect system. Instead of using constraints for the execution
context, denoted &lt;tt class="docutils literal"&gt;m&lt;/tt&gt;, Monocle now uses a list of effect constraints,
denoted &lt;tt class="docutils literal"&gt;es&lt;/tt&gt;, along with the &lt;tt class="docutils literal"&gt;Eff&lt;/tt&gt; action provided by the
&lt;a class="reference external" href="https://github.com/haskell-effectful/effectful#readme"&gt;effectful&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;The main difference is that the effect's environments are defined
individually, and we no longer have to implement the &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; constraint
for every context. Effectful effectively lets us easily compose a list
of readers. To learn more about this technique, checkout the
&lt;a class="reference external" href="https://hackage.haskell.org/package/effectful-core-2.1.0.0/docs/Effectful-Dispatch-Static.html"&gt;Effectful.Dispatch.Static&lt;/a&gt; module documentation.&lt;/p&gt;
&lt;p&gt;We replaced the super contexts with a type alias to list all the
necessary effects in one place:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;type QueryEffects es = [LoggerEffect,DatabaseEffect] :&amp;gt;&amp;gt; es&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;type CrawlerEffects es = [TimeEffect,RetryEffect] :&amp;gt;&amp;gt; es&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the &lt;tt class="docutils literal"&gt;computeMetric&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;getChanges&lt;/tt&gt; functions are now defined
as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;computeMetric&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;QueryEffects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Eff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Metric&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;getChanges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;CrawlerEffects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Eff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Changes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The initial refactor aimed for a drop-in replacement so that only the
function's signature changed from &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;Eff es&lt;/tt&gt;. If you are
curious, you can check the &lt;a class="reference external" href="https://github.com/change-metrics/monocle/pull/954"&gt;PR#954&lt;/a&gt; which introduced the new
implementation.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This new implementation is arguably simpler: an effect is defined
only once.&lt;/li&gt;
&lt;li&gt;Effectful enables seamless integration with the existing Haskell
ecosystem.&lt;/li&gt;
&lt;li&gt;Eff is fast: the effect lookup is &lt;tt class="docutils literal"&gt;O(1)&lt;/tt&gt; according to its
&lt;a class="reference external" href="https://hackage.haskell.org/package/effectful-core-2.1.0.0/docs/Effectful-Internal-Effect.html#t:Effect"&gt;documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The effectful library is relatively new and the ecosystem is still
immature.&lt;/li&gt;
&lt;li&gt;The Eff implementation is more complicated than a simple Reader, for
example the process known as &lt;a class="reference external" href="https://github.com/fpco/unliftio#unlifting-in-2-minutes"&gt;unlifting&lt;/a&gt; requires extra attentions
when running concurrently.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We are satisfied with the transition and we are looking forward to
contributing to the effectful ecosystem by sharing the Monocle
implementations.&lt;/p&gt;
&lt;p&gt;Please note that behind the 'Action' and 'Context' mentioned in this
post, there is a fundamental structure called a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Monad_(functional_programming)"&gt;Monad&lt;/a&gt;. If you are not
familiar with the concept already, we recommend this &lt;a class="reference external" href="https://www.youtube.com/watch?v=t1e8gqXLbsU"&gt;computerphile
video&lt;/a&gt; by Graham Hutton.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Introduction to &lt;/&gt; htmx through a Simple WEB chat application</title><link href="https://www.softwarefactory-project.io/introduction-to-htmx-through-a-simple-web-chat-application.html" rel="alternate"></link><published>2022-09-26T00:00:00+00:00</published><updated>2022-09-26T00:00:00+00:00</updated><author><name>Fabien</name></author><id>tag:www.softwarefactory-project.io,2022-09-26:/introduction-to-htmx-through-a-simple-web-chat-application.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to introduce &lt;a class="reference external" href="https://htmx.org"&gt;htmx&lt;/a&gt; usage through a very simple chat
application. We'll expose and explain some code snippets from a
&lt;a class="reference external" href="https://github.com/morucci/schat/tree/16291940ab602a7c888c1a0f82acd995b24ae267"&gt;playground project&lt;/a&gt; named simple chat.&lt;/p&gt;
&lt;img alt="sChat UI" src="images/schat.png" /&gt;
&lt;p&gt;The playground application is written in Haskell but htmx usage is …&lt;/p&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;p&gt;This post aims to introduce &lt;a class="reference external" href="https://htmx.org"&gt;htmx&lt;/a&gt; usage through a very simple chat
application. We'll expose and explain some code snippets from a
&lt;a class="reference external" href="https://github.com/morucci/schat/tree/16291940ab602a7c888c1a0f82acd995b24ae267"&gt;playground project&lt;/a&gt; named simple chat.&lt;/p&gt;
&lt;img alt="sChat UI" src="images/schat.png" /&gt;
&lt;p&gt;The playground application is written in Haskell but htmx usage is not
tied to a specific language, and it can be used with any server side
language such as Python.&lt;/p&gt;
&lt;div class="section" id="what-is-htmx-1"&gt;
&lt;span id="what-is-htmx"&gt;&lt;/span&gt;&lt;h2&gt;What is htmx ?&lt;/h2&gt;
&lt;p&gt;htmx provides an easy way to build dynamic WEB frontends without the
need to write a ton of Javascript code. htmx is itself a Javascript
library that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;reacts to HTML attributes to fire events like AJAX requests&lt;/li&gt;
&lt;li&gt;updates the DOM based on server responses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With htmx any HTML element can issue requests to the backend, and every
element can be updated via the backend (not just the entire page).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-1"&gt;
&lt;span id="why"&gt;&lt;/span&gt;&lt;h2&gt;Why ?&lt;/h2&gt;
&lt;p&gt;Htmx brings lot of facilities to build WEB applications using only your
favorite backend language and simply relying on htmx facilities for
handling frontend events and rendering frontend elements. Indeed it is
often difficult to manage two different toolchains for the backend and
the frontend that needs to share data types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage-of-htmx-to-build-the-schat-application"&gt;
&lt;h2&gt;Usage of htmx to build the sChat application&lt;/h2&gt;
&lt;p&gt;To build the application we relied on serveral libraries:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.servant.dev"&gt;Servant&lt;/a&gt;: To build the web application (to handle routes and define
route' handlers)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hackage.haskell.org/package/websockets"&gt;WebSockets&lt;/a&gt;: To setup a WebSocket handler for enabling
communication between the frontend and the backend&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chrisdone.com/posts/lucid/"&gt;Lucid&lt;/a&gt;: A DSL to render HTML&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://htmx.org"&gt;htmx&lt;/a&gt;: Run on the client's browser, to render the application&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://tailwindcss.com/"&gt;Tailwindcss&lt;/a&gt;: Run on the client's browser, to apply CSS styles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But to keep this post short, we'll not dig into the usage of Servant or
Lucid but just focus on interactions between the frontend and the
backend using htmx.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="htmx-usage-to-build-schat"&gt;
&lt;h2&gt;htmx usage to build sChat&lt;/h2&gt;
&lt;div class="section" id="backend-http-endpoints"&gt;
&lt;h3&gt;Backend HTTP endpoints&lt;/h3&gt;
&lt;p&gt;sChat implements three endpoints under the following routes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;/&amp;quot;: This handler returns plain HTML data. It serves a HTML bootstrap
to connect to the WebSocket.&lt;/li&gt;
&lt;li&gt;&amp;quot;xstatic&amp;quot;: The handler serves static files. It serves htmx and
tailwindcss JS libraries&lt;/li&gt;
&lt;li&gt;&amp;quot;ws&amp;quot;: The WebSocket handler&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-root-endpoint-1"&gt;
&lt;span id="the-root-endpoint"&gt;&lt;/span&gt;&lt;h3&gt;The root &amp;quot;/&amp;quot; endpoint&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;sChatHTMLHandler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;sChatHTMLHandler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;doctypehtml_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;head_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;title_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Simple WebSocket Chat &amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;meta_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;xstaticScripts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;XStatic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htmx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;XStatic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tailwind&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;body_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container mx-auto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;makeAttribute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hx-ws&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connect:/ws&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;schat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function defines the HTML content to be returned to the client
after a connection on &amp;quot;/&amp;quot;.&lt;/p&gt;
&lt;p&gt;The head includes &lt;tt class="docutils literal"&gt;script&lt;/tt&gt; tags to tell the browser to load htmx and
Tailwindcss.&lt;/p&gt;
&lt;p&gt;The body defines a &lt;tt class="docutils literal"&gt;div&lt;/tt&gt; with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;hx-ws&lt;/span&gt;&lt;/tt&gt; attribute to tell htmx to
connect on the &lt;tt class="docutils literal"&gt;/ws&lt;/tt&gt; backend's endpoint. See &lt;a class="reference external" href="https://htmx.org/attributes/hx-ws/"&gt;hx-ws&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;Notice the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;id=&amp;quot;schat&amp;quot;&lt;/span&gt;&lt;/tt&gt; attribute, the backend will reference it to
update the client's DOM.&lt;/p&gt;
&lt;p&gt;When the client's browser open sChat, the first and only thing it does
is to connect to the Web Socket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ws-websocket-handler"&gt;
&lt;h3&gt;The '/ws' WebSocket handler&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- This function loops until the client disconnect&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;wsChatHandler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;SChatS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;WS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Connection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Handler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;wsChatHandler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;liftIO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;WS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withPingThread&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Send the rest of WEB UI to the client&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;WS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendTextData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;renderBS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;renderSChat&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Handle the client&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;handleClient&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;-- The WEB app UI&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;renderSChat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;renderSChat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;schat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;h-auto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bg-purple-100 border-4 border-purple-300 w-full h-full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;chatInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;chatDisplay&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;chatNotices&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mb-2 pb-1 bg-purple-300 text-xl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Simple WebSocket Chat&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;chatDisplay&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;flex flex-row space-x-2 mx-2 my-2 h-96&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;roomChat&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;roomMembers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;roomChat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-chat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;flex-auto w-3/4 h-full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;overflow-auto border-2 border-purple-200 h-full max-h-full&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;roomMembers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-members&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;overflow-auto border-2 border-purple-200 flex-auto w-1/4 h-full max-h-full&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;chatNotices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-notices&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;overflow-auto mb-2 mx-2 border-2 border-purple-200 h-16 max-h-full&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;--  The chat&amp;#39;s input field&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;chatInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;chatInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loginM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inputFieldName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isJust&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loginM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatInputMessage&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatInputName&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inputFieldPlaceholder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isJust&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loginM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter a message&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter your name&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- hx-ws attribute tells HTMX to send a payload on the WebSocket when the form is submitted&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;form_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hxWS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;send:submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hxSwapOOB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;innerHTML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mx-2 bg-purple-200 rounded-lg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;span_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;maybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;span_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;span_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pl-1 pr-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;toHtml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loginM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-sm rounded-lg bg-purple-50 border border-purple-300 focus:border-purple-400&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;-- The payload sent by HTMX can be identified via the name attribute&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inputFieldName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-input-field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;placeholder_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inputFieldPlaceholder&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- Ensure the field got the focus&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;script_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;htmx.find(&amp;#39;#chatroom-input-field&amp;#39;).focus()&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As soon as a new WS connection is established we enter in the
&lt;tt class="docutils literal"&gt;wsChatHandler&lt;/tt&gt; handler function.&lt;/p&gt;
&lt;p&gt;First, &lt;tt class="docutils literal"&gt;wsChatHandler&lt;/tt&gt; sends the application UI as defined by
&lt;tt class="docutils literal"&gt;renderSChat&lt;/tt&gt; on the WS. &lt;tt class="docutils literal"&gt;renderSchat&lt;/tt&gt; defines the following UI
blocks:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The title&lt;/li&gt;
&lt;li&gt;The input field that the user will use to enter a login name and send
messages&lt;/li&gt;
&lt;li&gt;The chat content block to display chat' messages&lt;/li&gt;
&lt;li&gt;The notice block to display notice' messages (like user connected,
...)&lt;/li&gt;
&lt;li&gt;The room members block to display connected clients&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some HTML tags own an id attribute mainly for htmx to be able to &lt;a class="reference external" href="https://htmx.org/attributes/hx-swap-oob/"&gt;swap&lt;/a&gt;
the content based on the payload send back by the backend to the
browser.&lt;/p&gt;
&lt;p&gt;Furthermore we add some Tailwindcss classes to prettify the UI.&lt;/p&gt;
&lt;p&gt;Here are the first bytes received from the backend by the client over
the WS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;schat&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;h-auto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bg-purple-100&lt;/span&gt;  &lt;span class="err"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, this is just plain HTML content. htmx swaps the content
of the &lt;tt class="docutils literal"&gt;chat&lt;/tt&gt; div on DOM by the content received from the backend. At
that point the UI on the browser is fully rendered.&lt;/p&gt;
&lt;div class="section" id="handling-the-client-login"&gt;
&lt;h4&gt;Handling the client login&lt;/h4&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;renderSchat&lt;/tt&gt; function renders an &lt;tt class="docutils literal"&gt;input&lt;/tt&gt; field with a
&lt;tt class="docutils literal"&gt;chatInputMessage&lt;/tt&gt;'s name attribute. The parent's &lt;tt class="docutils literal"&gt;form&lt;/tt&gt;
(&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;chatroom-input&lt;/span&gt;&lt;/tt&gt;) set an attribute &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;hx-ws:&lt;/span&gt; &amp;quot;send:submit&amp;quot;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;When the &lt;tt class="docutils literal"&gt;form&lt;/tt&gt; is validated the following JSON payload is sent over
the WebSocket by htmx.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;chatInputName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fabien&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;HEADERS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;HX-Request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;HX-Trigger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chatroom-input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;HX-Trigger-Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;HX-Target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;HX-Current-URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://127.0.0.1:8091/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our backend needs to react to that payload. For sChat, we need to wait
for such payload in order to validate the new client login. To do so,
the &lt;tt class="docutils literal"&gt;waitForLoginPayload&lt;/tt&gt; function blocks until a payload with a key
name &lt;tt class="docutils literal"&gt;chatInputName&lt;/tt&gt; is received on the WS. Then, the function returns
the login to the caller function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;waitForLoginPayload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;waitForLoginPayload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- Wait until the an input name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;dataMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;WS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;receiveDataMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extractMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dataMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatInputName&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;of&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;waitForLoginPayload&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nf"&gt;extractMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;WS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;DataMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;extractMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dataMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dataMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;of&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;WS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;of&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the client's login we want to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;refresh the input &lt;tt class="docutils literal"&gt;form&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;display the login name in front of the &lt;tt class="docutils literal"&gt;input&lt;/tt&gt; field&lt;/li&gt;
&lt;li&gt;change the &lt;tt class="docutils literal"&gt;input&lt;/tt&gt; placeholder text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do that, we simply send a new &lt;tt class="docutils literal"&gt;form&lt;/tt&gt; (using the &lt;tt class="docutils literal"&gt;renderInputChat&lt;/tt&gt;
function) to the client via the WS and rely on the &lt;a class="reference external" href="https://htmx.org/attributes/hx-swap-oob/"&gt;swap&lt;/a&gt; feature to
get the form updated. Note that, we use a bit of Javascript to ensure
that the &lt;tt class="docutils literal"&gt;input&lt;/tt&gt; field get the focus.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;loginE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tryAny&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;waitForLogin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loginE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;of&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;Right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;-- Replace the input login box with the input message box&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;WS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendTextData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;renderInputChat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cLogin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;-- Start handling the acknowledged client&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;handleConnected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;-- Helper to render the chat&amp;#39;s input field&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;renderInputChat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;renderBS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chatInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="handling-client-messages"&gt;
&lt;h4&gt;Handling client messages&lt;/h4&gt;
&lt;p&gt;Handling messages (input and rendering) follows the same technic as of
waiting for a message input payload on the WS and updating the client
DOM via the WS.&lt;/p&gt;
&lt;p&gt;After a client is 'connected', sChat starts two threads:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a &lt;tt class="docutils literal"&gt;recv&lt;/tt&gt; thread to process any message payload appearing on the WS.&lt;/li&gt;
&lt;li&gt;a &lt;tt class="docutils literal"&gt;send&lt;/tt&gt; thread to dispatch the right HTML payload via the WS to
the client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a message payload appears on the WS then the &lt;tt class="docutils literal"&gt;recv&lt;/tt&gt; thread calls
the &lt;tt class="docutils literal"&gt;extractMessage&lt;/tt&gt; function and creates an &lt;tt class="docutils literal"&gt;EMessage&lt;/tt&gt; data that is
sent to all connected client's queue. Then the &lt;tt class="docutils literal"&gt;send&lt;/tt&gt; thread reads the
queue and sends back the right payload via the WS to the client.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;EMessage&lt;/tt&gt; is rendered using the &lt;tt class="docutils literal"&gt;afterbegin&lt;/tt&gt;
&lt;a class="reference external" href="https://htmx.org/attributes/hx-swap/"&gt;swap&lt;/a&gt; method. Which means that
we insert the response before previous &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;chatroom-message&lt;/span&gt;&lt;/tt&gt; elements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extractMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wsD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatInputMessage&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;of&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inputMsg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getCurrentTime&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dispatchToAll&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;EMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myLogin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inputMsg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;renderMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;renderMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- The id and hx-swap-oob tell HTMX which elements to update in the DOM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hxSwapOOB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;afterbegin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;div_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;span_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-message-date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pr-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;toHtml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;formatDate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;span_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-message-login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pr-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;toHtml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mLogin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;span_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chatroom-message-content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;toHtml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We wont go over the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;chatroom-members&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;chat-notices&lt;/span&gt;&lt;/tt&gt; divs
update because they are updated using the same htmx's swap technic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="to-conclude"&gt;
&lt;h2&gt;To conclude&lt;/h2&gt;
&lt;p&gt;As you can seen, using htmx and its WebSocket feature, we were able to
build a dynamic WEB UI for our chat application without the need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;to build a complex REST API.&lt;/li&gt;
&lt;li&gt;to write Javascript client code to perform I/O with our backend and
update the client DOM.&lt;/li&gt;
&lt;li&gt;to use two different toolchains for the backend and UI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Htmx also supports regular HTTP target (GET, POST, ...) which are more
adapted for traditional WEB applications.&lt;/p&gt;
&lt;p&gt;Personnaly, I feel really happy to have learnt a bit about HTMX and got
the ability to write pretty quickly decent WEB frontends for server side
applications. Next, I'll attempt to use htmx in more complex and dynamic
applications.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Aug 26 to Sep 14 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-aug-26-to-sep-14-summary.html" rel="alternate"></link><published>2022-09-14T10:00:00+00:00</published><updated>2022-09-14T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-09-14:/sprint-2022-aug-26-to-sep-14-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added Elasticsearch exporter&lt;/li&gt;
&lt;li&gt;We investigated using opentelemtry python SDK for the Zuul tracing specification&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We containerized the purgelogs service.&lt;/li&gt;
&lt;li&gt;We added zuul-fingergw service on sf-zuul role for zuul-console&lt;/li&gt;
&lt;li&gt;We fixed …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added Elasticsearch exporter&lt;/li&gt;
&lt;li&gt;We investigated using opentelemtry python SDK for the Zuul tracing specification&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;div class="section" id="next-sf-release-sf-3-8"&gt;
&lt;h3&gt;next sf release (sf-3.8)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We containerized the purgelogs service.&lt;/li&gt;
&lt;li&gt;We added zuul-fingergw service on sf-zuul role for zuul-console&lt;/li&gt;
&lt;li&gt;We fixed issue where zuul and nodepool services are not enabled during sf-config run&lt;/li&gt;
&lt;li&gt;We containerized Logserver and Managesf SF services&lt;/li&gt;
&lt;li&gt;We updated Opensearch and Opensearch Dashboards services to newest version&lt;/li&gt;
&lt;li&gt;We have worked on the migration path from cauth to keycloak&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-operator-sf-4-0"&gt;
&lt;h3&gt;SF-operator (sf-4.0)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've added the setup for Gerrit to authenticate via Keycloak&lt;/li&gt;
&lt;li&gt;We've added the setup to handle SSH key fetching via KC to Gerrit user account&lt;/li&gt;
&lt;li&gt;We added initial system config to the sf-operator to be able to trigger test job.&lt;/li&gt;
&lt;li&gt;We added a jaeger service to manage telemetry&lt;/li&gt;
&lt;li&gt;We added a develop mode to restart the service using local source.&lt;/li&gt;
&lt;li&gt;We added Lodgeit K8s Operator and started on Managesf&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Aug 05 to Aug 24 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-aug-05-to-aug-24-summary.html" rel="alternate"></link><published>2022-08-24T10:00:00+00:00</published><updated>2022-08-24T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-08-24:/sprint-2022-aug-05-to-aug-24-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ci-log-processing: We fixed issue related to wrong parsing performance.json file&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We containerized the github ssh key updater middleware and are working on deploying it along keycloak.&lt;/li&gt;
&lt;li&gt;We have created Lodgeit, Murmur and Mosquitto SF services …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ci-log-processing: We fixed issue related to wrong parsing performance.json file&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We containerized the github ssh key updater middleware and are working on deploying it along keycloak.&lt;/li&gt;
&lt;li&gt;We have created Lodgeit, Murmur and Mosquitto SF services for sf-operator&lt;/li&gt;
&lt;li&gt;We containerized Mosquitto SF services&lt;/li&gt;
&lt;li&gt;We added a standalone mode to the sf-operator to enable deploying resources without running kubectl apply first.&lt;/li&gt;
&lt;li&gt;We updated zuul and nodepool to the latest version in sf-config&lt;/li&gt;
&lt;li&gt;We updated the zuul-weeder service to better display periodic pipelines, see &lt;a class="reference external" href="https://softwarefactory-project.io/weeder/tenant/rdoproject.org/info"&gt;https://softwarefactory-project.io/weeder/tenant/rdoproject.org/info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We finally finished renaming elk stack to opensearch&lt;/li&gt;
&lt;li&gt;We added diskclass resource that operator can be running on kubernetes not deployed on kind&lt;/li&gt;
&lt;li&gt;We improved opensearch and opensearch dashboards in sf-operators&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Jul 15 to Aug 03 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-jul-15-to-aug-03-summary.html" rel="alternate"></link><published>2022-08-03T10:00:00+00:00</published><updated>2022-08-03T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-08-03:/sprint-2022-jul-15-to-aug-03-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the pending Zuul spec.&lt;/li&gt;
&lt;li&gt;We added prometheus probe to the Zuul operator&lt;/li&gt;
&lt;li&gt;we worked on zuul web API error pages&lt;/li&gt;
&lt;li&gt;We worked on fixing logsender performance.json file due there was some changes in performance.json …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the pending Zuul spec.&lt;/li&gt;
&lt;li&gt;We added prometheus probe to the Zuul operator&lt;/li&gt;
&lt;li&gt;we worked on zuul web API error pages&lt;/li&gt;
&lt;li&gt;We worked on fixing logsender performance.json file due there was some changes in performance.json file and it fails on sending it to the Opensearch&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We started to integrate the config-update job into the sf-operator&lt;/li&gt;
&lt;li&gt;We containerized Hound, Cgit, InfluxDB and LogServer&lt;/li&gt;
&lt;li&gt;We are currently developing sf-operator and added Lodgeit and Murmur SF services&lt;/li&gt;
&lt;li&gt;We changed name of elasticsearch role to opensearch&lt;/li&gt;
&lt;li&gt;We added opensearch component in sf-operator&lt;/li&gt;
&lt;li&gt;We removed logstash service from sf-config project and it has been replaced by sf-log-processing role&lt;/li&gt;
&lt;li&gt;we started writing a middleware to synchronize ssh keys between keycloak and gerrit in go&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>How to manually update Kubernetes Resources</title><link href="https://www.softwarefactory-project.io/how-to-manually-update-kubernetes-resources.html" rel="alternate"></link><published>2022-07-15T00:00:00+00:00</published><updated>2022-07-15T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2022-07-15:/how-to-manually-update-kubernetes-resources.html</id><summary type="html">&lt;p&gt;This article demonstrates different strategies to update kubernetes resources.&lt;/p&gt;
&lt;div class="section" id="context-and-problem-statement"&gt;
&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;
&lt;p&gt;Our goal is to update resource without overwritting changes made outside of our control.
For example, we would like to upgrade a container image version or a deployment replicas count.&lt;/p&gt;
&lt;p&gt;In the context of a kubernetes operator …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This article demonstrates different strategies to update kubernetes resources.&lt;/p&gt;
&lt;div class="section" id="context-and-problem-statement"&gt;
&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;
&lt;p&gt;Our goal is to update resource without overwritting changes made outside of our control.
For example, we would like to upgrade a container image version or a deployment replicas count.&lt;/p&gt;
&lt;p&gt;In the context of a kubernetes operator, there are two forms of resource update: &lt;em&gt;replace&lt;/em&gt; and &lt;em&gt;patch&lt;/em&gt;.
To demonstrate how the update process works, we'll use the API directly by starting a proxy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl proxy --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resource-version"&gt;
&lt;h2&gt;Resource Version&lt;/h2&gt;
&lt;p&gt;Each resource is assigned a version number in its metadata.
In this example, we create a deployment named &lt;em&gt;demo-deployment&lt;/em&gt; in the namespace &lt;em&gt;tristanc&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPOST -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; http://localhost:8080/apis/apps/v1/namespaces/tristanc/deployments --data-binary @- &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;  &amp;quot;metadata&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;demo-deployment&amp;quot;},&lt;/span&gt;
&lt;span class="s"&gt;  &amp;quot;spec&amp;quot;: {&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;replicas&amp;quot;: 1,&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;selector&amp;quot;: {&amp;quot;matchLabels&amp;quot;: {&amp;quot;app&amp;quot;: &amp;quot;demo&amp;quot;}},&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;template&amp;quot;: {&lt;/span&gt;
&lt;span class="s"&gt;      &amp;quot;metadata&amp;quot;: {&amp;quot;labels&amp;quot;: {&amp;quot;app&amp;quot;: &amp;quot;demo&amp;quot;}},&lt;/span&gt;
&lt;span class="s"&gt;      &amp;quot;spec&amp;quot;: {&lt;/span&gt;
&lt;span class="s"&gt;        &amp;quot;containers&amp;quot;: [{&lt;/span&gt;
&lt;span class="s"&gt;            &amp;quot;name&amp;quot;: &amp;quot;container-1&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;            &amp;quot;args&amp;quot;: [&amp;quot;sleep&amp;quot;, &amp;quot;infinity&amp;quot;],&lt;/span&gt;
&lt;span class="s"&gt;            &amp;quot;image&amp;quot;: &amp;quot;registry.fedoraproject.org/fedora:latest&amp;quot;,&lt;/span&gt;
&lt;span class="s"&gt;            &amp;quot;imagePullPolicy&amp;quot;: &amp;quot;IfNotPresent&amp;quot;,&lt;/span&gt;
&lt;span class="s"&gt;        }]&lt;/span&gt;
&lt;span class="s"&gt;      }&lt;/span&gt;
&lt;span class="s"&gt;    }&lt;/span&gt;
&lt;span class="s"&gt;  }&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The API returns the resource state with its &lt;em&gt;resourceVersion&lt;/em&gt;.
Each time the resource is updated, the API automatically update the version number.&lt;/p&gt;
&lt;p&gt;You can run the update request below using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XVERB -H &lt;span class="s2"&gt;&amp;quot;Content-Type: TYPE&amp;quot;&lt;/span&gt; http://localhost:8080/apis/apps/v1/namespaces/tristanc/deployments/demo-deployment --data-binary @- &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;  BODY&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="json-patch"&gt;
&lt;h2&gt;JSON Patch&lt;/h2&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://tools.ietf.org/html/rfc6902"&gt;JSON Patch RFC 6902&lt;/a&gt; is defined by a &lt;strong&gt;op&lt;/strong&gt; operation, &lt;strong&gt;path&lt;/strong&gt; destination and a &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPATCH -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json-patch+json&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="add-a-container"&gt;
&lt;h3&gt;Add a container&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/spec/template/spec/containers/-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;container-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sleep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;infinity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;registry.fedoraproject.org/fedora:latest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;imagePullPolicy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;IfNotPresent&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="remove-a-container"&gt;
&lt;h3&gt;Remove a container&lt;/h3&gt;
&lt;p&gt;List indices are zero based.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;remove&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/spec/template/spec/containers/1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="change-the-image"&gt;
&lt;h3&gt;Change the image&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;/spec/template/spec/containers/0/image&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;registry.fedoraproject.org/fedora:36&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="test"&gt;
&lt;h3&gt;Test&lt;/h3&gt;
&lt;p&gt;A JSON Patch can also assert a desired state:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/spec/template/spec/containers/0/image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;registry.fedoraproject.org/fedora:37&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="json-merge-patch"&gt;
&lt;h2&gt;JSON Merge Patch&lt;/h2&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://tools.ietf.org/html/rfc7386"&gt;JSON Merge Patch RFC 7396&lt;/a&gt; is more similar to a diff.
List elements can't be manipulated and the full list needs to be provided.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPATCH -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/merge-patch+json&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="change-containers"&gt;
&lt;h3&gt;Change containers&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;spec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;spec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;containers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;container-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sleep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;infinity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;registry.fedoraproject.org/fedora:latest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;imagePullPolicy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;IfNotPresent&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;container-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sleep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;infinity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;registry.fedoraproject.org/fedora:latest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;imagePullPolicy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;IfNotPresent&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="change-replica-count"&gt;
&lt;h3&gt;Change replica count&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;spec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;replicas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="strategic-merge-patch"&gt;
&lt;h2&gt;Strategic Merge Patch&lt;/h2&gt;
&lt;p&gt;A strategic patch is similar to a JSON Merge Patch, but with custom behaviors defined in the OpenAPI.
For example, the pod template spec enables adding containers to the list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPATCH -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/strategic-merge-patch+json&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="add-a-container-1"&gt;
&lt;h3&gt;Add a container&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;spec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;spec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;containers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;container-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sleep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;infinity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;registry.fedoraproject.org/fedora:latest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;imagePullPolicy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;IfNotPresent&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="server-side-apply"&gt;
&lt;h2&gt;Server Side Apply&lt;/h2&gt;
&lt;p&gt;Since Kubernetes v1.22, a new option is available when using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPATCH -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/apply-patch+yaml&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This feature leverage a new &amp;quot;field management&amp;quot; mechanism, and it seems useful when multiple clients
are updating a single resource.
This feature is fairly new, and it is not yet fully supported by the controller-runtime client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="replace"&gt;
&lt;h2&gt;Replace&lt;/h2&gt;
&lt;p&gt;The other solution is to replace the resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPUT -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The body must contains the full resource, otherwise the request will fail.&lt;/p&gt;
&lt;div class="section" id="get-and-replace"&gt;
&lt;h3&gt;Get and replace&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://localhost:8080/apis/apps/v1/namespaces/tristanc/deployments/demo-deployment &amp;gt; dep.json
&lt;span class="c1"&gt;# edit the file&lt;/span&gt;
curl -XPUT -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; http://localhost:8080/apis/apps/v1/namespaces/tristanc/deployments/demo-deployment -d@dep.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that changing the resource results in a new &lt;em&gt;resourceVersion&lt;/em&gt;, and trying to repeat the last request will fails because the version no longer match.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Kubernetes provides multiple update strategies to manage resources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The easiest option seems to be the Strategic Merge Patch, or the new Server Side Apply, but the resulting update depend on the nature of the change,
for example it is not clear how to remove an element from a list.&lt;/li&gt;
&lt;li&gt;JSON Patch seems to be the most efficient, but the request body needs to be prepared. JSON Merge Patch is another solution,
but removing attributes requires using a &lt;em&gt;null&lt;/em&gt; value. Learn more about the difference in this &lt;a class="reference external" href="https://erosb.github.io/post/json-patch-vs-merge-patch/"&gt;post&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Finally replace seems to be most straightforward solution, but the full resources needs to be known in advance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The controller-runtime provides a convenient Update method to use the replace strategy: &lt;a class="reference external" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/client#example-Client-Update"&gt;Example Client Update&lt;/a&gt;.
This pattern works great in the context of an operator where the state of the resources is usually known before making creation or update request.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Jun 24 to Jul 13 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-jun-24-to-jul-13-summary.html" rel="alternate"></link><published>2022-07-13T10:00:00+00:00</published><updated>2022-07-13T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-07-13:/sprint-2022-jun-24-to-jul-13-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We Updated zuul-operator to latest CRD and fixed issues with pykube-ng&lt;/li&gt;
&lt;li&gt;We are working on improving API error messages and their handling in the GUI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated how to integrate the zuul-operator, but it is a …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We Updated zuul-operator to latest CRD and fixed issues with pykube-ng&lt;/li&gt;
&lt;li&gt;We are working on improving API error messages and their handling in the GUI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated how to integrate the zuul-operator, but it is a lot of work&lt;/li&gt;
&lt;li&gt;We continued developping the sf-operator, it now deploy keycloak, gerrit, etherpad, zookeeper and zuul&lt;/li&gt;
&lt;li&gt;We have sub-released of SF 3.7 &lt;a class="reference external" href="https://www.softwarefactory-project.io/releases/3.7/"&gt;https://www.softwarefactory-project.io/releases/3.7/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have bumped the Gerrit container to 3.4.5 &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/containers/+/25360"&gt;https://softwarefactory-project.io/r/c/containers/+/25360&lt;/a&gt; and &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/25365/"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config/+/25365/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We containerized Murmur and Lodgeit&lt;/li&gt;
&lt;li&gt;We started to containerized Hound, Cgit and Gateway&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Hacking Zuul for developers</title><link href="https://www.softwarefactory-project.io/hacking-zuul-for-developers.html" rel="alternate"></link><published>2022-07-01T00:00:00+00:00</published><updated>2022-07-01T00:00:00+00:00</updated><author><name>mhuin</name></author><id>tag:www.softwarefactory-project.io,2022-07-01:/hacking-zuul-for-developers.html</id><summary type="html">&lt;p&gt;Zuul can be, honestly, quite an intimidating beast to handle. Running Zuul
itself requires setting up many satellite services like mariadb and zookeeper.
This might make it hard to quickly test small changes, or just tinker with the code base.&lt;/p&gt;
&lt;p&gt;I will share some tips on how to experiment or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Zuul can be, honestly, quite an intimidating beast to handle. Running Zuul
itself requires setting up many satellite services like mariadb and zookeeper.
This might make it hard to quickly test small changes, or just tinker with the code base.&lt;/p&gt;
&lt;p&gt;I will share some tips on how to experiment or play around with Zuul's code.&lt;/p&gt;
&lt;div class="section" id="the-regular-way-zuul-ci"&gt;
&lt;h2&gt;The regular way: Zuul CI&lt;/h2&gt;
&lt;p&gt;When you are putting in the effort to modify Zuul's code base, chances are you would
like your change to eventually get merged into &lt;a class="reference external" href="https://opendev.org/zuul/zuul"&gt;the upstream repository&lt;/a&gt;.
Then you are going to have to get a &amp;quot;Verified +1&amp;quot; review from Zuul's automated CI.&lt;/p&gt;
&lt;p&gt;In that case, you might as well just run your tests in the upstream CI. The one major drawback
that I see with this, is that the feedback loop can be relatively long: the test suite
is quite exhaustive, and you are sharing testing resources with other developers from all
of Opendev. It is not rare to get feedback from the CI only one or two hours after having
pushed your change (and that's honestly not a bad performance at all).&lt;/p&gt;
&lt;p&gt;A simple way to speed up the process is to limit your testing to the strict minimum:
linters and tox-py*. You could even drop the linters tests as they require very little
dependencies and can be run in your local dev environment even with limited resources:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
tox -elinters
&lt;/pre&gt;
&lt;p&gt;Locate the &lt;cite&gt;.zuul.yaml&lt;/cite&gt; file at the root of your local copy of the Zuul repository
and comment out the jobs you don't want to run like so:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;node_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;16&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;release_python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;python3&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-build-image&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-tox-docs&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;tox-linters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;tox_install_bindep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;zuul-tox-py38&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;zuul-tox-py39&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-tox-py39-multi-scheduler&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-build-dashboard-openstack-whitelabel&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-build-dashboard-software-factory&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-build-dashboard-opendev&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - nodejs-run-lint:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#      vars:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#        zuul_work_dir: &amp;quot;{{ zuul.project.src_dir }}/web&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - nodejs-run-test:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#      vars:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#        zuul_work_dir: &amp;quot;{{ zuul.project.src_dir }}/web&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#      files:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#        - web/.*&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-stream-functional-2.8&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-stream-functional-2.9&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-stream-functional-5&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-tox-remote&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-quick-start:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#      requires: nodepool-container-image&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#      dependencies: zuul-build-image&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-tox-zuul-client&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;#  - zuul-build-python-release&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Don't forget however to uncomment these when your patch is ready for review; otherwise
it has no chance to get merged. :)&lt;/p&gt;
&lt;p&gt;It would even be possible to limit the tox-py* job to run a given set of tests rather than the
full unit test suite, but I strongly recommend against doing that. This would risk hiding some
unexpected side effects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-example-compose"&gt;
&lt;h2&gt;The example compose&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/latest/tutorials/quick-start.html"&gt;Zuul's documentation&lt;/a&gt; provides
a very nifty Docker (or podman) &lt;a class="reference external" href="https://opendev.org/zuul/zuul/src/branch/master/doc/source/examples/docker-compose.yaml"&gt;compose file&lt;/a&gt;.
with just:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; doc/source/examples &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; podman-compose up
&lt;/pre&gt;
&lt;p&gt;You end up with a gerrit service, and a fully operational Zuul with a tenant and a few projects
pre-configured, in just minutes. This makes it super simple to run some basic workflows on this setup. It is
even possible to start a &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/latest/tutorials/keycloak.html"&gt;Keycloak server to add authentication&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;But what I appreciate most is the ability to live-patch Zuul if you want to test some code immediately.
Since I don't want to modify the upstream compose file, I just &amp;quot;brutishly&amp;quot; copy the python code into the
service containers and restart them. Let's say I have modified the REST API (assuming I am still in the
doc/source/examples directory) - replace &lt;cite&gt;podman&lt;/cite&gt; with &lt;cite&gt;docker&lt;/cite&gt; depending on what you use:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
podman cp ../../../zuul examples_web_1:/usr/local/lib/python3.8/site-packages/
podman-compose restart web
&lt;/pre&gt;
&lt;p&gt;And that's it! The web component is now running your modified code. You can check the service's logs
with:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
podman logs -f examples_web_1
&lt;/pre&gt;
&lt;p&gt;When you are done playing, make sure to destroy your patched containers with &lt;cite&gt;podman-compose down&lt;/cite&gt;
so that you start from a clean slate next time you deploy the compose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gui-development"&gt;
&lt;h2&gt;GUI development&lt;/h2&gt;
&lt;p&gt;Setting up a development server is pretty easy by following &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/latest/developer/javascript.html#development"&gt;the upstream documentation.&lt;/a&gt;
Especially useful is the ability to run the GUI against a Zuul REST server of my choosing;
if I want to use the web service from the example compose I would run:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;REACT_APP_ZUUL_API&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://localhost:9000/api/&amp;quot;&lt;/span&gt; yarn start
&lt;/pre&gt;
&lt;p&gt;It is also totally possible to use softwarefactory-project.io's or Opendev's Zuul instance
this way; however you are likely to run into &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS-related problems&lt;/a&gt; in your browser since
the &amp;quot;origin&amp;quot; header differs from the value allowed by the distant servers. This a security
measure to ensure malicious javascript code living on a third-party server cannot be accidentally
allowed to do nasty stuff, thus CORS shouldn't be disabled (and as far as I can tell, most browsers
will make it very hard to do so in order to discourage you).&lt;/p&gt;
&lt;p&gt;You can circumvent this problem by using a CORS proxy. I have been using this one without any problem
so far whenever I want to see how my changes look with data from Opendev's Zuul:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
podman run -p &lt;span class="m"&gt;8000&lt;/span&gt;:8000 bulletmark/corsproxy &lt;span class="m"&gt;8000&lt;/span&gt;:zuul.opendev.org
&lt;/pre&gt;
&lt;p&gt;Then launch the dev server:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;REACT_APP_ZUUL_API&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://localhost:8000/api/&amp;quot;&lt;/span&gt; yarn start
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This article presented a few ways to shorten the feedback loop when contributing to Zuul. It
is by no means exhaustive and I am sure there are other great ways to set up a dev environment
for the project. I'd love to hear about your own practices!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Jun 03 to Jun 22 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-jun-03-to-jun-22-summary.html" rel="alternate"></link><published>2022-06-22T10:00:00+00:00</published><updated>2022-06-22T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-06-22:/sprint-2022-jun-03-to-jun-22-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;zuul-client 0.1.0 was released.&lt;/li&gt;
&lt;li&gt;We added few patches into the logscraper and logsender tool that we found during applying new ci log workflow into the sf-config project (empty zuul job list infinity loop and move arg …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;zuul-client 0.1.0 was released.&lt;/li&gt;
&lt;li&gt;We added few patches into the logscraper and logsender tool that we found during applying new ci log workflow into the sf-config project (empty zuul job list infinity loop and move arg parser params into the config file)&lt;/li&gt;
&lt;li&gt;We create a docker account for opendev ci log processing project&lt;/li&gt;
&lt;li&gt;We added a CI job that is creating and pushing the container images into the docker registry&lt;/li&gt;
&lt;li&gt;We added a feature for logscraper to get some statistics that later will be available in Prometheus about job count&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;We have released tags for our custom keycloak extensions after validating they work with keycloak 15:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;github-ssh-mapper&lt;/li&gt;
&lt;li&gt;mqtt-event-listener&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We worked on reactivating these extensions with containerized keycloak.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We worked on moving log gearman client and worker to use logscraper and logsender (ci log processing log workflow) and it will also remove logstash service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We are investigating how to deploy software factory on OpenShift using kubebuilder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We Containarized Mysql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We've started to containarized SF Gateway&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Running Software Factory on OpenShift</title><link href="https://www.softwarefactory-project.io/running-software-factory-on-openshift.html" rel="alternate"></link><published>2022-06-08T00:00:00+00:00</published><updated>2022-06-08T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2022-06-08:/running-software-factory-on-openshift.html</id><summary type="html">&lt;p&gt;This article presents a plan for running Software Factory on OpenShift.&lt;/p&gt;
&lt;div class="section" id="context-and-problem-statement"&gt;
&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;
&lt;p&gt;We are looking for solutions to the following list of pain points with the current system:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Where are the services secrets, and how can I rotate them? This is a key requirement for auditing purpose …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This article presents a plan for running Software Factory on OpenShift.&lt;/p&gt;
&lt;div class="section" id="context-and-problem-statement"&gt;
&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;
&lt;p&gt;We are looking for solutions to the following list of pain points with the current system:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Where are the services secrets, and how can I rotate them? This is a key requirement for auditing purpose.&lt;/li&gt;
&lt;li&gt;The plateform is overloaded, what is the process to increase the number of executors?&lt;/li&gt;
&lt;li&gt;Zuul is not voting on $change_url, what is going on? (the service logs are presently not centralized)&lt;/li&gt;
&lt;li&gt;What base system should I use, CentOS? Fedora? Debian?&lt;/li&gt;
&lt;li&gt;How can I run a pre-production deployment with a local checkout of the Zuul source code?&lt;/li&gt;
&lt;li&gt;sfconfig execution is slow, for example sf-project.io deployment takes more than one hour to converge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="considered-options"&gt;
&lt;h2&gt;Considered Options&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[option 1] Modularize the Ansible roles&lt;/li&gt;
&lt;li&gt;[option 2] Migrate to Kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="decision-outcome"&gt;
&lt;h2&gt;Decision Outcome&lt;/h2&gt;
&lt;p&gt;We would like to investigate if and how Kubernetes can be a solution.
Here are the condition of satisfaction for the initial architecture:&lt;/p&gt;
&lt;div class="section" id="localhost-configuration"&gt;
&lt;h3&gt;Localhost configuration&lt;/h3&gt;
&lt;p&gt;When the user does not have a KUBECONFIG ready, sfconfig setup a single node cluster with &lt;a class="reference external" href="https://kind.sigs.k8s.io/"&gt;Kind&lt;/a&gt;.
Then the system requires a working &lt;cite&gt;kubectl&lt;/cite&gt; command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="service-deployment"&gt;
&lt;h3&gt;Service deployment&lt;/h3&gt;
&lt;p&gt;Using common manifests, the user can deploy custom architecture, for example &lt;em&gt;kubectl apply -f zuul+ci-log-processor.yaml&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deploys: opensearch, zuul and ci log processor.&lt;/li&gt;
&lt;li&gt;Provides: zuul-web url and kibana url.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="developper-mode"&gt;
&lt;h3&gt;Developper mode&lt;/h3&gt;
&lt;p&gt;Running &lt;em&gt;sfconfig develop ~/src/opendev.org/openstack/ci-log-processing&lt;/em&gt; restart the ci-log-processor service using a local copy of the source.
See for example this guide:  &lt;a class="reference external" href="https://github.com/kubernetes-sigs/kind/issues/2430"&gt;https://github.com/kubernetes-sigs/kind/issues/2430&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="migration-from-sfconfig-yaml-and-arch-yaml"&gt;
&lt;h3&gt;Migration from sfconfig.yaml and arch.yaml&lt;/h3&gt;
&lt;p&gt;There is a procedure to migrate the legacy system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 May 13 to Jun 01 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-may-13-to-jun-01-summary.html" rel="alternate"></link><published>2022-06-01T10:00:00+00:00</published><updated>2022-06-01T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-06-01:/sprint-2022-may-13-to-jun-01-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a patch for log sender to skip &amp;quot;DEBUG&amp;quot; messages due Opensearch is out of space&lt;/li&gt;
&lt;li&gt;We proposed to add performance.json file into separate index&lt;/li&gt;
&lt;li&gt;We are helping TripleO team to create functional tests and Ansible …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a patch for log sender to skip &amp;quot;DEBUG&amp;quot; messages due Opensearch is out of space&lt;/li&gt;
&lt;li&gt;We proposed to add performance.json file into separate index&lt;/li&gt;
&lt;li&gt;We are helping TripleO team to create functional tests and Ansible playbooks that will deploy Elastic Recheck tool&lt;/li&gt;
&lt;li&gt;We proposed patch for Zuul to include python passlib library into the default Zuul environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We developed the zuul-weeder service: &lt;a class="reference external" href="https://www.softwarefactory-project.io/introducing-zuul-weeder.html"&gt;https://www.softwarefactory-project.io/introducing-zuul-weeder.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We discussed the design of the version 4 about how the Ansible roles should be defined.&lt;/li&gt;
&lt;li&gt;We finalized the 3.7 release&lt;/li&gt;
&lt;li&gt;We Containarized Zookeeper and Grafana&lt;/li&gt;
&lt;li&gt;We've started to containarized MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>K1S is not working properly after upgrade</title><link href="https://www.softwarefactory-project.io/k1s-is-not-working-properly-after-upgrade.html" rel="alternate"></link><published>2022-05-25T11:00:00+00:00</published><updated>2022-05-25T11:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2022-05-25:/k1s-is-not-working-properly-after-upgrade.html</id><summary type="html">&lt;p&gt;The k1s hypervisor might not work properly after update Centos instance and
after upgrading Software Factory Project to the new release recently.&lt;/p&gt;
&lt;p&gt;If the hypervisor is not working as expected, we suggest to downgrade the
podman package from package &lt;cite&gt;podman-1.6.4-32&lt;/cite&gt; to &lt;cite&gt;podman-1.6.4-29&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;To verify if your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The k1s hypervisor might not work properly after update Centos instance and
after upgrading Software Factory Project to the new release recently.&lt;/p&gt;
&lt;p&gt;If the hypervisor is not working as expected, we suggest to downgrade the
podman package from package &lt;cite&gt;podman-1.6.4-32&lt;/cite&gt; to &lt;cite&gt;podman-1.6.4-29&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;To verify if your deployment is affected by the issue you can run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; podman &lt;span class="nb"&gt;exec&lt;/span&gt; -i interactive-test cat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To install previous podman package version, you can execute command on k1s host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum downgrade podman-1.6.4-29.el7_9.x86_64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Software Factory team has reported that issue to the podman community, but
the patch is not released yet. In the future, when the bug is closed, we will
create new release that is removing temporary workaround.&lt;/p&gt;
&lt;p&gt;You can find more information about the issue at &lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=2087994"&gt;https://bugzilla.redhat.com/show_bug.cgi?id=2087994&lt;/a&gt;&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Introducing Zuul Weeder</title><link href="https://www.softwarefactory-project.io/introducing-zuul-weeder.html" rel="alternate"></link><published>2022-05-23T00:00:00+00:00</published><updated>2022-05-23T00:00:00+00:00</updated><author><name>tristanC and fboucher</name></author><id>tag:www.softwarefactory-project.io,2022-05-23:/introducing-zuul-weeder.html</id><summary type="html">&lt;p&gt;The last month we have been developping a new tool to help us operate &lt;a class="reference external" href="https://zuul-ci.org"&gt;Zuul&lt;/a&gt;,
and today we are happy to announce the first release of the project.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Demo deployment &lt;a class="reference external" href="https://softwarefactory-project.io/weeder"&gt;https://sofwarefactory-project.io/weeder&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;Source code &lt;a class="reference external" href="https://github.com/softwarefactory-project/zuul-weeder#readme"&gt;software-factory/zuul-weeder&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="overview-and-scope"&gt;
&lt;h2&gt;Overview and scope&lt;/h2&gt;
&lt;p&gt;Zuul Weeder analyzes the configuration objects such as jobs …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The last month we have been developping a new tool to help us operate &lt;a class="reference external" href="https://zuul-ci.org"&gt;Zuul&lt;/a&gt;,
and today we are happy to announce the first release of the project.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Demo deployment &lt;a class="reference external" href="https://softwarefactory-project.io/weeder"&gt;https://sofwarefactory-project.io/weeder&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;Source code &lt;a class="reference external" href="https://github.com/softwarefactory-project/zuul-weeder#readme"&gt;software-factory/zuul-weeder&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="overview-and-scope"&gt;
&lt;h2&gt;Overview and scope&lt;/h2&gt;
&lt;p&gt;Zuul Weeder analyzes the configuration objects such as jobs and nodesets and provides a search interface for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Depencencies: what depends on an object.&lt;/li&gt;
&lt;li&gt;Requirements: what is needed by an object.&lt;/li&gt;
&lt;li&gt;URL of the configuration files that contains the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The goal is to help evaluate the impact of a configuration change.
Zuul Weeder leverage a generic dependency graph using the data found in the ZooKeeper database
to collect every configuration elements used by any tenants.
For example, when removing a node label or a repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;The service provide two functions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;/search/$name&lt;/em&gt; returns the list of object matching the requested name.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/object/$type/$name&lt;/em&gt; returns
- the list of configuration file url that directly defines or uses the object,
- the list of related objects that are reachable, either by requirement or by dependency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, by visiting &lt;em&gt;/search/centos&lt;/em&gt;, the service returns:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;job tripleo-centos&lt;/li&gt;
&lt;li&gt;nodeset centos&lt;/li&gt;
&lt;li&gt;label cloud-centos&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="None" src="images/zuul-weeder-search.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And by visiting &lt;em&gt;/object/nodeset/centos&lt;/em&gt;, the service returns:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The list of zuul.yaml file url that contains a nodeset named &lt;em&gt;centos&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The list of jobs and project that depends on this nodeset.&lt;/li&gt;
&lt;li&gt;The list of node label name that is required by this nodeset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The results can be scoped to a specific tenant by using the &lt;em&gt;/tenant/$tenant&lt;/em&gt; url prefix.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-weeder-object.png" /&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Software Factory 3.7 has been released !</title><link href="https://www.softwarefactory-project.io/software-factory-37-has-been-released.html" rel="alternate"></link><published>2022-05-13T12:00:00+00:00</published><updated>2022-05-13T12:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2022-05-13:/software-factory-37-has-been-released.html</id><summary type="html">&lt;p&gt;We are glad to announce the release of Software Factory 3.7. This release mainly features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gerrit is upgraded to the version 3.4.3&lt;/li&gt;
&lt;li&gt;Zuul and Nodepool are upgraded to 5.2.3 and 5.0.0&lt;/li&gt;
&lt;li&gt;Gerrit, Zuul, Nodepool, Etherpad, OpenSearch services are now containerized&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read the details …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are glad to announce the release of Software Factory 3.7. This release mainly features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gerrit is upgraded to the version 3.4.3&lt;/li&gt;
&lt;li&gt;Zuul and Nodepool are upgraded to 5.2.3 and 5.0.0&lt;/li&gt;
&lt;li&gt;Gerrit, Zuul, Nodepool, Etherpad, OpenSearch services are now containerized&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read the details &lt;a class="reference external" href="https://www.softwarefactory-project.io/releases/3.7/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To update your deployment see the &lt;a class="reference external" href="https://docs.softwarefactory-project.io/sf-config-3.7/operator/upgrade.html#upgrade-software-factory"&gt;update&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;If you experience any difficulties, please don't hesitate to raise an issue. You can reach us
on &lt;a class="reference external" href="https://app.element.io/#/room/#softwarefactory-project:matrix.org"&gt;matrix&lt;/a&gt;.&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Apr 22 to May 11 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-apr-22-to-may-11-summary.html" rel="alternate"></link><published>2022-05-11T10:00:00+00:00</published><updated>2022-05-11T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-05-11:/sprint-2022-apr-22-to-may-11-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated with issue related to the disk flooding. So far, we create a workaround for wait some time before push next logs&lt;/li&gt;
&lt;li&gt;We proposed an alternative patch that will include performance.json fields in logsender that all …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated with issue related to the disk flooding. So far, we create a workaround for wait some time before push next logs&lt;/li&gt;
&lt;li&gt;We proposed an alternative patch that will include performance.json fields in logsender that all doc will be in same index&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added upgrade tasks for sf-container role&lt;/li&gt;
&lt;li&gt;We updated our infra to SF 3.7 as part of SF release process&lt;/li&gt;
&lt;li&gt;we added zuul-client to sf master and 3.7 to cover bugs in zuul CLI introduced in 5.X&lt;/li&gt;
&lt;li&gt;We were able to make Keycloak work as SSO with SF&lt;/li&gt;
&lt;li&gt;We change all internal variables from Elasticsearch to Opensearch&lt;/li&gt;
&lt;li&gt;zuul-weeder - We implemented Graph ingest for jobs and nodesets and a demo CLI&lt;/li&gt;
&lt;li&gt;zuul-weeder - We implemented tenant and connection reading to create ability to filter config element by tenants&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Apr 01 to Apr 20 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-apr-01-to-apr-20-summary.html" rel="alternate"></link><published>2022-04-20T10:00:00+00:00</published><updated>2022-04-20T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-04-20:/sprint-2022-apr-01-to-apr-20-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the ibm cloud storage log upload role: Zuul can now store logs in IBM cloud.&lt;/li&gt;
&lt;li&gt;We updated the gerritbot-matrix service to indicate the wipness of a change.&lt;/li&gt;
&lt;li&gt;We provide feature that logsender is parsing performance.json …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the ibm cloud storage log upload role: Zuul can now store logs in IBM cloud.&lt;/li&gt;
&lt;li&gt;We updated the gerritbot-matrix service to indicate the wipness of a change.&lt;/li&gt;
&lt;li&gt;We provide feature that logsender is parsing performance.json file that is cummulating job utilization (&lt;a class="reference external" href="https://review.opendev.org/c/openstack/devstack/+/837139"&gt;https://review.opendev.org/c/openstack/devstack/+/837139&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We added more information for Openstack doc about Opensearch&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added dumb-init for zuul and nodepool containers to avoid to have defunct process&lt;/li&gt;
&lt;li&gt;We added a backup/restore process for zuul keys for they are now stored in zookeeper&lt;/li&gt;
&lt;li&gt;We added /bin/{zuul,nodepool} on hosts where zuul-scheduler, nodepool-{builder-launcher} containers are used for alias don't work for any usecases&lt;/li&gt;
&lt;li&gt;We clarified update/upgrade naming on sfconfig roles by renaming tasks/update.yml to tasks/config_update.yml for all roles&lt;/li&gt;
&lt;li&gt;We continue to backport fixes for SF 3.7 release&lt;/li&gt;
&lt;li&gt;We evaluated algebraic-graph to build a POC of a zuul-weeder project &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/mob-programing/+/f7c5e32f0ff34cac311d276c1a5c7b5e8ce7d268/zuul-weeder/solve.hs"&gt;https://softwarefactory-project.io/r/plugins/gitiles/software-factory/mob-programing/+/f7c5e32f0ff34cac311d276c1a5c7b5e8ce7d268/zuul-weeder/solve.hs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started to work on zuul-weeder implementation &lt;a class="reference external" href="https://softwarefactory-project.io/r/plugins/gitiles/software-factory/zuul-weeder/+/refs/heads/master"&gt;https://softwarefactory-project.io/r/plugins/gitiles/software-factory/zuul-weeder/+/refs/heads/master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We are working on the integration of Keycloak with Opensearch and Opensearch-Dashboards&lt;/li&gt;
&lt;li&gt;We integrated the latest Zuul 5.2 by improving the zuul restart process to accomodate the new ZooKeeper usage.&lt;/li&gt;
&lt;li&gt;We worked on managing the container upgrade.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Mar 11 to Mar 30 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-mar-11-to-mar-30-summary.html" rel="alternate"></link><published>2022-03-30T10:00:00+00:00</published><updated>2022-03-30T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-03-30:/sprint-2022-mar-11-to-mar-30-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We improved the ci logscrapper by correctly handling build history and efficiently processing timestamps.&lt;/li&gt;
&lt;li&gt;We reviewed the unrestricted-ansible specification.&lt;/li&gt;
&lt;li&gt;We proposed CVE fix for zuul-web dependencies. More coming &lt;a class="reference external" href="https://bugzilla.redhat.com/buglist.cgi?component=zuul&amp;amp;product=Fedora"&gt;https://bugzilla.redhat.com/buglist.cgi?component=zuul&amp;amp;product=Fedora …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We improved the ci logscrapper by correctly handling build history and efficiently processing timestamps.&lt;/li&gt;
&lt;li&gt;We reviewed the unrestricted-ansible specification.&lt;/li&gt;
&lt;li&gt;We proposed CVE fix for zuul-web dependencies. More coming &lt;a class="reference external" href="https://bugzilla.redhat.com/buglist.cgi?component=zuul&amp;amp;product=Fedora"&gt;https://bugzilla.redhat.com/buglist.cgi?component=zuul&amp;amp;product=Fedora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We configure logsender tool with Opensearch Opendev&lt;/li&gt;
&lt;li&gt;We added more information into documentation to Openstack ci-log-processing project; many code improvements related to logscraper tool and logsender&lt;/li&gt;
&lt;li&gt;We added more log to be pushed to the Opensearch&lt;/li&gt;
&lt;li&gt;We added basic visualization to Opensearch openstack &lt;a class="reference external" href="https://opensearch.logs.openstack.org/_dashboards/app/discover?security_tenant=global"&gt;https://opensearch.logs.openstack.org/_dashboards/app/discover?security_tenant=global&lt;/a&gt; : user: openstack password: openstack&lt;/li&gt;
&lt;li&gt;we proposed a spec for ACL handling with respect to external sources (gerrit, github etc) &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/777629"&gt;https://review.opendev.org/c/zuul/zuul/+/777629&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;we proposed zuul-client dequeue-all &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-client/+/835319"&gt;https://review.opendev.org/c/zuul/zuul-client/+/835319&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;We patched Zuul &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-security-fix-ansible-plugin-loading.html"&gt;https://www.softwarefactory-project.io/zuul-security-fix-ansible-plugin-loading.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We are working on the release process of sf-3.7:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created sf-3.7 targets on koji and we've populated a sf-3.7-release tag&lt;/li&gt;
&lt;li&gt;We validated sf upgrade from 3.6 to 3.7 on 3 test instances with production data.&lt;/li&gt;
&lt;li&gt;We updated zuul containers to version 5.2.0 on sf-master&lt;/li&gt;
&lt;li&gt;The next steps are updating our production environments to validate it works as expected, then finalize the release sf 3.7.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We added support for free-form zuul ACLs in the configuration engine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We updated Keycloak container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We are working on Keycloak Intergration with Gerrit and Zuul&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Completing the first release of logreduce-rust</title><link href="https://www.softwarefactory-project.io/completing-the-first-release-of-logreduce-rust.html" rel="alternate"></link><published>2022-03-29T00:00:00+00:00</published><updated>2022-03-29T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2022-03-29:/completing-the-first-release-of-logreduce-rust.html</id><summary type="html">&lt;p&gt;I am happy to announce that the &lt;a class="reference external" href="https://github.com/logreduce/logreduce-rust"&gt;logreduce-rust&lt;/a&gt; project now implements a minimum viable product.
It can be used to compare two remote directories like this: &lt;cite&gt;logreduce diff build-log-url1 build-log-url2&lt;/cite&gt;.
This article introduces the latest features.&lt;/p&gt;
&lt;p&gt;In this post I will write about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My choices regarding user input processing.&lt;/li&gt;
&lt;li&gt;Data …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I am happy to announce that the &lt;a class="reference external" href="https://github.com/logreduce/logreduce-rust"&gt;logreduce-rust&lt;/a&gt; project now implements a minimum viable product.
It can be used to compare two remote directories like this: &lt;cite&gt;logreduce diff build-log-url1 build-log-url2&lt;/cite&gt;.
This article introduces the latest features.&lt;/p&gt;
&lt;p&gt;In this post I will write about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My choices regarding user input processing.&lt;/li&gt;
&lt;li&gt;Data type models using static dispatch.&lt;/li&gt;
&lt;li&gt;Threadpool based concurrency.&lt;/li&gt;
&lt;li&gt;What my thoughts are on Rust in retrospect.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This article is part of a blog post series about the latest logreduce improvements
using the Rust programing language. Please see the series' earlier articles:&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;Part1: &lt;a class="reference external" href="https://www.softwarefactory-project.io/improving-logreduce-with-rust.html"&gt;Improving logreduce tokenizer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Part2: &lt;a class="reference external" href="https://www.softwarefactory-project.io/implementing-logreduce-nearest-neighbors-model-in-rust.html"&gt;Implementing logreduce nearest neighbors model&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Part3: &lt;a class="reference external" href="https://www.softwarefactory-project.io/introducing-the-byteslines-iterator.html"&gt;Introducing the BytesLines iterator&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-the-model-processor"&gt;
&lt;h2&gt;Implementing the model processor&lt;/h2&gt;
&lt;p&gt;The model processor is the main part that was missing from the new code base.
The goal is to provide a flexible API that combines the log line iterator, the tokenizer, and the nearest neighbors model.
The API requirements are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The processing needs to work in chunk to leverage efficient vectorized operations.&lt;/li&gt;
&lt;li&gt;The context lines surrounding an anomaly need to be collected so that the output can be analyzed offline, without access to the content.&lt;/li&gt;
&lt;li&gt;Duplicated lines should be removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Addressing these requirements involves a complex algorithm with a few edge cases, for example, to keep track of the lines preceeding an anomaly.
Using the beloved Iterator interface I was able to implement a simple abstraction.
The resulting API can be used by simply providing an Index and a Read value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ChunkProcessor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;: &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;: &lt;span class="nc"&gt;logreduce_iterator&lt;/span&gt;::&lt;span class="n"&gt;BytesLines&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt; &lt;span class="nc"&gt;ChunkIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// The raw log line with their global position&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logreduce_iterator&lt;/span&gt;::&lt;span class="n"&gt;LogLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;: &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ChunkProcessor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AnomalyContext&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check the full implementation in the &lt;a class="reference external" href="https://github.com/logreduce/logreduce-rust/blob/main/model/src/process.rs"&gt;process.rs&lt;/a&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-static-dispatch-for-the-data-model"&gt;
&lt;h2&gt;Using static dispatch for the data model&lt;/h2&gt;
&lt;p&gt;With all the core modules in place, I needed to define a data model to implement the frontend logic.
Logreduce can work with a variety of content, which can be accessed through different source types:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Local path.&lt;/li&gt;
&lt;li&gt;Remote url.&lt;/li&gt;
&lt;li&gt;Journald socket.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I initially created a ContentSource trait to define how to get the sources of a given Content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContentSource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_sources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContentSource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_sources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ends_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// read dir&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// a single file&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContentSource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_sources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// list remote sources&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However this adds a bit of complexity to the report implementation.
For example, the state contains the list of baselines sources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;dyn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContentSource&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… but this does not work because of this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error[E0277]: the size for values of type `(dyn ContentSource + &amp;#39;static)` cannot be known at compilation time
   --&amp;gt; model/src/model.rs:25:16
    |
25  |     baselines: Vec&amp;lt;dyn ContentSource&amp;gt;,
    |                ^^^^^^^^^^^^^^^^^^^^^^ doesn&amp;#39;t have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn ContentSource + &amp;#39;static)`
note: required by a bound in `Vec`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes sense because any type can implement ContentSource, and the compiler needs to know how much
memory they need. Thus we can use a Box to fix that, which is how most languages solve this problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;dyn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContentSource&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, we can use a technique called static dispatch with an enum's pattern match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;CI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildInfo&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_sources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;::&lt;span class="n"&gt;get_sources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;CI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;::&lt;span class="n"&gt;get_sources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The content data type is currently defined using static dispatch, which is simpler for the project.
However this means that new types can't be added dynamically.&lt;/p&gt;
&lt;p&gt;I documented the complete model in an &lt;a class="reference external" href="https://adr.github.io/"&gt;Architectural Decision Record&lt;/a&gt; you can find here: &lt;a class="reference external" href="https://github.com/logreduce/logreduce-rust/blob/main/doc/adr/0001-architecture-cli.md"&gt;0001-architecture-cli.md&lt;/a&gt;.
You can check the implementation in the &lt;a class="reference external" href="https://github.com/logreduce/logreduce-rust/blob/main/model/src/model.rs"&gt;model.rs&lt;/a&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="crawling-logs-in-parallel-using-a-threadpool"&gt;
&lt;h2&gt;Crawling logs in parallel using a threadpool&lt;/h2&gt;
&lt;p&gt;Another interesting feature of logreduce is that it can seamlessly process remote directories.
The goal is to be able to handle a build log url, served as &lt;em&gt;Index Of&lt;/em&gt; pages, as if it was a local directory.
Thus, I looked into collecting the log files concurrently so that the tree could be traversed quickly.&lt;/p&gt;
&lt;p&gt;I initially created an AsyncIterator using the &lt;a class="reference external" href="https://tokio.rs"&gt;tokio.rs&lt;/a&gt; library.
To limit the amount of workers, I used the &lt;a class="reference external" href="https://docs.rs/futures/latest/futures/stream/futures_unordered/struct.FuturesUnordered.html"&gt;FuturesUnordered&lt;/a&gt; structure as explained in this &lt;a class="reference external" href="https://users.rust-lang.org/t/batch-execution-of-futures-in-the-tokio-runtime-or-max-number-of-active-futures-at-a-time/47659/4"&gt;max number of active futures at a time&lt;/a&gt; discussion.
That seemed to work great, but implementing the &lt;em&gt;handle response&lt;/em&gt; part was a bit complicated.
Some footguns need to be avoided according to this &lt;a class="reference external" href="https://github.com/rust-lang/futures-rs/issues/2387"&gt;issue&lt;/a&gt;.
To learn more about async Rust, check its working group &lt;a class="reference external" href="https://rust-lang.github.io/wg-async/"&gt;wg-async&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;From my understanding, Tokio is great for long running tasks like building a server.
But for short tasks, such as crawling an http directory, I find it easier to use a threadpool with &lt;a class="reference external" href="https://doc.rust-lang.org/std/sync/mpsc/"&gt;mpsc&lt;/a&gt;, a Multi Producer, Single Consumer FIFO queue.
Thus, here is the main function of the logreduce's httpdir library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;visitor&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Visitor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;ThreadPool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Sender&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;: &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visitor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;visitor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Increase reference counts.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sub_pool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Submit the work.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// We decoded some urls.&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ends_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="c1"&gt;// Recursively call the handler on sub directory.&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;Crawler&lt;/span&gt;::&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;visitor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sub_pool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="c1"&gt;// Send file location to the mpsc channel.&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Indicate we are done.&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// An error happened, propagates it.&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check the complete implementation in the &lt;a class="reference external" href="https://github.com/logreduce/logreduce-rust/blob/main/httpdir/src/httpdir.rs"&gt;httpdir.rs&lt;/a&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="completing-my-first-project-in-rust"&gt;
&lt;h2&gt;Completing my first project in Rust&lt;/h2&gt;
&lt;p&gt;Logreduce is the first project that I wrote using Rust. Here are my initial impressions of the language.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reliable: When working on the model processor, I went through multiple iterations, and the code worked after it compiled everytime.&lt;/li&gt;
&lt;li&gt;Network effect: The language attracts many talented developers. For example, the &lt;a class="reference external" href="https://docs.rs/regex"&gt;regex&lt;/a&gt; and &lt;a class="reference external" href="https://hyper.rs"&gt;hyper&lt;/a&gt; crates look amazing.&lt;/li&gt;
&lt;li&gt;Stellar toolchain: Everything looks tightly integrated and snappy. I particularly enjoy the workspace feature to structure the code base in multiple libraries with their own dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lifetimes are notoriously difficult to understand and I avoided them as much as possible to keep the code simple.&lt;/li&gt;
&lt;li&gt;Macros are appealing but they can be rather cryptic and hard to debug.&lt;/li&gt;
&lt;li&gt;Sometimes the type inference does not work and it needs extra annotations. For example, to convert a list of result to a result list we can use the turbofish syntax: &lt;em&gt;collect::&amp;lt;Result&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;&amp;gt;()&lt;/em&gt;. In Haskell, this is implemented with the &lt;em&gt;traverse :: (a -&amp;gt; f b) -&amp;gt; t a -&amp;gt; f (t b)&lt;/em&gt; function, which I find less complicated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am mainly interested in Rust's expressive static types. They generally work the same as in Haskell and OCaml, or any other language featuring &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch06-00-enums.html"&gt;Algebraic Data Types&lt;/a&gt;.
Such types let me fearlessly perform heart surgery on complex code.
As explained in the &lt;a class="reference external" href="https://www.youtube.com/watch?v=kZ1P8cHN3pY"&gt;Why Functional Programming Doesn't Matter&lt;/a&gt; talk, expressive static types give us the dexterity to extend our system in a fairly safe way.
In particular, by making illegal states unrepresentable, we don't have to worry about many kinds of errors.
The type system statically verifies a significant part of our program, enabling us to move fast by focusing on the most important part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Coming from Haskell, the main challenge of using Rust is to be more careful about the values and their memory.
And after going through the initial bumps, I must say it's getting a little easier and I now mostly understand what the compiler wants.&lt;/p&gt;
&lt;p&gt;The Rust implementation of logreduce is now almost feature complete with the legacy Python code, and I'm looking forward adding the last remaining parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Discovery of baselines for CI build.&lt;/li&gt;
&lt;li&gt;Supporting systemd-journal sources.&lt;/li&gt;
&lt;li&gt;Handling tarball transparently.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I always welcome feedback, if you would like to contribute, please join the &lt;a class="reference external" href="https://matrix.to/#/#logreduce:matrix.org"&gt;#logreduce:matrix.org&lt;/a&gt; chat room.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Security Fix Ansible plugin loading</title><link href="https://www.softwarefactory-project.io/zuul-security-fix-ansible-plugin-loading.html" rel="alternate"></link><published>2022-03-25T00:00:00+00:00</published><updated>2022-03-25T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2022-03-25:/zuul-security-fix-ansible-plugin-loading.html</id><summary type="html">&lt;p&gt;A new Zuul version has been added to the SF-3.6 to address
a security issue: &lt;a class="reference external" href="https://review.opendev.org/835121"&gt;https://review.opendev.org/835121&lt;/a&gt;.
To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the
install-server. Alternatively, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y *zuul*&amp;quot;&lt;/span&gt; zuul-scheduler:zuul-web:zuul-executor:zuul-merger
ansible-playbook /var …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A new Zuul version has been added to the SF-3.6 to address
a security issue: &lt;a class="reference external" href="https://review.opendev.org/835121"&gt;https://review.opendev.org/835121&lt;/a&gt;.
To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the
install-server. Alternatively, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y *zuul*&amp;quot;&lt;/span&gt; zuul-scheduler:zuul-web:zuul-executor:zuul-merger
ansible-playbook /var/lib/software-factory/ansible/zuul_restart.yml
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Introducing the BytesLines iterator</title><link href="https://www.softwarefactory-project.io/introducing-the-byteslines-iterator.html" rel="alternate"></link><published>2022-03-16T00:00:00+00:00</published><updated>2022-03-16T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2022-03-16:/introducing-the-byteslines-iterator.html</id><summary type="html">&lt;p&gt;The BytesLines iterator's goal is to provide an API for processing logs line by line.
It processes logs by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Splitting sub line to treat cmd output embedded as a long oneliner.&lt;/li&gt;
&lt;li&gt;Working with Read objects, such as file decompressors or network endpoints.&lt;/li&gt;
&lt;li&gt;Using zero copy slices to optimize memory usage …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The BytesLines iterator's goal is to provide an API for processing logs line by line.
It processes logs by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Splitting sub line to treat cmd output embedded as a long oneliner.&lt;/li&gt;
&lt;li&gt;Working with Read objects, such as file decompressors or network endpoints.&lt;/li&gt;
&lt;li&gt;Using zero copy slices to optimize memory usage.&lt;/li&gt;
&lt;li&gt;Limiting line length to prevent overflow of invalid data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This blog post presents:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Evaluation criterias to compare different implementations.&lt;/li&gt;
&lt;li&gt;A simple implementation using readline.&lt;/li&gt;
&lt;li&gt;Why iterators can't easily produce pointers.&lt;/li&gt;
&lt;li&gt;A zero copy implementation using the &lt;a class="reference external" href="https://docs.rs/bytes/"&gt;bytes&lt;/a&gt; library.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This article is part of a blog post series about the latest logreduce improvements
using the Rust programing language. Please see the series' earlier articles:&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;Part1: &lt;a class="reference external" href="https://www.softwarefactory-project.io/improving-logreduce-with-rust.html"&gt;Improving logreduce tokenizer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Part2: &lt;a class="reference external" href="https://www.softwarefactory-project.io/implementing-logreduce-nearest-neighbors-model-in-rust.html"&gt;Implementing logreduce nearest neighbors model&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluation-criterias"&gt;
&lt;h2&gt;Evaluation criterias&lt;/h2&gt;
&lt;p&gt;I evaluate the execution time and memory usage to process a 91MB file.
Performances are measured with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;/bin/time -v&lt;/cite&gt; to measure the maximum memory usage.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;valgrind&lt;/cite&gt; to collect heap usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, &lt;cite&gt;grep&lt;/cite&gt; performance is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ /bin/time --format &amp;quot;Run time: %e sec, Max RSS: %M KB&amp;quot; grep anomaly &amp;lt; test.txt
Run time: 0.05 sec, Max RSS: 2380 KB

$ valgrind grep &amp;quot;anomaly&amp;quot; &amp;lt; test.txt |&amp;amp; grep &amp;quot;heap usage&amp;quot;
total heap usage: 305 allocs, 265 frees, 146,413 bytes allocated
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Grep takes about 50 msec and it needs a bit more than 2MB of memory to do its job.
Valgrind shows a reasonable heap usage, confirming that grep is well optimized.&lt;/p&gt;
&lt;p&gt;The next sections present different implementations for the BytesLines iterator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="readline-iterator"&gt;
&lt;h2&gt;Readline iterator&lt;/h2&gt;
&lt;p&gt;One of the main goals is to avoid reading the whole file at once.
Instead, the lines are loaded one at a time using readline.
Here is a basic implementation in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logfile_iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;subline&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here is an equivalent implementation in Rust:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;/// A struct to hold the state of the iterator.&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;BufLines&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;: &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;: &lt;span class="nc"&gt;BufReader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;: &lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;: &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BufLines&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;Self&lt;/span&gt;::&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_line&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_line&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that Rust doesn't yet have a special keyword to &lt;em&gt;yield&lt;/em&gt; a value.
We need to maintain the context in a structure that is passed each time
the &lt;em&gt;next&lt;/em&gt; method is called. Here are the two functions of this iterator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Read a new line and call get_line&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;read_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// The read succeeded&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim_end&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_line&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Return the first sub line found in the buffer.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;sub_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sub_line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sub_line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sub_line&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both of these implementations are using the same algorithm, by calling the &lt;em&gt;readline()&lt;/em&gt; helper
before splitting sub line on litteral &lt;em&gt;&amp;quot;\n&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here are their performance characteristics using &lt;em&gt;python3-3.10.2-1.fc35.x86_64&lt;/em&gt; and &lt;em&gt;rustc-1.52.1&lt;/em&gt;:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="21%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="13%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Implementation&lt;/th&gt;
&lt;th class="head"&gt;Max RSS&lt;/th&gt;
&lt;th class="head"&gt;Allocs&lt;/th&gt;
&lt;th class="head"&gt;Frees&lt;/th&gt;
&lt;th class="head"&gt;Bytes allocated&lt;/th&gt;
&lt;th class="head"&gt;Run time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;readline.py&lt;/td&gt;
&lt;td&gt;7420 KB&lt;/td&gt;
&lt;td&gt;1,814,409&lt;/td&gt;
&lt;td&gt;1,810,434&lt;/td&gt;
&lt;td&gt;475,434,838&lt;/td&gt;
&lt;td&gt;0.33 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;readline.rs&lt;/td&gt;
&lt;td&gt;2260 KB&lt;/td&gt;
&lt;td&gt;692,114&lt;/td&gt;
&lt;td&gt;692,112&lt;/td&gt;
&lt;td&gt;285,799,923&lt;/td&gt;
&lt;td&gt;0.15 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Both implementations work in constant memory. Using a bigger file does not increase the Max RSS value.&lt;/li&gt;
&lt;li&gt;The high heap allocations numbers indicate that each individual line is duplicated.&lt;/li&gt;
&lt;li&gt;Rust code is more verbose, but it performs more efficiently and safely because it wraps each line with a Result data type to avoid throwing exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next sections present a technique to reduce the number of allocations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="iterator-and-item-lifetime"&gt;
&lt;h2&gt;Iterator and item lifetime&lt;/h2&gt;
&lt;p&gt;Rust provides facilities for manual memory management, thus it should be possible to avoid the individual line allocation.
The line is already present in the iterator internal structure, and instead of cloning a new &lt;em&gt;String&lt;/em&gt; I would like to return
a &lt;em&gt;&amp;amp;str&lt;/em&gt; reference.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;: &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BufLines&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… but this does not compile because of this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error[E0106]: missing lifetime specifier
  --&amp;gt; readline.rs:17:24
   |
17 |     type Item = Result&amp;lt;&amp;amp;str&amp;gt;;
   |                        ^ expected named lifetime parameter
   |
help: consider introducing a named lifetime parameter
   |
17 |     type Item&amp;lt;&amp;#39;a&amp;gt; = Result&amp;lt;&amp;amp;&amp;#39;a str&amp;gt;;
   |              ^^^^          ^^^
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Indeed, the &lt;em&gt;&amp;amp;str&lt;/em&gt; reference needs a lifetime parameter to match the owner of the underlying memory.
This lifetime parameter is here to ensure the reference is valid as long as the underlying memory is owned.
Unfortunately, adding the suggested fix does not work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;: &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BufLines&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… the compilation still fails because of this new error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error[E0658]: generic associated types are unstable
  --&amp;gt; readline.rs:17:5
   |
17 |     type Item&amp;lt;&amp;#39;a&amp;gt; = Result&amp;lt;&amp;amp;&amp;#39;a str&amp;gt;;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: see issue #44265 &amp;lt;https://github.com/rust-lang/rust/issues/44265&amp;gt; for more information
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Rust type system is presently not expressive enough to implement such an iterator.
You can read more about this limitation in this article:
&lt;a class="reference external" href="http://lukaskalbertodt.github.io/2018/08/03/solving-the-generalized-streaming-iterator-problem-without-gats.html"&gt;Solving the Generalized Streaming Iterator Problem without GATs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Even then, it is unclear how the users of this iterator would be able to keep that reference
after the iteration. This is a requirement for logreduce's reports to include the surrounding anomalies' context.&lt;/p&gt;
&lt;p&gt;The next section presents an alternative solution using the &lt;a class="reference external" href="https://docs.rs/bytes/"&gt;bytes&lt;/a&gt; library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="byteslines-iterator"&gt;
&lt;h2&gt;BytesLines iterator&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://docs.rs/bytes/"&gt;bytes&lt;/a&gt; library provides a data type which bundles the reference with the underlying buffer using
a reference counter. You can read more about its implementation in the &lt;a class="reference external" href="https://docs.rs/bytes/latest/bytes/struct.Bytes.html#memory-layout"&gt;Bytes memory layout&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;This lets us return the line location without doing any memory copy, at
the cost of a slight overhead, to keep track of the size and pointer's owners.
Here is how the BytesLines iterator is defined:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;/// The BytesLines struct holds a single buffer&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;BytesLines&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;: &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;: &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;: &lt;span class="nc"&gt;BytesMut&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;line_count&lt;/span&gt;: &lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;: &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BytesLines&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;Self&lt;/span&gt;::&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, similarly to the previous readline implementation, this iterator uses two main functions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;read_slice&lt;/em&gt; to fill up the buffer.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;get_slice&lt;/em&gt; to split the next line.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Read a new chunk and call get_slice&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;read_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// We read some data.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truncate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// We reached the end of the reader, this is the end.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// There was a reading error, we return it.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Find the next line in the buffer&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_next_line&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// We haven&amp;#39;t found the end of the line, we need more data.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// reserve() will attempt to reclaim space in the buffer.&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// We found the end of the line, we can return it now.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// split_to() creates a new zero copy reference to the buffer.&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By carefully managing this single buffer, the &lt;a class="reference external" href="https://docs.rs/bytes/"&gt;bytes&lt;/a&gt; library takes care of all the
references counting and memory allocations.
In particular, the &lt;a class="reference external" href="https://docs.rs/bytes/latest/bytes/struct.BytesMut.html#method.reserve"&gt;reserve&lt;/a&gt; function will attempt to reclaim the available space in-place.&lt;/p&gt;
&lt;p&gt;Here is a sequence diagram for this implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; ⭩- the buffer starts here.
[                          ]          &amp;lt; the buffer is empty, we read a chunk.
[aaaaaaaaaaaa\nbbbbb\nccccc]          &amp;lt; there is a line separator.
 ╰-----------⮡ next slice
              ⭨
[              bbbbb\nccccc]
               ╰----⮡ next slice
                     ⭨
[                     ccccc]          &amp;lt; the line is incomplete.
      ⭩ we reserve more space and move the left-overs at the begining of the buffer.
[ccccc                           ]    &amp;lt; we read another chunk after the left-overs.
[ccccccc\ndddddddddddddd\neeeeeee]
 ╰------⮡ next slice
         ⭨
[         dddddddddddddd\neeeeeee]
          ╰-------------⮡ next slice
                         ⭨
[                         eeeeeee]    &amp;lt; the line is incomplete.
        ⭩ we reserve more space and move the left-overs at the begining of the buffer.
[eeeeeee                            ] &amp;lt; we read another chunk after the left-overs.
[eeeeeeeee\n                        ] &amp;lt; we reach the end of file.
 ╰--------⮡ the last slice
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the final results:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="21%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="13%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Implementation&lt;/th&gt;
&lt;th class="head"&gt;Max RSS&lt;/th&gt;
&lt;th class="head"&gt;Allocs&lt;/th&gt;
&lt;th class="head"&gt;Frees&lt;/th&gt;
&lt;th class="head"&gt;Bytes allocated&lt;/th&gt;
&lt;th class="head"&gt;Run time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;readline.py&lt;/td&gt;
&lt;td&gt;7420 KB&lt;/td&gt;
&lt;td&gt;1,814,409&lt;/td&gt;
&lt;td&gt;1,810,434&lt;/td&gt;
&lt;td&gt;475,434,838&lt;/td&gt;
&lt;td&gt;0.33 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;readline.rs&lt;/td&gt;
&lt;td&gt;2260 KB&lt;/td&gt;
&lt;td&gt;692,114&lt;/td&gt;
&lt;td&gt;692,112&lt;/td&gt;
&lt;td&gt;285,799,923&lt;/td&gt;
&lt;td&gt;0.15 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;byteslines.rs&lt;/td&gt;
&lt;td&gt;2068 KB&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;265,577&lt;/td&gt;
&lt;td&gt;0.12 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, this iterator avoids unnecessary memory copy, and even though it does
more work to satisfy the borrow checker, it is still faster.&lt;/p&gt;
&lt;p&gt;You can find the source code of the benchmarks in the &lt;a class="reference external" href="https://github.com/logreduce/byteslines-demo"&gt;logreduce/byteslines-demo&lt;/a&gt;
project, and you can see the complete version which includes a limiter for the line
length in the &lt;a class="reference external" href="https://github.com/logreduce/logreduce-rust/blob/main/iterator/src/iterator.rs"&gt;logreduce-iterator&lt;/a&gt; library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The Rust programming language provides low-level facilities and high-level features such
as &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch06-00-enums.html"&gt;Algebraic Data Types&lt;/a&gt; and &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch10-02-traits.html"&gt;Traits&lt;/a&gt;. This lured me into trying to avoid cloning the memory and
learning more about Rust's unique type system.&lt;/p&gt;
&lt;p&gt;Thanks to the &lt;a class="reference external" href="https://docs.rs/bytes/"&gt;bytes&lt;/a&gt; library I was able to efficiently implement this log line iterator.
I think it is well worth the effort since this is such a key component for the project,
and I hope this is going to pay off when processing many files in parallel.&lt;/p&gt;
&lt;p&gt;I always welcome feedback, and I would love to be proven wrong. If you would like to contribute,
please join the &lt;a class="reference external" href="https://matrix.to/#/#logreduce:matrix.org"&gt;#logreduce:matrix.org&lt;/a&gt; chat room.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2022 Feb 18 to Mar 09 summary</title><link href="https://www.softwarefactory-project.io/sprint-2022-feb-18-to-mar-09-summary.html" rel="alternate"></link><published>2022-03-09T10:00:00+00:00</published><updated>2022-03-09T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-03-09:/sprint-2022-feb-18-to-mar-09-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We propose &amp;quot;logsender&amp;quot; service that will be parsing log results fetched by Logscraper and send it to the Elasticsearch service. It change the log processing workflow by removing gearman-client, gearman-worker and logstash service&lt;/li&gt;
&lt;li&gt;We are adding more documentation …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We propose &amp;quot;logsender&amp;quot; service that will be parsing log results fetched by Logscraper and send it to the Elasticsearch service. It change the log processing workflow by removing gearman-client, gearman-worker and logstash service&lt;/li&gt;
&lt;li&gt;We are adding more documentation into ci log processing repository&lt;/li&gt;
&lt;li&gt;We submitted some fixes to zuul's web UI that we noticed when upgrading to zuul 5:&lt;/li&gt;
&lt;li&gt;Fix broken enqueue when buildset.newrev is null &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/830846"&gt;https://review.opendev.org/c/zuul/zuul/+/830846&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hide Sign-In button if no Identity Provider is available &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/831222"&gt;https://review.opendev.org/c/zuul/zuul/+/831222&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Insist in documentation about adding a default HS256 authenticator to maintain CLI usefulness &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/831231"&gt;https://review.opendev.org/c/zuul/zuul/+/831231&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We proposed more authentication methods for zuul-client:&lt;/li&gt;
&lt;li&gt;basic auth &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-client/+/819118"&gt;https://review.opendev.org/c/zuul/zuul-client/+/819118&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;web auth &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-client/+/831946"&gt;https://review.opendev.org/c/zuul/zuul-client/+/831946&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on adding a quick tenant selector on the GUI for non-whitelabeled deployments; this requires caching the tenants list in the API&lt;/li&gt;
&lt;li&gt;We added support for &lt;cite&gt;[K&lt;/cite&gt; and &lt;cite&gt;[m&lt;/cite&gt; escape code in zuul console output: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/re-ansi/+/24175"&gt;https://softwarefactory-project.io/r/c/software-factory/re-ansi/+/24175&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;We investigated how to avoid extra user uid for the container by using uidmap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We are working on SF 3.7 release and here the stories finished during the sprint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed the patches action from sf-container role now we build our own zuul and nodepool containers&lt;/li&gt;
&lt;li&gt;We updated zuul-jobs package&lt;/li&gt;
&lt;li&gt;We updated managesf (which create hound configuration) and fixed zuul configuration to redirect to gitiles&lt;/li&gt;
&lt;li&gt;We run all containerized services with service user instead root&lt;/li&gt;
&lt;li&gt;We removed repoxplorer bits from managesf for the service is now deprecated&lt;/li&gt;
&lt;li&gt;We added documentation for operator to manage containers &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/sf-docs/tree/docs/operator/deepdive.rst#n111"&gt;https://softwarefactory-project.io/cgit/software-factory/sf-docs/tree/docs/operator/deepdive.rst#n111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We upgraded and containerized etherpad&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Implementing logreduce nearest neighbors model in Rust</title><link href="https://www.softwarefactory-project.io/implementing-logreduce-nearest-neighbors-model-in-rust.html" rel="alternate"></link><published>2022-02-25T00:00:00+00:00</published><updated>2022-02-25T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2022-02-25:/implementing-logreduce-nearest-neighbors-model-in-rust.html</id><summary type="html">&lt;p&gt;This article is a follow-up on the previous post about &lt;a class="reference external" href="https://www.softwarefactory-project.io/improving-logreduce-with-rust.html"&gt;Improving logreduce with Rust&lt;/a&gt;.
With the new tokenizer in place, the next step is to implement the nearest neighbors model.&lt;/p&gt;
&lt;p&gt;In this post you will learn the following about the core algorithm of logreduce:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why vectorization is necessary.&lt;/li&gt;
&lt;li&gt;Cosine similarity …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This article is a follow-up on the previous post about &lt;a class="reference external" href="https://www.softwarefactory-project.io/improving-logreduce-with-rust.html"&gt;Improving logreduce with Rust&lt;/a&gt;.
With the new tokenizer in place, the next step is to implement the nearest neighbors model.&lt;/p&gt;
&lt;p&gt;In this post you will learn the following about the core algorithm of logreduce:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why vectorization is necessary.&lt;/li&gt;
&lt;li&gt;Cosine similarity.&lt;/li&gt;
&lt;li&gt;How to compute the distances between two matrices.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="problem-statement"&gt;
&lt;h2&gt;Problem statement&lt;/h2&gt;
&lt;p&gt;Given two log files: a baseline and a target, the goal is to extract useful information from the target by finding the log lines that don't occur in the baseline.
For example, here is a simple solution implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;target_log&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;baseline_log&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baseline_log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The log line order is not considered because it is often not deterministic.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The difference test can be implemented using &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein distance&lt;/a&gt; so that
small variations in the logs can be ignored. Unfortunately, this solution is not efficient.
Assuming it takes 20µsec to compare two lines, then processing 512 targets with 20_000 baselines would take more than 3 minutes.&lt;/p&gt;
&lt;p&gt;The next sections introduce a technique to improve the performance by converting the log lines into numerical vectors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-hashing-trick"&gt;
&lt;h2&gt;The Hashing Trick&lt;/h2&gt;
&lt;p&gt;Instead of working with the raw text, the log lines can be converted into numerical vectors using &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Feature_hashing"&gt;the hashing trick&lt;/a&gt;.
The &lt;a class="reference external" href="https://scikit-learn.org/"&gt;scikit-learn&lt;/a&gt; library provides such technique with the HashingVectorizer object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HashingVectorizer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vectorizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HashingVectorizer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;baselines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vectorizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log line content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x1048576&lt;/span&gt; &lt;span class="n"&gt;sparse&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float64&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Compressed&lt;/span&gt; &lt;span class="n"&gt;Sparse&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;325140&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;377854&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;846328&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.57735027&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.57735027&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.57735027&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the result is a sparse vector of about 1 million columns where the indices are the word's hash value modulo the number of features.
The vector is defined with the Compressed Sparse Row (CSR) format, and fortunately there is an existing Rust library named &lt;a class="reference external" href="https://docs.rs/sprs"&gt;sprs&lt;/a&gt; which provides
an equivalent implementation. Here is how this vectorizer can be implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sprs&lt;/span&gt;::&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;::&lt;span class="n"&gt;Itertools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fxhash&lt;/span&gt;::&lt;span class="n"&gt;hash32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="sd"&gt;/// A type alias for sprs vector&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;SparseVec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CsVecBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;: &lt;span class="kt"&gt;usize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;260000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="sd"&gt;/// Word based hashing vectorizer&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;vectorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;SparseVec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// alternate sign&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2147483648&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sorted_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ord&lt;/span&gt;::&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dedup_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unzip&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;CsVec&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Word order is not considered when using this trick.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The next section introduces how to compare such numerical vectors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cosine-similarity"&gt;
&lt;h2&gt;Cosine Similarity&lt;/h2&gt;
&lt;p&gt;In data analysis, the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cosine_similarity"&gt;cosine similarity&lt;/a&gt; is a measure of similarity between two sequences of numbers.
By applying the text book formula, the following function returns a number between 0 and 1, where 1 means
the vectors are similar, and 0 means they are different.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;cosine_similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;SparseVec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;SparseVec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;f64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l2_norm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l2_norm&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This measure works well with sparse vectors because only the non zero values are used.
Even though this code performs almost as fast as the current logreduce's implementation,
it is inefficient because the lines are still compared one by one.&lt;/p&gt;
&lt;p&gt;The next section introduces how to compute the cosine similarity between two lists of vectors using matrices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pairwise-distance"&gt;
&lt;h2&gt;Pairwise Distance&lt;/h2&gt;
&lt;p&gt;The usual nearest neighbors algorithms do not work with sparse vectors.
Even though the goal is to find the nearest neighbors,
the &lt;a class="reference external" href="https://scikit-learn.org/"&gt;scikit-learn&lt;/a&gt; model uses a bruteforce algorithm when working with sparse data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.metrics.pairwise&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cosine_distances&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vectorizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;another line content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a traceback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cosine_distances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mf"&gt;0.33333333&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;        &lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the result is a list of distances between the baselines and the targets.
0.33 indicates that the first target is near the baseline, and the second target is the farthest: its distance is 1.
This technique is very fast because it leverages an optimized matrix multiplication operation.
Here is how this function can be implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;FeaturesMatrix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CsMatBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="sd"&gt;/// Create a normalized matrix&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;create_mat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SparseVec&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;FeaturesMatrix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TriMat&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l2_norm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l2_norm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_triplet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l2_norm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="sd"&gt;/// Compute the smallest cosine distance between two normalized matrix. The rhs must be transposed.&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;FeaturesMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;targets&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;FeaturesMatrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;()];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;distances_mat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;baselines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;distances_mat&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The trick is to perform the l2 normalizations before computing the cross product of the two matrices.
This yields a new matrix that contains the distances between each row.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/logreduce/logreduce-rust/blob/main/python/benches/bench-index.py"&gt;benchmark&lt;/a&gt; shows that this new implementation performs almost four times faster, even with the overhead of converting Python and Rust types.
More importantly, running the full toolchain confirmed it produces the exact same results, the math worked, and that was a big relief!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thanks to the &lt;a class="reference external" href="https://docs.rs/sprs"&gt;sprs&lt;/a&gt; library, I was able to implement all the &lt;a class="reference external" href="https://scikit-learn.org/"&gt;scikit-learn&lt;/a&gt; features used in logreduce.
I wanted to use a higher level library such as &lt;a class="reference external" href="https://rust-ml.github.io/linfa/"&gt;linfa&lt;/a&gt;, but as suggested in this &lt;a class="reference external" href="https://github.com/rust-ml/linfa/issues/200"&gt;issue&lt;/a&gt;, the implementation is so simple that it can easily be done from scratch.&lt;/p&gt;
&lt;p&gt;This new code is simpler and more portable, and it's great to see Rust out-performing Python.
Perhaps it is possible to use a more efficient algorithm with dense vectors.
For now I am satisfied with the current result.
You can find the complete code in the index library of &lt;a class="reference external" href="https://github.com/logreduce/logreduce-rust"&gt;logreduce-rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It seems like the next step is to implement a log files iterator and build the html report.
That way the new implementation could be used standalone.&lt;/p&gt;
&lt;p&gt;I always welcome feedback, and if you would like to contribute, please join the &lt;a class="reference external" href="https://matrix.to/#/#logreduce:matrix.org"&gt;#logreduce:matrix.org&lt;/a&gt; chat room.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Jan 28 to Feb 16 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-jan-28-to-feb-16-summary.html" rel="alternate"></link><published>2022-02-16T10:00:00+00:00</published><updated>2022-02-16T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-02-16:/sprint-2021-jan-28-to-feb-16-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added rust roles to zuul-jobs: &lt;a class="reference external" href="https://review.opendev.org/q/topic:zuul-jobs-rust"&gt;https://review.opendev.org/q/topic:zuul-jobs-rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started monitoring logscraper host&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated zuul and nodepool versions on sf-master to 5.0.0 on ubi-8 images&lt;/li&gt;
&lt;li&gt;We created SF …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added rust roles to zuul-jobs: &lt;a class="reference external" href="https://review.opendev.org/q/topic:zuul-jobs-rust"&gt;https://review.opendev.org/q/topic:zuul-jobs-rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started monitoring logscraper host&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated zuul and nodepool versions on sf-master to 5.0.0 on ubi-8 images&lt;/li&gt;
&lt;li&gt;We created SF.3.7 epic and we plan to release this version during the next sprint with zuul, nodepool, gerrit and elk services containerized&lt;/li&gt;
&lt;li&gt;We added rootless container support to k1s: &lt;a class="reference external" href="https://pagure.io/software-factory/k1s/pull-request/2"&gt;https://pagure.io/software-factory/k1s/pull-request/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've added support for external authenticators in Zuul, we're currently working on handling zuul acls via the config repository.&lt;/li&gt;
&lt;li&gt;We wrote and discussed a story about a new zuul-search service &lt;a class="reference external" href="https://issues.redhat.com/browse/RHOSZUUL-775"&gt;https://issues.redhat.com/browse/RHOSZUUL-775&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Improving logreduce with Rust</title><link href="https://www.softwarefactory-project.io/improving-logreduce-with-rust.html" rel="alternate"></link><published>2022-02-10T00:00:00+00:00</published><updated>2022-02-10T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2022-02-10:/improving-logreduce-with-rust.html</id><summary type="html">&lt;p&gt;This article introduces &lt;a class="reference external" href="https://github.com/logreduce/logreduce-tokenizer"&gt;logreduce-tokenizer&lt;/a&gt; which leverages the &lt;a class="reference external" href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; programing language
to improve &lt;a class="reference external" href="https://github.com/logreduce/logreduce"&gt;logreduce&lt;/a&gt; performance and reporting capabilities.&lt;/p&gt;
&lt;p&gt;In this post you will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What logreduce is.&lt;/li&gt;
&lt;li&gt;How it works.&lt;/li&gt;
&lt;li&gt;Why we need this new function.&lt;/li&gt;
&lt;li&gt;What the upcoming roadmap is.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="logreduce"&gt;
&lt;h2&gt;Logreduce&lt;/h2&gt;
&lt;p&gt;Logreduce is a command line tool that can extract …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This article introduces &lt;a class="reference external" href="https://github.com/logreduce/logreduce-tokenizer"&gt;logreduce-tokenizer&lt;/a&gt; which leverages the &lt;a class="reference external" href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; programing language
to improve &lt;a class="reference external" href="https://github.com/logreduce/logreduce"&gt;logreduce&lt;/a&gt; performance and reporting capabilities.&lt;/p&gt;
&lt;p&gt;In this post you will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What logreduce is.&lt;/li&gt;
&lt;li&gt;How it works.&lt;/li&gt;
&lt;li&gt;Why we need this new function.&lt;/li&gt;
&lt;li&gt;What the upcoming roadmap is.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="logreduce"&gt;
&lt;h2&gt;Logreduce&lt;/h2&gt;
&lt;p&gt;Logreduce is a command line tool that can extract information from log files.
It is designed to assist continuous integration build investigation by looking for new content in build outputs.
You can learn more about the project in this &lt;a class="reference external" href="https://opensource.com/article/18/9/quiet-log-noise-python-and-machine-learning"&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The tool can be used like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ logreduce job --zuul-web https://review.rdoproject.org/zuul/api/ https://logserver.rdoproject.org/UID
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When given a &lt;a class="reference external" href="https://zuul-ci.org"&gt;Zuul&lt;/a&gt; API url and a target build log url logreduce will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Look for baseline in the Zuul builds API.&lt;/li&gt;
&lt;li&gt;Download baseline and target logs.&lt;/li&gt;
&lt;li&gt;Index the baseline logs using a nearest neighbor model.&lt;/li&gt;
&lt;li&gt;Compute the target logs line's distances from the baseline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This process works well for continuous integration where two builds should be almost identical,
besides the exception that caused target failure.&lt;/p&gt;
&lt;p&gt;The next section explains the indexing process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-regexp-tokenizer"&gt;
&lt;h2&gt;Python regexp tokenizer&lt;/h2&gt;
&lt;p&gt;The process to compute the log line distances is as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tokenize the log line, for example, by replacing any dates or numbers.&lt;/li&gt;
&lt;li&gt;Create a feature vector using the Hashing Vectorizer utility from the &lt;a class="reference external" href="https://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt; library.&lt;/li&gt;
&lt;li&gt;Index the baseline in a NearestNeighbor model.&lt;/li&gt;
&lt;li&gt;Search the nearest neighbors of the target to compute the distance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logreduce is designed to run in the post phase of failing jobs and it must run in a timely fashion.
Thus, logreduce uses heavy tokenization so that the search can be performed with a minimal memory footprint.&lt;/p&gt;
&lt;p&gt;The version 0.6 of logreduce uses a series of regular expressions to progressively replace known patterns by fixed tokens.
Here is a demo implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;http_re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http[^&lt;/span&gt;&lt;span class="se"&gt;\b&lt;/span&gt;&lt;span class="s2"&gt;]+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;days_re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sunday|monday|tuesday|wednesday|thursday|friday|saturday&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http_re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;days_re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DAY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, a tripleo build can produce 2GB of logs for a total of 7.5 million events,
and this Python based implementation takes about one hour to extract 1843 anomalies.&lt;/p&gt;
&lt;p&gt;I suspected this tokenizer process to be inefficient for the following reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Each step traverses the whole line.&lt;/li&gt;
&lt;li&gt;The token replacement does not respect word boundaries.&lt;/li&gt;
&lt;li&gt;It is hard to update, as any modification affects the whole process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My previous attempts at improving this implementation resulted in worse performance, and/or false negatives.
A particularly difficult challenge is differentiating system paths with base64-encoded strings, for example,
is &lt;em&gt;nn2RZ/ocRcL5as2EHQES0b/I12a2GjWub0OQAGDq8iL5o8P0/ogEWrpZmoBC&lt;/em&gt; a file system path?&lt;/p&gt;
&lt;p&gt;The next section shows a new tokenizer implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rust-tokenizer"&gt;
&lt;h2&gt;Rust tokenizer&lt;/h2&gt;
&lt;p&gt;I have been investigating a new tokenizer implementation using Rust.
The goal is to be able to do more work in less time. In particular, Rust enables efficient string processing:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The new tokenizer processes each word separately.&lt;/li&gt;
&lt;li&gt;Then, it recursively applies the same rules to each component, e.g. elements separated by &lt;em&gt;/&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It uses a single string builder to create the output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a demo implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;parse_literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%DATE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;do_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parse_literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;do_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;do_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;::&lt;span class="n"&gt;with_capacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;do_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This kind of work is too expensive to do in a dynamic language such as Python.
This new Rust implementation is much faster while using more complex rules to provide better results:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fewer false positives because the noise filter is more efficient.&lt;/li&gt;
&lt;li&gt;Fewer false negatives because the log semantic is better preserved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is really exciting. The tokenizer benchmark shows it performs 7.3 times faster.
And running the full toolchain on the previous tripleo build now takes:
605.86 seconds to extract 851 anomalies (out of 7.5 million events found in a 2GB build output).
The number of anomalies went down, mostly because more noise got filtered, but the report
also contains new valid anomalies that previously went unnoticed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="calling-rust-from-python"&gt;
&lt;h2&gt;Calling Rust from Python&lt;/h2&gt;
&lt;p&gt;The new tokenizer is integrated in the current code using &lt;a class="reference external" href="https://pyo3.rs"&gt;PyO3&lt;/a&gt;, which makes it
very easy to call Rust from Python. The whole binding is defined as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pyo3&lt;/span&gt;::&lt;span class="n"&gt;prelude&lt;/span&gt;::&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[pyfunction]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[pymodule]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;logreduce_tokenizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_py&lt;/span&gt;: &lt;span class="nc"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;PyModule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;PyResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrap_pyfunction&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The final python module can be produced using &lt;a class="reference external" href="https://setuptools-rust.readthedocs.io/en/latest/"&gt;setuptools-rust&lt;/a&gt; with this setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# setup.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools_rust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RustExtension&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;logreduce-tokenizer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rust_extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RustExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;logreduce_tokenizer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PyO3&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
    &lt;span class="n"&gt;zip_safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-new-roadmap-for-logreduce"&gt;
&lt;h2&gt;A new roadmap for logreduce&lt;/h2&gt;
&lt;p&gt;I would like to investigate if other parts of the toolchain can also benefit from a rewrite in Rust, in particular:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Implement the vectorizer in the tokenizer, perhaps by directly producing an unboxed numpy array.&lt;/li&gt;
&lt;li&gt;Replace scikit-learn with &lt;a class="reference external" href="https://horasearch.com/"&gt;hora&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Process the log file in parallel using the &lt;a class="reference external" href="https://docs.rs/rayon/latest/rayon/"&gt;rayon&lt;/a&gt; library.&lt;/li&gt;
&lt;li&gt;Skip unicode decoding, by manually replacing non ascii codepoints into fixed tokens. That should provide a significant performance boost.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At that point, it might be worth migrating the remaining parts, such as the html renderer.
The main reasons to replace Python with Rust are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://doc.rust-lang.org/book/ch06-00-enums.html"&gt;Algebraic Data Types&lt;/a&gt;, this is the most important feature as it can be used to represent the data model in a concise and transparent way. This is particularly useful when modifying the code.&lt;/li&gt;
&lt;li&gt;Performance, where critical parts can leverage hardware optimisation such as SIMD.&lt;/li&gt;
&lt;li&gt;Distribution, where the program can be delivered as a ready to use binary, which can be easily embedded in CI jobs.&lt;/li&gt;
&lt;li&gt;The cargo toolchain, to manage dependencies and run doctest without a fuss.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I always welcome feedback, and if you would like to contribute, please join the &lt;a class="reference external" href="https://matrix.to/#/#logreduce:matrix.org"&gt;#logreduce:matrix.org&lt;/a&gt; chat room.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Jan 07 to Jan 26 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-jan-07-to-jan-26-summary.html" rel="alternate"></link><published>2022-01-26T10:00:00+00:00</published><updated>2022-01-26T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-01-26:/sprint-2021-jan-07-to-jan-26-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We finally fix an issue with Reed in Opensearch Opendev instance that index pattern was not visible&lt;/li&gt;
&lt;li&gt;We reviewed the IBM Cloud VPC driver for nodepool&lt;/li&gt;
&lt;li&gt;We created a visualisation of the zuul git history with gource for …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We finally fix an issue with Reed in Opensearch Opendev instance that index pattern was not visible&lt;/li&gt;
&lt;li&gt;We reviewed the IBM Cloud VPC driver for nodepool&lt;/li&gt;
&lt;li&gt;We created a visualisation of the zuul git history with gource for the 10 years anniversary: &lt;a class="reference external" href="https://www.youtube.com/watch?v=0gLONkPZ1a0"&gt;https://www.youtube.com/watch?v=0gLONkPZ1a0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a new ChangeReady event to the gerritbot-matrix: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/gerritbot-matrix/+/23646"&gt;https://softwarefactory-project.io/r/c/software-factory/gerritbot-matrix/+/23646&lt;/a&gt; and deployed the new image: &lt;a class="reference external" href="https://review.opendev.org/c/opendev/system-config/+/825131"&gt;https://review.opendev.org/c/opendev/system-config/+/825131&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created ubi containers for nodepool (4.3.0) and zuul (4.11.0 with patches, then 4.12.0) but CI fails related to fqdn_update tasks&lt;/li&gt;
&lt;li&gt;We've worked on several mechanisms to add patches to our containers 1/ at build time 2/ semi live-patching on a deployment&lt;/li&gt;
&lt;li&gt;The zuul web UI is now installed from the zuul-web container instead of using an RPM package. This ensures the GUI is always up to date with the current version of zuul-web.&lt;/li&gt;
&lt;li&gt;We helped some folks on the public Matrix channel &lt;a class="reference external" href="https://app.element.io/#/room"&gt;https://app.element.io/#/room&lt;/a&gt;/#softwarefactory-project:matrix.org&lt;/li&gt;
&lt;li&gt;We integrated the gerrit version 3.4: &lt;a class="reference external" href="https://softwarefactory-project.io/r/q/topic:%22gerrit-3.4-master%22"&gt;https://softwarefactory-project.io/r/q/topic:%22gerrit-3.4-master%22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We deleted the taiga project&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Dec 17 to Jan 05 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-dec-17-to-jan-05-summary.html" rel="alternate"></link><published>2022-01-05T10:00:00+00:00</published><updated>2022-01-05T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2022-01-05:/sprint-2021-dec-17-to-jan-05-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a patch for Zuul that adds only those events to the zookeeper queue that will be later processed by zuul &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/822484"&gt;https://review.opendev.org/c/zuul/zuul/+/822484&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pagination was merged in zuul web ui before …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a patch for Zuul that adds only those events to the zookeeper queue that will be later processed by zuul &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/822484"&gt;https://review.opendev.org/c/zuul/zuul/+/822484&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pagination was merged in zuul web ui before the holidays&lt;/li&gt;
&lt;li&gt;We got access to ibmcloud for reviewing a new nodepool driver&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We move Opendistro to Opensearch that will be running as container services&lt;/li&gt;
&lt;li&gt;We're working on improving keycloak integration - we will also support plugging external openidconnect IdPs to zuul, allowing for example using Red Hat SSO downstream even if keycloak integration isn't complete in SF.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Nov 26 to Dec 15 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-nov-26-to-dec-15-summary.html" rel="alternate"></link><published>2021-12-15T10:00:00+00:00</published><updated>2021-12-15T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-12-15:/sprint-2021-nov-26-to-dec-15-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on pagination support for zuul search pages (builds &amp;amp; buildsets) - &lt;a class="reference external" href="https://review.opendev.org/q/topic:%22web_results_pagination%22+(status:open%20OR%20status:merged"&gt;https://review.opendev.org/q/topic:%22web_results_pagination%22+(status:open%20OR%20status:merged&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;All the web UI admin changes were merged&lt;/li&gt;
&lt;li&gt;We added support for arbitrary user …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on pagination support for zuul search pages (builds &amp;amp; buildsets) - &lt;a class="reference external" href="https://review.opendev.org/q/topic:%22web_results_pagination%22+(status:open%20OR%20status:merged"&gt;https://review.opendev.org/q/topic:%22web_results_pagination%22+(status:open%20OR%20status:merged&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;All the web UI admin changes were merged&lt;/li&gt;
&lt;li&gt;We added support for arbitrary user to the gerritbot-matrix image&lt;/li&gt;
&lt;li&gt;We configured logscraper01.openstack.org to push openstack logs to testing Opensearch instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We started working on upgrading gerrit to version 3.4&lt;/li&gt;
&lt;li&gt;We published managesf on pypi for nodepool-ubi containers. We have also to publish python-sfmanager but it fails right now&lt;/li&gt;
&lt;li&gt;We are working to avoid to use update-ca-trust on zuul containers but instead use the bundle.crt from the host &amp;lt;- is that the same as the CA pb encountered on gerrit containers ? (yes, it's to prepare that)&lt;/li&gt;
&lt;li&gt;We are implementing support of keycloak in config-update, so that groups are synchronized with the resources in the config repo - maybe demo&lt;/li&gt;
&lt;li&gt;We move logstash and curator from package base deployment to containers&lt;/li&gt;
&lt;li&gt;We almost finish moving Opendistro (kibana, elasticsearch) to opensearch and opensearch dashboards base on the container service&lt;/li&gt;
&lt;li&gt;We create a python-builder container image, but after discussion we should create service container image simplier&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Mitigate CVE-2021-45046</title><link href="https://www.softwarefactory-project.io/mitigate-cve-2021-45046.html" rel="alternate"></link><published>2021-12-15T00:00:00+00:00</published><updated>2021-12-15T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2021-12-15:/mitigate-cve-2021-45046.html</id><summary type="html">&lt;p&gt;As a followup on the log4j recent vulnerability a notice has been made about that the previous mitigation
might not be enough (&lt;a class="reference external" href="https://logging.apache.org/log4j/2.x/security.html"&gt;https://logging.apache.org/log4j/2.x/security.html&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The vulnerability is affecting the following Software Factory services:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;li&gt;logstash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Install the mitigation from the install server by …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a followup on the log4j recent vulnerability a notice has been made about that the previous mitigation
might not be enough (&lt;a class="reference external" href="https://logging.apache.org/log4j/2.x/security.html"&gt;https://logging.apache.org/log4j/2.x/security.html&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The vulnerability is affecting the following Software Factory services:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;li&gt;logstash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Install the mitigation from the install server by running these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible elasticsearch,logstash --become -m yum -a &lt;span class="s2"&gt;&amp;quot;name=zip state=present&amp;quot;&lt;/span&gt;

ansible elasticsearch --become -m shell -a &lt;span class="s2"&gt;&amp;quot;cmd=&amp;#39;zip -q -d /usr/share/elasticsearch/lib/log4j-core-2.11.1.jar org/apache/logging/log4j/core/lookup/JndiLookup.class&amp;#39;&amp;quot;&lt;/span&gt;
ansible elasticsearch --become -m shell -a &lt;span class="s2"&gt;&amp;quot;cmd=&amp;#39;zip -q -d /usr/share/elasticsearch/plugins/opendistro-performance-analyzer/performance-analyzer-rca/lib/log4j-core-2.13.0.jar org/apache/logging/log4j/core/lookup/JndiLookup.class&amp;#39;&amp;quot;&lt;/span&gt;
ansible elasticsearch --become -m shell -a &lt;span class="s2"&gt;&amp;quot;cmd=&amp;#39;zip -q -d /usr/share/elasticsearch/performance-analyzer-rca/lib/log4j-core-2.13.0.jar org/apache/logging/log4j/core/lookup/JndiLookup.class&amp;#39;&amp;quot;&lt;/span&gt;
ansible elasticsearch -m service -a &lt;span class="s2"&gt;&amp;quot;name=elasticsearch state=restarted&amp;quot;&lt;/span&gt;

ansible logstash --become -m shell -a &lt;span class="s2"&gt;&amp;quot;cmd=&amp;#39;zip -q -d /usr/share/logstash/logstash-core/lib/jars/log4j-core-2.13.3.jar org/apache/logging/log4j/core/lookup/JndiLookup.class&amp;#39;&amp;quot;&lt;/span&gt;
ansible logstash -m service -a &lt;span class="s2"&gt;&amp;quot;name=logstash state=restarted&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Mitigate CVE-2021-44228</title><link href="https://www.softwarefactory-project.io/mitigate-cve-2021-44228.html" rel="alternate"></link><published>2021-12-10T00:00:00+00:00</published><updated>2021-12-10T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2021-12-10:/mitigate-cve-2021-44228.html</id><summary type="html">&lt;p&gt;An important Java vulnerability is affecting the following Software Factory service:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;li&gt;logstash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Install the mitigation from the install server by running these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible elasticsearch -m lineinfile -a &lt;span class="s2"&gt;&amp;quot;path=/etc/sysconfig/elasticsearch regexp=&amp;#39;^ES_JAVA_OPTS=.*&amp;#39; line=&amp;#39;ES_JAVA_OPTS=\&amp;quot;-Dlog4j2.formatMsgNoLookups=true\&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;
ansible elasticsearch -m service    -a &lt;span class="s2"&gt;&amp;quot;name=elasticsearch state=restarted&amp;quot;&lt;/span&gt;

ansible …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;An important Java vulnerability is affecting the following Software Factory service:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;li&gt;logstash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Install the mitigation from the install server by running these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible elasticsearch -m lineinfile -a &lt;span class="s2"&gt;&amp;quot;path=/etc/sysconfig/elasticsearch regexp=&amp;#39;^ES_JAVA_OPTS=.*&amp;#39; line=&amp;#39;ES_JAVA_OPTS=\&amp;quot;-Dlog4j2.formatMsgNoLookups=true\&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;
ansible elasticsearch -m service    -a &lt;span class="s2"&gt;&amp;quot;name=elasticsearch state=restarted&amp;quot;&lt;/span&gt;

ansible logstash      -m lineinfile -a &lt;span class="s2"&gt;&amp;quot;path=/etc/sysconfig/logstash regexp=&amp;#39;^LS_JAVA_OPTS=.*&amp;#39; line=&amp;#39;LS_JAVA_OPTS=\&amp;quot;-Dlog4j2.formatMsgNoLookups=true\&amp;quot;&amp;#39; create=yes&amp;quot;&lt;/span&gt;
ansible logstash      -m service    -a &lt;span class="s2"&gt;&amp;quot;name=logstash state=restarted&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that Gerrit and ZooKeeper are not affected, see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.gerritcodereview.com/2021-12-13-log4j-statement.html"&gt;https://www.gerritcodereview.com/2021-12-13-log4j-statement.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://issues.apache.org/jira/browse/ZOOKEEPER-4423"&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-4423&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Nov 05 to Nov 24 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-nov-05-to-nov-24-summary.html" rel="alternate"></link><published>2021-11-24T10:00:00+00:00</published><updated>2021-11-24T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-11-24:/sprint-2021-nov-05-to-nov-24-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created a openstack/ci-log-processing repository and we propose changes for new log processing workflow&lt;/li&gt;
&lt;li&gt;We've worked on adding partial text search in zuul: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/817949"&gt;https://review.opendev.org/c/zuul/zuul/+/817949&lt;/a&gt; - this needs a GUI followup.&lt;/li&gt;
&lt;li&gt;We've …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created a openstack/ci-log-processing repository and we propose changes for new log processing workflow&lt;/li&gt;
&lt;li&gt;We've worked on adding partial text search in zuul: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/817949"&gt;https://review.opendev.org/c/zuul/zuul/+/817949&lt;/a&gt; - this needs a GUI followup.&lt;/li&gt;
&lt;li&gt;We've progressed on the admin GUI to the point that the patch chain is ready for review: &lt;a class="reference external" href="https://review.opendev.org/q/topic:%22GUI_admin%22+(status:open%20OR%20status:merged"&gt;https://review.opendev.org/q/topic:%22GUI_admin%22+(status:open%20OR%20status:merged&lt;/a&gt;) - &lt;a class="reference external" href="https://zuuldemo.strangerpings.eu"&gt;https://zuuldemo.strangerpings.eu&lt;/a&gt; is a showcase&lt;/li&gt;
&lt;li&gt;We discussed the future of the zuul-runner and how it should be delayed until zuul v5&lt;/li&gt;
&lt;li&gt;We fixed issue in Gitlab crawler where A MR with an empty description cannot be proceseed&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added functional tests for ansible-role-elastic-recheck&lt;/li&gt;
&lt;li&gt;We validated zuul-$service-ubi containers with sf-config and updated master branch to use them&lt;/li&gt;
&lt;li&gt;We started to create nodepool-$service-ubi containers for sf-config&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Oct 14 to Nov 03 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-oct-14-to-nov-03-summary.html" rel="alternate"></link><published>2021-11-03T10:00:00+00:00</published><updated>2021-11-03T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-11-03:/sprint-2021-oct-14-to-nov-03-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Work started with James Blair to progress on web admin GUI. Prerequisite patches to zuul-web got merged, and we are setting up a demo machine at &lt;a class="reference external" href="https://zuuldemo.strangerpings.eu/zuul"&gt;https://zuuldemo.strangerpings.eu/zuul&lt;/a&gt; based on the demo compose.&lt;/li&gt;
&lt;li&gt;we added …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Work started with James Blair to progress on web admin GUI. Prerequisite patches to zuul-web got merged, and we are setting up a demo machine at &lt;a class="reference external" href="https://zuuldemo.strangerpings.eu/zuul"&gt;https://zuuldemo.strangerpings.eu/zuul&lt;/a&gt; based on the demo compose.&lt;/li&gt;
&lt;li&gt;we added support for podman in the demo compose.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created zuul containers based on Red Hat Universal Base Image 8&lt;/li&gt;
&lt;li&gt;We improved our ci, sf-tenant job now use multiple hosts for zuul services &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/sf-ci/tree/roles/configure-sfconfig/templates/multinode_arch.yaml.j2"&gt;https://softwarefactory-project.io/cgit/software-factory/sf-ci/tree/roles/configure-sfconfig/templates/multinode_arch.yaml.j2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Sep 24 to Oct 13 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-sep-24-to-oct-13-summary.html" rel="alternate"></link><published>2021-10-13T10:00:00+00:00</published><updated>2021-10-13T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-10-13:/sprint-2021-sep-24-to-oct-13-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the gerritbot-matrix to include change numbers&lt;/li&gt;
&lt;li&gt;We added gantt-like charts to buildsets pages&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed zuul package depends from sf-config, it was used to avoid concurrency when zuul db was initialized and it's not …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the gerritbot-matrix to include change numbers&lt;/li&gt;
&lt;li&gt;We added gantt-like charts to buildsets pages&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We removed zuul package depends from sf-config, it was used to avoid concurrency when zuul db was initialized and it's not needed anymore for this part is now done by zuul&lt;/li&gt;
&lt;li&gt;We improved templates used to generate script to initialize container&lt;/li&gt;
&lt;li&gt;We started to improve sf-tenant multinode job by adding dedicated zuul-scheduler, zuul-executor and zuul merger hosts&lt;/li&gt;
&lt;li&gt;We started to work to containerize keycloak service&lt;/li&gt;
&lt;li&gt;we fixed some tests related to keycloak integration, currently working on fixing kibana &amp;lt;-&amp;gt; integration&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Sep 03 to Sep 22 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-sep-03-to-sep-22-summary.html" rel="alternate"></link><published>2021-09-22T10:00:00+00:00</published><updated>2021-09-22T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-09-22:/sprint-2021-sep-03-to-sep-22-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed an etherpad backend for the statusbot: &lt;a class="reference external" href="https://review.opendev.org/c/opendev/statusbot/+/807946/1"&gt;https://review.opendev.org/c/opendev/statusbot/+/807946/1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We got some changes merged on Zuul's GUI, mainly preliminary work for pagination support in searches&lt;/li&gt;
&lt;li&gt;We work on mirroring Opendev …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed an etherpad backend for the statusbot: &lt;a class="reference external" href="https://review.opendev.org/c/opendev/statusbot/+/807946/1"&gt;https://review.opendev.org/c/opendev/statusbot/+/807946/1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We got some changes merged on Zuul's GUI, mainly preliminary work for pagination support in searches&lt;/li&gt;
&lt;li&gt;We work on mirroring Opendev log output to our opensearch host&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked to contairized gerrit service&lt;/li&gt;
&lt;li&gt;We've started to containerize keycloak service&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Aug 13 to Sep 01 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-aug-13-to-sep-01-summary.html" rel="alternate"></link><published>2021-09-01T10:00:00+00:00</published><updated>2021-09-01T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-09-01:/sprint-2021-aug-13-to-sep-01-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've reworked the admin UI patches to remove dependency on redux-oidc, which is unmaintained. We know use react-oidc (based on oidc-client-js)&lt;/li&gt;
&lt;li&gt;We've reworked various patches and reviews&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added 'ansible_setup_timeout' parameter for zuul-executor service, it's useful …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've reworked the admin UI patches to remove dependency on redux-oidc, which is unmaintained. We know use react-oidc (based on oidc-client-js)&lt;/li&gt;
&lt;li&gt;We've reworked various patches and reviews&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added 'ansible_setup_timeout' parameter for zuul-executor service, it's useful when executor are not on the same DC than nodepool instances &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/22551"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config/+/22551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed sf-ssh populate_hosts play by using 'hostnameclt' instead 'hostname' &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/22548"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config/+/22548&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed nodepool-minimal element to be compatible with debian systems &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-elements/+/22550"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-elements/+/22550&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started to work to containerized gerrit service but we have issue with upstream image with hardcoded volumes on the dockerfile (we can't bind mount directories nor change gerrit uid).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Jul 23 to Aug 11 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-jul-23-to-aug-11-summary.html" rel="alternate"></link><published>2021-08-11T10:00:00+00:00</published><updated>2021-08-11T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-08-11:/sprint-2021-jul-23-to-aug-11-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We deployed the new gerritbot service for the #test:opendev.org matrix room&lt;/li&gt;
&lt;li&gt;We investigated using prometheus for opendev infrastructure&lt;/li&gt;
&lt;li&gt;We discussed using React Hooks for the zuul web interface&lt;/li&gt;
&lt;li&gt;zuul web auth: we worked on UX flow …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We deployed the new gerritbot service for the #test:opendev.org matrix room&lt;/li&gt;
&lt;li&gt;We investigated using prometheus for opendev infrastructure&lt;/li&gt;
&lt;li&gt;We discussed using React Hooks for the zuul web interface&lt;/li&gt;
&lt;li&gt;zuul web auth: we worked on UX flow and design with felixedel,
investigated an immutability problem with redux-oidc. Added some
videos to show what the changes look like:&lt;ul&gt;
&lt;li&gt;user login and info: &lt;a class="reference external" href="https://youtu.be/uftgXppUvXo"&gt;https://youtu.be/uftgXppUvXo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;change dequeue: &lt;a class="reference external" href="https://youtu.be/aELxXcafXQ4"&gt;https://youtu.be/aELxXcafXQ4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;reenqueue buildset: &lt;a class="reference external" href="https://youtu.be/IheWxITSNYQ"&gt;https://youtu.be/IheWxITSNYQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;create autohold request from failed build: &lt;a class="reference external" href="https://youtu.be/MdZZOxjAQ5M"&gt;https://youtu.be/MdZZOxjAQ5M&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;autoholds page: &lt;a class="reference external" href="https://youtu.be/QdaQ2vGLBag"&gt;https://youtu.be/QdaQ2vGLBag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;promote a change: &lt;a class="reference external" href="https://youtu.be/-KPeGEkH9Ak"&gt;https://youtu.be/-KPeGEkH9Ak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;free-form autohold creation: &lt;a class="reference external" href="https://youtu.be/v3AlgyDWEBs"&gt;https://youtu.be/v3AlgyDWEBs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added autologin as kibana user to the Kibana service&lt;/li&gt;
&lt;li&gt;We ported autologin feature to ansible role elasticsearch recheck&lt;/li&gt;
&lt;li&gt;We created new admin role that will be configured for each tenant and also added roles for curator and logstash (also for each tenants)&lt;/li&gt;
&lt;li&gt;We integrate logstash service with ansible role elasticsearch recheck&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Jul 01 to Jul 21 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-jul-01-to-jul-21-summary.html" rel="alternate"></link><published>2021-07-21T10:00:00+00:00</published><updated>2021-07-21T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-07-21:/sprint-2021-jul-01-to-jul-21-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a deployment of gerritbot-matrix: &lt;a class="reference external" href="https://review.opendev.org/c/opendev/system-config/+/800506/"&gt;https://review.opendev.org/c/opendev/system-config/+/800506/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We reviewed the new zuul-operator implementation: &lt;a class="reference external" href="https://review.opendev.org/q/topic:%22kopf%22"&gt;https://review.opendev.org/q/topic:%22kopf%22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We're helping with implementing proper CORS support in zuul-web &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/767691"&gt;https …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a deployment of gerritbot-matrix: &lt;a class="reference external" href="https://review.opendev.org/c/opendev/system-config/+/800506/"&gt;https://review.opendev.org/c/opendev/system-config/+/800506/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We reviewed the new zuul-operator implementation: &lt;a class="reference external" href="https://review.opendev.org/q/topic:%22kopf%22"&gt;https://review.opendev.org/q/topic:%22kopf%22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We're helping with implementing proper CORS support in zuul-web &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/767691"&gt;https://review.opendev.org/c/zuul/zuul/+/767691&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We finalized nodepool containers review &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/22110"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config/+/22110&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed issues for telegraf 1.19 &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/22315"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config/+/22315&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Jun 10 to Jun 30 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-jun-10-to-jun-30-summary.html" rel="alternate"></link><published>2021-06-30T10:00:00+00:00</published><updated>2021-06-30T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-06-30:/sprint-2021-jun-10-to-jun-30-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on fixing job issues caused by the Zuul 4.6 release: &lt;a class="reference external" href="https://review.opendev.org/c/opendev/base-jobs/+/797960"&gt;https://review.opendev.org/c/opendev/base-jobs/+/797960&lt;/a&gt; and &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/798087"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/798087&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We packaged and deployed the latest …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on fixing job issues caused by the Zuul 4.6 release: &lt;a class="reference external" href="https://review.opendev.org/c/opendev/base-jobs/+/797960"&gt;https://review.opendev.org/c/opendev/base-jobs/+/797960&lt;/a&gt; and &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul-jobs/+/798087"&gt;https://review.opendev.org/c/zuul/zuul-jobs/+/798087&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We packaged and deployed the latest Zuul 4.6 release&lt;/li&gt;
&lt;li&gt;We worked on a guide to use software-factory as thrid-party-ci for gerrit, gitlab and pagure&lt;/li&gt;
&lt;li&gt;We worked on containerized nodepool role and updated zuul role with zuul 4.6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>SF 3.6 minor release to prepare the upcoming Zuul Security Fix</title><link href="https://www.softwarefactory-project.io/sf-36-minor-release-to-prepare-the-upcoming-zuul-security-fix.html" rel="alternate"></link><published>2021-06-21T00:00:00+00:00</published><updated>2021-06-21T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2021-06-21:/sf-36-minor-release-to-prepare-the-upcoming-zuul-security-fix.html</id><summary type="html">&lt;p&gt;An important Zuul security update is going to be available next Thursday.
We've released a minor update to sf 3.6 today with zuul 4.5.0 packages.
We recommend to upgrade your system to this sub release before Thursday 24 June 14:00 UTC.
We will release a minor …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An important Zuul security update is going to be available next Thursday.
We've released a minor update to sf 3.6 today with zuul 4.5.0 packages.
We recommend to upgrade your system to this sub release before Thursday 24 June 14:00 UTC.
We will release a minor release with zuul 4.6 next Thursday.&lt;/p&gt;
&lt;p&gt;Make sure your deployment is up to date by running &lt;strong&gt;sfconfig --update&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you experience any difficulties, please don't hesitate to raise an issue.&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Upcoming Zuul Security Fix</title><link href="https://www.softwarefactory-project.io/upcoming-zuul-security-fix.html" rel="alternate"></link><published>2021-06-10T00:00:00+00:00</published><updated>2021-06-10T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2021-06-10:/upcoming-zuul-security-fix.html</id><summary type="html">&lt;p&gt;An important Zuul security update is going to be available for the SF-3.6 release.
Make sure your deployment is up to date by running &lt;strong&gt;sfconfig --update&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please check the upstream announcement: &lt;a class="reference external" href="http://lists.zuul-ci.org/pipermail/zuul-announce/2021-June/000094.html"&gt;http://lists.zuul-ci.org/pipermail/zuul-announce/2021-June/000094.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On 2021-06-24 14:00:00 UTC,
the new zuul …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An important Zuul security update is going to be available for the SF-3.6 release.
Make sure your deployment is up to date by running &lt;strong&gt;sfconfig --update&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please check the upstream announcement: &lt;a class="reference external" href="http://lists.zuul-ci.org/pipermail/zuul-announce/2021-June/000094.html"&gt;http://lists.zuul-ci.org/pipermail/zuul-announce/2021-June/000094.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On 2021-06-24 14:00:00 UTC,
the new zuul package will be published, make sure you turn off the service and perform another &lt;strong&gt;sfconfig --update&lt;/strong&gt;.
To make the update faster, you can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server, update zuul:&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y *zuul*&amp;quot;&lt;/span&gt; install-server:zuul-scheduler:zuul-merger:zuul-executor:zuul-web
ansible-playbook /var/lib/software-factory/ansible/zuul_restart.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we are not able to fix the Zuul version 3.19 of the SF-3.5 release, thus
the 3.5 version is now End of life. If you are using SF-3.5, update now to SF-3.6 using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server, update from sf-3.5 to sf-3.6&lt;/span&gt;
yum install -y https://softwarefactory-project.io/repos/sf-release-3.6.rpm
yum update -y sf-config
sfconfig --update
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you experience any difficulties, please don't hesistate to raise an issue.&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 May 20 to Jun 09 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-may-20-to-jun-09-summary.html" rel="alternate"></link><published>2021-06-09T10:00:00+00:00</published><updated>2021-06-09T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-06-09:/sprint-2021-may-20-to-jun-09-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated using Matrix instead of IRC&lt;/li&gt;
&lt;li&gt;We investigated a Zuul scheduler issue where the gerrit connection is not restored after a restart&lt;/li&gt;
&lt;li&gt;We've improved the search pages for builds and buildsets in the UI (autocompletion for some …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated using Matrix instead of IRC&lt;/li&gt;
&lt;li&gt;We investigated a Zuul scheduler issue where the gerrit connection is not restored after a restart&lt;/li&gt;
&lt;li&gt;We've improved the search pages for builds and buildsets in the UI (autocompletion for some fields, checkboxes, pagination)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on containerized zuul story for SF 4.0 &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/sf-config/+/21791"&gt;https://softwarefactory-project.io/r/c/software-factory/sf-config/+/21791&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We integrated the latest version of Zuul and Nodepool&lt;/li&gt;
&lt;li&gt;We investigated using Matrix instead of IRC&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Moving from IRC to Matrix</title><link href="https://www.softwarefactory-project.io/moving-from-irc-to-matrix.html" rel="alternate"></link><published>2021-06-09T10:00:00+00:00</published><updated>2021-06-09T10:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2021-06-09:/moving-from-irc-to-matrix.html</id><content type="html">&lt;p&gt;We are moving from IRC to Matrix, you can now find us at &lt;em&gt;#softwarefactory-project:matrix.org&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Setup a matrix client by visiting: &lt;a class="reference external" href="https://matrix.to"&gt;https://matrix.to&lt;/a&gt;/#/#softwarefactory-project:matrix.org&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Practical Haskell Use Cases</title><link href="https://www.softwarefactory-project.io/practical-haskell-use-cases.html" rel="alternate"></link><published>2021-06-07T00:00:00+00:00</published><updated>2021-06-07T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2021-06-07:/practical-haskell-use-cases.html</id><summary type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;!-- This work is licensed under the Creative Commons Attribution 4.0 International License.
     To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
     or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
--&gt;&lt;p&gt;This post presents a few practical projects in which we used Haskell
succesfully.&lt;/p&gt;
&lt;p&gt;After using Python type annotations, and then the OCaml type system, a
colleague and I started to use Haskell to better define our program. We …&lt;/p&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }

&lt;/style&gt;&lt;!-- This work is licensed under the Creative Commons Attribution 4.0 International License.
     To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
     or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
--&gt;&lt;p&gt;This post presents a few practical projects in which we used Haskell
succesfully.&lt;/p&gt;
&lt;p&gt;After using Python type annotations, and then the OCaml type system, a
colleague and I started to use Haskell to better define our program. We
are satisfied with the initial results, and it is my pleasure to share
our use cases.&lt;/p&gt;
&lt;div class="section" id="lentille-a-bugzilla-task-data-crawler"&gt;
&lt;h2&gt;Lentille: a bugzilla task data crawler&lt;/h2&gt;
&lt;p&gt;Our goal was to perform Bugzilla API data processing. The challenge was
to query a HTTP API and adapt the responses for our needs.&lt;/p&gt;
&lt;p&gt;Fortunately, a client library for &lt;a class="reference external" href="https://hackage.haskell.org/package/bugzilla-redhat"&gt;bugzilla-redhat&lt;/a&gt; already existed. It
features a convenient &lt;a class="reference external" href="https://hackage.haskell.org/package/bugzilla-redhat-0.3.1/docs/Web-Bugzilla-RedHat-Search.html"&gt;Search&lt;/a&gt; module to define search expressions.
This allowed us to define our query using type safe operators with this
expression:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;searchExpr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;UTCTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;SearchExpression&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;searchExpr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sinceTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;since&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;&amp;amp;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;linkId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;&amp;amp;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;productField&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;linkId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;BZS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isNotEmpty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BZS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;CustomField&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ext_bz_bug_map.ext_bz_bug_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;productField&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;BZS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ProductField&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.==.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;since&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;BZS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changedSince&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sinceTS&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we used the &lt;a class="reference external" href="https://hackage.haskell.org/package/streaming"&gt;streaming&lt;/a&gt; library to isolate the queries from the
processing. This provided an abstraction to handle the results in bulk
(independently from the pagination logic). Here is the fetching
function, using &lt;a class="reference external" href="https://hackage.haskell.org/package/retry"&gt;retry&lt;/a&gt; to handle network interruptions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;getBZData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;MonadIO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;BugzillaSession&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;UTCTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;TaskData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;getBZData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bzSession&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;since&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;doGet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;MonadIO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Bug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;doGet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;liftIO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getBugs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bzSession&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sinceTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;-- Retrieve rhbz&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;LogGetBugs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sinceTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;retry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doGet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;-- Create a flat stream of task data&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concatMap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;toTaskData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;-- Keep on retrieving the rest&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;unless&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here is the stream processing function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Group by chunk of 500&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;MonadIO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;TaskData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;AddResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;TaskData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;postFunc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processBatch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;postFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapped&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- Convert to list (type is Stream (Of [TaskData]) m ())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chunksOf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;-- Chop the stream (type is Stream (Stream (Of TaskData) m) m ())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The client library missed a few features that we were able to implement
locally. It was easy to integrate the work in progress changes using a
&lt;tt class="docutils literal"&gt;cabal.project&lt;/tt&gt; file to override the location of a build dependency.
For example, we added &lt;a class="reference external" href="https://github.com/juhp/hsbugzilla/pull/15/files"&gt;support for apikey&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="monocle-http-api-based-on-protobuf"&gt;
&lt;h2&gt;Monocle HTTP API based on Protobuf&lt;/h2&gt;
&lt;p&gt;Satisfied with the result of Lentille, we wanted to leverage this
strongly typed approach for the API. The goal was to ensure the backend,
the workers, and the frontend would use a common and well defined API.
Check out this &lt;a class="reference external" href="https://github.com/change-metrics/monocle/blob/master/doc/adr/0010-choice-of-protobuf.md"&gt;Architecture Decision Record&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;For consistency with the existing code, we used the Protobuf JSON
encoding over HTTP. This allowed us to write a simple code generator for
javascript &lt;tt class="docutils literal"&gt;axios&lt;/tt&gt; client and python &lt;tt class="docutils literal"&gt;flask&lt;/tt&gt; endpoint using the
&lt;a class="reference external" href="https://hackage.haskell.org/package/language-protobuf"&gt;language-protobuf&lt;/a&gt; library. However we had issues with inconsistent
JSON encoding. For example, this protobuf message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;AddResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;oneof&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;TaskDataCommitSuccess&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;TaskDataCommitError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... has two encodings: the python implementation produces
&lt;tt class="docutils literal"&gt;{&amp;quot;result&amp;quot;: {&amp;quot;success&amp;quot;: &lt;span class="pre"&gt;&amp;quot;ok&amp;quot;}}&lt;/span&gt;&lt;/tt&gt; while the ocaml implementation expects
&lt;tt class="docutils literal"&gt;{&amp;quot;success&amp;quot;: &amp;quot;ok&amp;quot;}&lt;/tt&gt;. Fortunately, the Haskell implementation
&lt;a class="reference external" href="https://hackage.haskell.org/package/proto3-suite"&gt;proto3-suite&lt;/a&gt; correctly handles both formats.&lt;/p&gt;
&lt;p&gt;Another issue that came up was about the Timestamp message from the
Google protobuf well known type library. The official
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;protoc-compiler&lt;/span&gt;&lt;/tt&gt; transparently encodes this message as a rfc3339
string. We had to create a &lt;a class="reference external" href="https://github.com/awakesecurity/proto3-suite/pull/150"&gt;custom timestamp decoder&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="monocle-search-query"&gt;
&lt;h2&gt;Monocle Search Query&lt;/h2&gt;
&lt;p&gt;Our goal was to improve the query interface by replacing a filters form
with a query language. The challenge was to support text based query
such as
&lt;tt class="docutils literal"&gt;(repo:openstack/nova or repo:openstack/ironic) and score&amp;gt;200&lt;/tt&gt;. Check
out the &lt;a class="reference external" href="https://github.com/change-metrics/monocle/blob/master/doc/adr/0011-search-query-language.md"&gt;language architecture decision record&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Inspired by the work of Gabriel Gonzalez on interpreters, we used
&lt;a class="reference external" href="https://hackage.haskell.org/package/megaparsec"&gt;megaparsec&lt;/a&gt; to implement the language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;lex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Either&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ParseError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;LocatedToken&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;LocatedToken&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Either&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ParseError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;compile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Either&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ParseError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Query&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The query text was compiled to an Elastic search query with the
&lt;a class="reference external" href="https://hackage.haskell.org/package/bloodhound"&gt;bloodhound&lt;/a&gt; library and they are served through a &lt;a class="reference external" href="https://hackage.haskell.org/package/servant"&gt;servant&lt;/a&gt; API.
Using Servant required enabling complex extensions. Fortunately, the
&lt;a class="reference external" href="https://docs.servant.dev/en/stable/tutorial/ApiType.html"&gt;tutorial&lt;/a&gt; explained everything we needed to know. Here is the new
search API defined as a Haskell type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;MonocleAPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search_fields&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ReqBody&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;&amp;#39;[PBJSON]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;FieldsRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;&amp;#39;[PBJSON]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;FieldsResponse&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;:&amp;lt;|&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;changes&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ReqBody&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;&amp;#39;[PBJSON]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ChangesQueryRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;&amp;#39;[PBJSON]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ChangesQueryResponse&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lentille-graphql-client-for-github-and-gitlab"&gt;
&lt;h2&gt;Lentille GraphQL client for GitHub and GitLab&lt;/h2&gt;
&lt;p&gt;Our goal was to perform data processing of GraphQL APIs. The challenge
was to integrate complex queries defined using an extra language.&lt;/p&gt;
&lt;p&gt;We used the &lt;a class="reference external" href="https://hackage.haskell.org/package/morpheus-graphql"&gt;morpheus-graphql&lt;/a&gt; library to compile our GraphQL requests
into Haskell functions.&lt;/p&gt;
&lt;p&gt;We were able to re-use the streaming api we previously wrote. Here is
the fetching function that handles pagination cursor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;streamFetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;MonadIO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Fetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;FromJSON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;GitHubGraphClient&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- | query Args constructor, the function takes a cursor&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- | query result adapter&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PageInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;RateLimit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;streamFetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mkArgs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;transformResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pageInfoM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;respE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runGithubGraphRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mkArgs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromMaybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Missing endCursor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endCursor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pageInfoM&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kr"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rateLimit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;decodingErrors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;respE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;of&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;Left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ne"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toText&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;Right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;transformResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;-- TODO: report decoding error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;unless&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;decodingErrors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Decoding failed: &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;decodingErrors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;logStatus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pageInfo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rateLimit&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;-- Create a stream of &amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;-- Keep on retrieving the rest, TODO: implement throttle&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hasNextPage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pageInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pageInfo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similar to Servant, using Morpheus GraphQL adds strong guarantees to our
code. This comes at the cost of tediously handling complex data types.
Fortunately, Haskell features pattern synonyms, which make the pattern
matching on deeply nested structure a bit more manageable. Here is an
example pattern to match the labels of a GitHub issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;pattern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;IssueLabels&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nodesLabel&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;SearchNodesIssue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;SearchNodesLabelsLabelConnection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nodesLabel&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gerritbot-for-matrix"&gt;
&lt;h2&gt;Gerritbot for Matrix&lt;/h2&gt;
&lt;p&gt;The goal was to implement a service to forward Gerrit events to Matrix
rooms. The challenge was to adapt a stream of events into HTTP queries.&lt;/p&gt;
&lt;p&gt;I created interfaces for both processes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a matrix client using &lt;a class="reference external" href="https://hackage.haskell.org/package/aeson"&gt;aeson&lt;/a&gt; and &lt;a class="reference external" href="https://hackage.haskell.org/package/http-client"&gt;http-client&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;a ssh command wrapper using the &lt;a class="reference external" href="https://hackage.haskell.org/package/turtle"&gt;turtle&lt;/a&gt; library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then I used the &lt;a class="reference external" href="https://hackage.haskell.org/package/stm"&gt;stm&lt;/a&gt; library to implement safe concurrent process.
Here is the helper function to implement a buffered queue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;bufferQueueRead&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;TBMQueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;bufferQueueRead&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maxTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tqueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fromMaybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Queue is closed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atomically&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;TBMQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readTBMQueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tqueue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;threadDelay&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maxTime&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;atomically&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drainQueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;drainQueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fromMaybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Queue is closed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;TBMQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryReadTBMQueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tqueue&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;of&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;drainQueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also used &lt;a class="reference external" href="https://hackage.haskell.org/package/optparse-generic-1.4.4/docs/Options-Generic.html"&gt;Options.Generic&lt;/a&gt; to define the CLI API as a Haskell data
type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;CLI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;CLI&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gerritHost&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The gerrit host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gerritUser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The gerrit username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;matrixUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The matrix url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;configFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;FilePath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The gerritbot.dhall path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;syncClient&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;:::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sync matrix status (join rooms)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and &lt;a class="reference external" href="https://hackage.haskell.org/package/dhall"&gt;Dhall.TH&lt;/a&gt; to derive data types from the configuration file
schema:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Dhall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;TH&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeHaskellTypes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Dhall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;TH&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;MultipleConstructors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EventType&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./src/EventType.dhall&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;Dhall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;TH&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;SingleConstructor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Channel&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Channel&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(./src/Config.dhall).Type&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These strongly type interfaces allowed me to safely add new features
without breaking the service. I was able to keep the service running
during development without any interruptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Haskell is designed to enable efficient programing. There is a wealth of
libraries with which to compose, and thanks to the Haddock documentation
system, we were able to integrate many of them.&lt;/p&gt;
&lt;p&gt;The type system makes code refactoring and code review really easy. It
lets us focus on the core logic without having to worry about entire
classes of bugs. In particular, Haskell helps us break monolith programs
into well defined and re-usable functions. Being able to move the code
fearlessly is incredibly powerfull.&lt;/p&gt;
&lt;p&gt;Moreover, the Haskell community is constantly producing interesting
work. It is fascinating to see such progress in the development of a
language.&lt;/p&gt;
&lt;p&gt;However, the learning curve is rather steep. We spent a lot of time
fighting with errors produced by the type checker. While the editor
support really helped, getting the code to compile was a challenge.&lt;/p&gt;
&lt;p&gt;Haskell compiler is currently very slow, and we had to do extra work to
keep the continuous integration build time reasonable. A clean build of
all our dependencies took 30 minutes, and we had to create a cumbersome
layered container to keep the build time under 5 minutes.&lt;/p&gt;
&lt;p&gt;The Haskell syntax creates undesirable frictions for new contributors
because it initially looks strange. After getting over the bump, the
language makes a lot of sense and it is not difficult to learn.&lt;/p&gt;
&lt;p&gt;In the end, we are happy with the results, and the benefits of using
Haskell quickly outweight the cost.&lt;/p&gt;
&lt;p&gt;If you liked this article, you might be interested in my other ones:
&lt;a class="reference external" href="https://www.softwarefactory-project.io/author/tristanc.html"&gt;https://www.softwarefactory-project.io/author/tristanc.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks for your time!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Apr 29 to May 19 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-apr-29-to-may-19-summary.html" rel="alternate"></link><published>2021-05-19T10:00:00+00:00</published><updated>2021-05-19T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-05-19:/sprint-2021-apr-29-to-may-19-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We started to work on SF 4.0 by validating we can run sf-ci-functional-minimal job using zuul containers from opendev&lt;/li&gt;
&lt;li&gt;We have fixed logserver display of compressed log files in html format&lt;/li&gt;
&lt;li&gt;We fixed the provision-demo option …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We started to work on SF 4.0 by validating we can run sf-ci-functional-minimal job using zuul containers from opendev&lt;/li&gt;
&lt;li&gt;We have fixed logserver display of compressed log files in html format&lt;/li&gt;
&lt;li&gt;We fixed the provision-demo option when using keycloak&lt;/li&gt;
&lt;li&gt;We integrate Opendistro with Keycloak&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Apr 08 to Apr 28 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-apr-08-to-apr-28-summary.html" rel="alternate"></link><published>2021-04-28T10:00:00+00:00</published><updated>2021-04-28T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-04-28:/sprint-2021-apr-08-to-apr-28-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the prometheus client change in zuul and got it approved: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/599209/"&gt;https://review.opendev.org/c/zuul/zuul/+/599209/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated some long open patches on zuul (web UI) and zuul-client.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We're investigating on using …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the prometheus client change in zuul and got it approved: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/599209/"&gt;https://review.opendev.org/c/zuul/zuul/+/599209/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated some long open patches on zuul (web UI) and zuul-client.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We're investigating on using upstream containers for zuul services for SF 4.0 (POC)&lt;/li&gt;
&lt;li&gt;We fixed an issue for gerrit user deletion that was failing in tests: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/pynotedb/+/21711"&gt;https://softwarefactory-project.io/r/c/software-factory/pynotedb/+/21711&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed issue related to the new version of lodgeit and gerritbot&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Mar 18 to Apr 07 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-mar-18-to-apr-07-summary.html" rel="alternate"></link><published>2021-04-07T10:00:00+00:00</published><updated>2021-04-07T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-04-07:/sprint-2021-mar-18-to-apr-07-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We made progress on the zuul-runner implementation, the required server side change is now effective in zuul.opendev.org, the cli and base needs some more work to be fully usable though&lt;/li&gt;
&lt;li&gt;We fixed a network issue with …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We made progress on the zuul-runner implementation, the required server side change is now effective in zuul.opendev.org, the cli and base needs some more work to be fully usable though&lt;/li&gt;
&lt;li&gt;We fixed a network issue with the zuul-operator integration job&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed an issue with new user creation in gerrit caused by unexpected git object schemas, patch is: &lt;a class="reference external" href="https://softwarefactory-project.io/r/c/software-factory/pynotedb/+/21472"&gt;https://softwarefactory-project.io/r/c/software-factory/pynotedb/+/21472&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We released SF 3.6 &lt;a class="reference external" href="https://www.softwarefactory-project.io/releases/3.6/"&gt;https://www.softwarefactory-project.io/releases/3.6/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We switched to openjdk 11 for few services in sf (we would like to check if the new Java will help with Gerrit memory consumption)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Feb 25 to Mar 17 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-feb-25-to-mar-17-summary.html" rel="alternate"></link><published>2021-03-18T10:00:00+00:00</published><updated>2021-03-18T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-03-18:/sprint-2021-feb-25-to-mar-17-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed Zuul and Nodepool changes&lt;/li&gt;
&lt;li&gt;We investigated an issue with zuul tenant resources metrics related to held node: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/781092"&gt;https://review.opendev.org/c/zuul/zuul/+/781092&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated using source event instead of websocket for zuul console …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed Zuul and Nodepool changes&lt;/li&gt;
&lt;li&gt;We investigated an issue with zuul tenant resources metrics related to held node: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/781092"&gt;https://review.opendev.org/c/zuul/zuul/+/781092&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated using source event instead of websocket for zuul console stream: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/779581"&gt;https://review.opendev.org/c/zuul/zuul/+/779581&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We continued implementing the zuul-runner specification&lt;/li&gt;
&lt;li&gt;we've updated the admin web ui changes for zuul&lt;/li&gt;
&lt;li&gt;we've added an Autoholds/autohold page in the web UI.&lt;/li&gt;
&lt;li&gt;we helped community to fix get-pip.py script after pypi community change the bootstrap script url&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issues related to upgrading sf-3.5 to sf-3.6&lt;/li&gt;
&lt;li&gt;We improved the welcome page&lt;/li&gt;
&lt;li&gt;We created the sf-3.6-candidate repository and prepare the main release repository&lt;/li&gt;
&lt;li&gt;We discussed a roadmap for software factory version 4&lt;/li&gt;
&lt;li&gt;We improved kibana backup script&lt;/li&gt;
&lt;li&gt;We improved Kibana configuration after bumping to new version&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Software Factory 4 Roadmap</title><link href="https://www.softwarefactory-project.io/software-factory-4-roadmap.html" rel="alternate"></link><published>2021-03-12T00:00:00+00:00</published><updated>2021-03-12T00:00:00+00:00</updated><author><name>nhicher</name></author><id>tag:www.softwarefactory-project.io,2021-03-12:/software-factory-4-roadmap.html</id><summary type="html">&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;Here is the roadmap for Software Factory's next major release. The 4.x release
aims to decouple the base operating system from SF services, so that Software
Factory can be deployed on RPM based flavors of Linux and containerized all SF
services.&lt;/p&gt;
&lt;p&gt;The high level steps are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;4.0 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;Here is the roadmap for Software Factory's next major release. The 4.x release
aims to decouple the base operating system from SF services, so that Software
Factory can be deployed on RPM based flavors of Linux and containerized all SF
services.&lt;/p&gt;
&lt;p&gt;The high level steps are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;4.0: modify sf-config to deploy services as containers instead of packages&lt;ul&gt;
&lt;li&gt;build custom container images for services that are not available (e.g managesf) and use upstream containers for Zuul, Elasticsearch, Gerrit.&lt;/li&gt;
&lt;li&gt;replace &lt;cite&gt;yum install / systemctl start&lt;/cite&gt; by &lt;cite&gt;podman run service&lt;/cite&gt; for all services.&lt;/li&gt;
&lt;li&gt;use --volume option to transparently run the container with host files (e.g. /etc/zuul, /var/lib/zuul, /var/log/zuul).&lt;/li&gt;
&lt;li&gt;replace Cauth with Keycloak for SSO and user management.&lt;/li&gt;
&lt;li&gt;replace RepoXplorer with Monocle.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4.1: improve sf-config tasks to be closer to kubernetes.&lt;ul&gt;
&lt;li&gt;change the setup workflow to run secrets creation on the install-server.&lt;/li&gt;
&lt;li&gt;remove the need to have sf-config installed on each host.&lt;/li&gt;
&lt;li&gt;services deployment should be consistent:&lt;ul&gt;
&lt;li&gt;copy the configuration and secret.&lt;/li&gt;
&lt;li&gt;create the systemd unit.&lt;/li&gt;
&lt;li&gt;start the service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4.2: implement sf-config as kubernetes operators.&lt;ul&gt;
&lt;li&gt;update the extra glue such as config-update and cron task as kubernetes resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are looking forward to this significant tech change, which should simplify
maintaining, developing and deploying Software Factory. Let us know what you
think!&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Feb 4 to Feb 24 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-feb-4-to-feb-24-summary.html" rel="alternate"></link><published>2021-02-24T10:00:00+00:00</published><updated>2021-02-24T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-02-24:/sprint-2021-feb-4-to-feb-24-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on reviewing the change needed to release the zuul and nodepool version 4.0&lt;/li&gt;
&lt;li&gt;We worked on efficient rendering of links and ansi escape sequence in the zuul web interface: &lt;a class="reference external" href="https://review.opendev.org/q/topic:%22web-links-render%22"&gt;https://review.opendev.org/q/topic …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on reviewing the change needed to release the zuul and nodepool version 4.0&lt;/li&gt;
&lt;li&gt;We worked on efficient rendering of links and ansi escape sequence in the zuul web interface: &lt;a class="reference external" href="https://review.opendev.org/q/topic:%22web-links-render%22"&gt;https://review.opendev.org/q/topic:%22web-links-render%22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigate a benchmark scenario to measure the overhead of the upcoming change for zuul version 5.0: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/776287"&gt;https://review.opendev.org/c/zuul/zuul/+/776287&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We improved the kubernetes client creation in nodepool: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/nodepool/+/777022"&gt;https://review.opendev.org/c/zuul/nodepool/+/777022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've added testing to Fedora's python-zuul-client package, and ensured the packaged version is compatible with Zuul 3.19.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the python requirements needed by the latest version of zuul and nodepool&lt;/li&gt;
&lt;li&gt;We fixed issues on sf-ci on rhel to prepare sf 3.6 release&lt;/li&gt;
&lt;li&gt;We added alias management on sf-gateway to add alias for tls challenge on gateway.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Using Dhall to generate Fedora CI Zuul config</title><link href="https://www.softwarefactory-project.io/using-dhall-to-generate-fedora-ci-zuul-config.html" rel="alternate"></link><published>2021-02-10T00:00:00+00:00</published><updated>2021-02-10T00:00:00+00:00</updated><author><name>Fabien</name></author><id>tag:www.softwarefactory-project.io,2021-02-10:/using-dhall-to-generate-fedora-ci-zuul-config.html</id><summary type="html">&lt;p&gt;In this article we will show how we leveraged the Dhall language to build a
list of jobs for Fedora Zuul CI based on a matrix of values.&lt;/p&gt;
&lt;div class="section" id="fedora-zuul-ci"&gt;
&lt;h2&gt;Fedora Zuul CI&lt;/h2&gt;
&lt;p&gt;FZCI is an effort to provide Zuul CI for Fedora. Main goals, as stated in &lt;a class="reference external" href="https://fedoraproject.org/wiki/Zuul-based-ci"&gt;the project's
wiki page …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In this article we will show how we leveraged the Dhall language to build a
list of jobs for Fedora Zuul CI based on a matrix of values.&lt;/p&gt;
&lt;div class="section" id="fedora-zuul-ci"&gt;
&lt;h2&gt;Fedora Zuul CI&lt;/h2&gt;
&lt;p&gt;FZCI is an effort to provide Zuul CI for Fedora. Main goals, as stated in &lt;a class="reference external" href="https://fedoraproject.org/wiki/Zuul-based-ci"&gt;the project's
wiki page&lt;/a&gt;, are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Bring CI infrastructure based on Zuul for projects hosted on pagure.io
and src.fedoraproject.org.&lt;/li&gt;
&lt;li&gt;Provide jobs and workflow of jobs around Pull Requests for Fedora packages
(distgits on src.fedoraproject.org).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dhall"&gt;
&lt;h2&gt;Dhall&lt;/h2&gt;
&lt;p&gt;According to the &lt;a class="reference external" href="https://github.com/dhall-lang/dhall-lang"&gt;Dhall project's page on GitHub&lt;/a&gt;,
Dhall is a programmable configuration language optimized for maintainability.
You can think of Dhall as: JSON + functions + types + imports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-statement"&gt;
&lt;h2&gt;Problem statement&lt;/h2&gt;
&lt;p&gt;Until recently the Fedora Zuul CI ran Koji scratch build jobs for the X86_64 architecture
only. But it was decided to add build jobs for each supported Fedora architecture.&lt;/p&gt;
&lt;p&gt;The scratch build job is composed of four variants, one for each Fedora branch/version plus
epel8 (master/rawhide, f33, f32, epel8). It means we have to describe the rpm-scratch-build
job, with its variants, as follow:&lt;/p&gt;
&lt;pre class="code YAML literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;rpm-scratch-build&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;common-koji-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;final&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;provides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;repo&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;arches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;x86_64&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;fetch_artifacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;scratch_build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;rawhide&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;rpm-scratch-build&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;common-koji-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;f33&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;final&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;provides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;repo&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;arches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;x86_64&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;fetch_artifacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;f33&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;scratch_build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;f33&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# And so on for the other supported branches&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;For the default architecture job (x86_64), we need four variants. We also need to
support five additional architectures, with an exception for epel8 branch where
three architectures are supported. Thus we need to describe a total of 21 jobs
(3 branches * 6 architectures) + (1 branch * 3 architectures).&lt;/p&gt;
&lt;p&gt;Furthermore, we need to adapt the job's variables based on the architecture.
For instance, non x86_64 jobs do not provide a repository.&lt;/p&gt;
&lt;p&gt;Here is the job definition called &lt;cite&gt;rpm-scratch-build-s390x&lt;/cite&gt; for the master branch
and the S390X architecture:&lt;/p&gt;
&lt;pre class="code YAML literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;rpm-scratch-build-s390x&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;common-koji-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;check-for-arches&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;final&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;arches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;s390x&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;fetch_artifacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;scratch_build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;rawhide&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To manage that complexity we decided to use dhall-lang to benefit from nice helper
functions such as &lt;cite&gt;map&lt;/cite&gt;, &lt;cite&gt;filter&lt;/cite&gt; and &lt;cite&gt;merge&lt;/cite&gt; but also from strong typing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation-of-the-jobs-dhall"&gt;
&lt;h2&gt;Implementation of the jobs.dhall&lt;/h2&gt;
&lt;p&gt;We started by defining what are the Architectures and the Branches.&lt;/p&gt;
&lt;div class="section" id="dhall-definition-of-architectures"&gt;
&lt;h3&gt;dhall definition of Architectures&lt;/h3&gt;
&lt;p&gt;We define the architectures in the &lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/FZCI.dhall/Arches.dhall"&gt;Arches.dhall&lt;/a&gt; file,
whose content is copied below.
We'll follow with an explanation of the contents of the file.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
let Union = &amp;lt; X86_64 | S390X | PPC64LE | I686 | ARMV7HL | AARCH64 &amp;gt;

let eq_def =
      { X86_64 = False
      , S390X = False
      , PPC64LE = False
      , I686 = False
      , ARMV7HL = False
      , AARCH64 = False
      }

in  { Type = Union
    , default = Union.X86_64
    , fedora =
      [ Union.X86_64
      , Union.S390X
      , Union.PPC64LE
      , Union.I686
      , Union.ARMV7HL
      , Union.AARCH64
      ]
    , epel8 = [ Union.X86_64, Union.PPC64LE, Union.AARCH64 ]
    , show =
        \(arch : Union) -&amp;gt;
          merge
            { X86_64 = &amp;quot;x86_64&amp;quot;
            , S390X = &amp;quot;s390x&amp;quot;
            , PPC64LE = &amp;quot;ppc64le&amp;quot;
            , I686 = &amp;quot;i686&amp;quot;
            , ARMV7HL = &amp;quot;armv7hl&amp;quot;
            , AARCH64 = &amp;quot;aarch64&amp;quot;
            }
            arch
    , isX86_64 = \(arch : Union) -&amp;gt; merge (eq_def // { X86_64 = True }) arch
    }
&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;Arches.dhall&lt;/cite&gt; provides, through the &lt;cite&gt;in&lt;/cite&gt; statement, a record of data and
functions that can be seen as a module.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;Union&lt;/cite&gt; let binding is an &lt;a class="reference external" href="https://docs.dhall-lang.org/tutorials/Language-Tour.html?highlight=union#unions"&gt;Union type&lt;/a&gt; where we defined the possible values
of an Architecture.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;eq_def&lt;/cite&gt; binding is a base record that we will use to do pattern matching
on the &lt;cite&gt;Union&lt;/cite&gt;. This is used by the &lt;cite&gt;isX86_64&lt;/cite&gt; function
that takes an &lt;cite&gt;arch&lt;/cite&gt; and returns &lt;cite&gt;True&lt;/cite&gt; if the arch's union value is &lt;cite&gt;X86_64&lt;/cite&gt;.
Note the use of the &lt;a class="reference external" href="https://docs.dhall-lang.org/references/Built-in-types.html?highlight=union#keyword-merge"&gt;merge&lt;/a&gt;
function to do the pattern matching on the union.&lt;/p&gt;
&lt;p&gt;The show function takes an &lt;cite&gt;arch&lt;/cite&gt; and return the corresponding string that
we will use to render the final yaml.&lt;/p&gt;
&lt;p&gt;Here are some usages of our new module.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ dhall &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(./Arches.dhall).show (./Arches.dhall).default&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;x86_64&amp;quot;&lt;/span&gt;
$ dhall &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;let Arches = ./Arches.dhall in [{ job = { architecture = Arches.Type.PPC64LE }}]&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; job.architecture &lt;span class="o"&gt;=&lt;/span&gt;
      &amp;lt; AARCH64 &lt;span class="p"&gt;|&lt;/span&gt; ARMV7HL &lt;span class="p"&gt;|&lt;/span&gt; I686 &lt;span class="p"&gt;|&lt;/span&gt; PPC64LE &lt;span class="p"&gt;|&lt;/span&gt; S390X &lt;span class="p"&gt;|&lt;/span&gt; X86_64 &amp;gt;.PPC64LE
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
$ dhall-to-yaml &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;let arch=(./Arches.dhall).show (./Arches.dhall).default in [{job = { architecture =  arch}}]&amp;quot;&lt;/span&gt;
- job:
    architecture: x86_64
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="dhall-definition-of-branches"&gt;
&lt;h3&gt;dhall definition of Branches&lt;/h3&gt;
&lt;p&gt;The same way we have defined architectures, we define branches
in the &lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/FZCI.dhall/Branches.dhall"&gt;Branches.dhall&lt;/a&gt; file,
whose content is copied below.&lt;/p&gt;
&lt;p&gt;We'll follow with an explanation of the contents of the file.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
let Prelude =
      https://prelude.dhall-lang.org/v17.0.0/package.dhall sha256:10db3c919c25e9046833df897a8ffe2701dc390fa0893d958c3430524be5a43e

let Arches = ./Arches.dhall

let Union = &amp;lt; Master | F32 | F33 | Epel8 &amp;gt;

let eq_def = { Master = False, F32 = False, F33 = False, Epel8 = False }

let show =
      \(branch : Union) -&amp;gt;
        merge
          { Master = &amp;quot;master&amp;quot;, F32 = &amp;quot;f32&amp;quot;, F33 = &amp;quot;f33&amp;quot;, Epel8 = &amp;quot;epel8&amp;quot; }
          branch

let all = [ Union.Master, Union.F33, Union.F32, Union.Epel8 ]

in  { Type = Union
    , default = Union.Master
    , all
    , allText = Prelude.List.map Union Text show all
    , show
    , target =
        \(branch : Union) -&amp;gt;
          merge
            { Master = &amp;quot;rawhide&amp;quot;, F32 = &amp;quot;f32&amp;quot;, F33 = &amp;quot;f33&amp;quot;, Epel8 = &amp;quot;epel8&amp;quot; }
            branch
    , arches =
        \(branch : Union) -&amp;gt;
          merge
            { Master = Arches.fedora
            , F32 = Arches.fedora
            , F33 = Arches.fedora
            , Epel8 = Arches.epel8
            }
            branch
    , isMaster = \(branch : Union) -&amp;gt; merge (eq_def // { Master = True }) branch
    , isEpel8 = \(branch : Union) -&amp;gt; merge (eq_def // { Epel8 = True }) branch
    }
&lt;/pre&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/dhall-lang/dhall-lang/tree/v17.0.0/Prelude"&gt;Prelude&lt;/a&gt; let binding is the Dhall core library.&lt;/p&gt;
&lt;p&gt;Note that we include the &lt;cite&gt;Arches.dhall&lt;/cite&gt; via a let binding. This way we can define
the &lt;cite&gt;arches&lt;/cite&gt; function that take a &lt;cite&gt;branch&lt;/cite&gt; as argument and return the branch's supported
architectures.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ dhall-to-yaml &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(./Branches.dhall).arches &amp;lt; Epel8 | F32 | F33 | Master &amp;gt;.Epel8&amp;quot;&lt;/span&gt;

- X86_64
- PPC64LE
- AARCH64
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="jobs-dhall"&gt;
&lt;h3&gt;jobs.dhall&lt;/h3&gt;
&lt;p&gt;Now let's use this two new modules to write the
&lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/FZCI.dhall/jobs.dhall"&gt;jobs.dhall&lt;/a&gt; file whose content is copied below.
Then using &lt;cite&gt;dhall-to-yaml&lt;/cite&gt; command we'll be able to create the jobs.yaml.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
let Zuul =
        ~/git/softwarefactory-project.io/software-factory/dhall-zuul/package.dhall
      ? https://softwarefactory-project.io/cgit/software-factory/dhall-zuul/plain/package.dhall

let Prelude =
      https://prelude.dhall-lang.org/v17.0.0/package.dhall sha256:10db3c919c25e9046833df897a8ffe2701dc390fa0893d958c3430524be5a43e

let Branches = ./Branches.dhall

let Arches = ./Arches.dhall

let generateRpmBuildJobName
    : Arches.Type -&amp;gt; Text
    = \(arch : Arches.Type) -&amp;gt;
        let suffix =
              if Arches.isX86_64 arch then &amp;quot;&amp;quot; else &amp;quot;-&amp;quot; ++ Arches.show arch

        in  &amp;quot;rpm-scratch-build&amp;quot; ++ suffix

let Arches =
          Arches
      //  { extras =
              Prelude.List.filter
                Arches.Type
                ( \(arch : Arches.Type) -&amp;gt;
                    Prelude.Bool.not (Arches.isX86_64 arch)
                )
                Arches.fedora
          , scratch-job-names =
              Prelude.List.map
                Arches.Type
                Text
                (\(arch : Arches.Type) -&amp;gt; generateRpmBuildJobName arch)
          }

let check_for_arches =
      Zuul.Job::{
      , name = &amp;quot;check-for-arches&amp;quot;
      , description = Some &amp;quot;Check the packages needs arches builds&amp;quot;
      , branches = Some Branches.allText
      , run = Some &amp;quot;playbooks/rpm/check-for-arches.yaml&amp;quot;
      , vars = Some
          ( Zuul.Vars.object
              ( toMap
                  { arch_jobs =
                      Zuul.Vars.array
                        ( Prelude.List.map
                            Text
                            Zuul.Vars.Type
                            Zuul.Vars.string
                            (Arches.scratch-job-names Arches.extras)
                        )
                  }
              )
          )
      , nodeset = Some (Zuul.Nodeset.Name &amp;quot;fedora-33-container&amp;quot;)
      }

let common_koji_rpm_build =
      Zuul.Job::{
      , name = &amp;quot;common-koji-rpm-build&amp;quot;
      , abstract = Some True
      , protected = Some True
      , description = Some &amp;quot;Base job for RPM build on Fedora Koji&amp;quot;
      , timeout = Some 21600
      , nodeset = Some (Zuul.Nodeset.Name &amp;quot;fedora-33-container&amp;quot;)
      , roles = Some [ { zuul = &amp;quot;zuul-distro-jobs&amp;quot; } ]
      , run = Some &amp;quot;playbooks/koji/build-ng.yaml&amp;quot;
      , secrets = Some
        [ Zuul.Job.Secret::{ name = &amp;quot;krb_keytab&amp;quot;, secret = &amp;quot;krb_keytab&amp;quot; } ]
      }

let setVars =
      \(target : Text) -&amp;gt;
      \(release : Text) -&amp;gt;
      \(arch : Text) -&amp;gt;
      \(fetch_artifacts : Bool) -&amp;gt;
        Zuul.Vars.object
          ( toMap
              { fetch_artifacts = Zuul.Vars.bool fetch_artifacts
              , scratch_build = Zuul.Vars.bool True
              , target = Zuul.Vars.string target
              , release = Zuul.Vars.string release
              , arches = Zuul.Vars.string arch
              }
          )

let doFetchArtifact
    : Arches.Type -&amp;gt; Bool
    = \(arch : Arches.Type) -&amp;gt; Arches.isX86_64 arch

let generateRpmBuildJob =
      \(branch : Branches.Type) -&amp;gt;
      \(arch : Arches.Type) -&amp;gt;
        Zuul.Job::{
        , name = generateRpmBuildJobName arch
        , parent = Some (Zuul.Job.getName common_koji_rpm_build)
        , final = Some True
        , provides =
            if Arches.isX86_64 arch then Some [ &amp;quot;repo&amp;quot; ] else None (List Text)
        , dependencies =
            if    Arches.isX86_64 arch
            then  None (List Zuul.Job.Dependency.Union)
            else  Some [ Zuul.Job.Dependency.Name &amp;quot;check-for-arches&amp;quot; ]
        , branches = Some [ Branches.show branch ]
        , vars = Some
            ( setVars
                (Branches.target branch)
                (Branches.show branch)
                (Arches.show arch)
                (doFetchArtifact arch)
            )
        }

let generateRpmScratchBuildJobs
    : List Zuul.Job.Type
    = let forBranch =
            \(branch : Branches.Type) -&amp;gt;
              Prelude.List.map
                Arches.Type
                Zuul.Job.Type
                (generateRpmBuildJob branch)
                (Branches.arches branch)

      in  Prelude.List.concatMap
            Branches.Type
            Zuul.Job.Type
            forBranch
            Branches.all

let Jobs =
      [ check_for_arches, common_koji_rpm_build ] # generateRpmScratchBuildJobs

in  Zuul.Job.wrap Jobs
&lt;/pre&gt;
&lt;p&gt;To write this file we used the &lt;a class="reference external" href="https://github.com/softwarefactory-project/dhall-zuul"&gt;Dhall-Zuul Binding library&lt;/a&gt;. We import
the library using the &lt;cite&gt;Zuul&lt;/cite&gt; let binding.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;in&lt;/cite&gt; statement uses
the &lt;cite&gt;wrap&lt;/cite&gt; function provided &lt;cite&gt;dhall-zuul&lt;/cite&gt; to wrap the list of &lt;a class="reference external" href="https://github.com/softwarefactory-project/dhall-zuul/blob/master/Zuul/Job/Type.dhall"&gt;Zuul.Jobs.Type&lt;/a&gt;
to make this list consumable by Zuul.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;check-for-arches&lt;/cite&gt; is a &amp;quot;conditional job&amp;quot; that control the triggering
of dependent jobs. It needs to be triggered on branches defined in &lt;cite&gt;Branches.dhall&lt;/cite&gt;.
The job's playbook expects a variable called &lt;cite&gt;arch_jobs&lt;/cite&gt; that is the list of
architecture dependent jobs names. The list is built based on &lt;cite&gt;&amp;quot;Arches.dhall&amp;quot;.fedora&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Note the use of &lt;a class="reference external" href="https://docs.dhall-lang.org/references/Built-in-types.html?highlight=tomap#keyword-tomap"&gt;toMap&lt;/a&gt;,
&lt;a class="reference external" href="https://prelude.dhall-lang.org/v17.0.0/List/map"&gt;List.map&lt;/a&gt;, and &lt;a class="reference external" href="https://prelude.dhall-lang.org/v17.0.0/List/filter"&gt;List.filter&lt;/a&gt;
functions.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;common_koji_rpm_build&lt;/cite&gt; is the parent job of all scratch build jobs.
The Zuul configuration loader will make all child jobs inherit from its
attributes.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;Jobs&lt;/cite&gt; list is extended (using the &lt;a class="reference external" href="https://docs.dhall-lang.org/references/Built-in-types.html#id49"&gt;#&lt;/a&gt; operator) with &lt;cite&gt;generateRpmScratchBuildJobs&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;generateRpmScratchBuildJobs&lt;/cite&gt; is a list of &lt;cite&gt;Zuul.Job.Type&lt;/cite&gt; built from two encapsulted
iterations over the &lt;cite&gt;Branches.all&lt;/cite&gt; and &lt;cite&gt;Branches.arches &amp;lt;branch&amp;gt;&lt;/cite&gt;. Note the use of
&lt;a class="reference external" href="https://prelude.dhall-lang.org/v17.0.0/List/concatMap"&gt;concatMap&lt;/a&gt; to flatten
the resulting nested lists.&lt;/p&gt;
&lt;p&gt;At each iteration the &lt;cite&gt;generateRpmBuildJob&lt;/cite&gt; function is called by taking
the branch and the architecture as arguments.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;generateRpmBuildJob&lt;/cite&gt; defined a &lt;cite&gt;Zuul.Job.Type&lt;/cite&gt; by setting the job' parameters
based on the &lt;cite&gt;branch&lt;/cite&gt; and &lt;cite&gt;arch&lt;/cite&gt; context. The &lt;cite&gt;dependencies&lt;/cite&gt; attributes is
built using &lt;cite&gt;if/then/else&lt;/cite&gt; statements. The &lt;cite&gt;name&lt;/cite&gt; attribute is defined
by the &lt;cite&gt;generateRpmBuildJobName&lt;/cite&gt; function call as well as &lt;cite&gt;vars&lt;/cite&gt; is defined by
a call to &lt;cite&gt;setVars&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Let's run dhall-to-yaml command to get the YAML output.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ dhall-to-yaml &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; ./jobs.dhall &lt;span class="p"&gt;|&lt;/span&gt; zuulfmt
&lt;/pre&gt;
&lt;p&gt;Here is the generated &lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/FZCI.dhall/jobs.yaml"&gt;jobs.yaml&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Note the use of &lt;a class="reference external" href="https://softwarefactory-project.io/r/gitweb?p=software-factory/zuulfmt.git"&gt;zuulfmt&lt;/a&gt;
thats is a tool to format a Zuul config YAML definition.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fedora-distgits-master-branch-removal"&gt;
&lt;h2&gt;Fedora distgits master branch removal&lt;/h2&gt;
&lt;p&gt;On February 3rd, the Fedora community ran the migration to &lt;a class="reference external" href="https://fedoraproject.org/wiki/Changes/GitRepos-master-to-main"&gt;remove the
master branch from the distgit repositories&lt;/a&gt;.
For Zuul configuration, this required some small changes to ensure PRs on main and rawhide
branches are handled by Zuul.&lt;/p&gt;
&lt;p&gt;To handle this change, we acted in three steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/fedora-project-config/pull-request/126#request_diff"&gt;Updated the FZCI.dhall package to include the new branches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/fedora-zuul-jobs-config/pull-request/105#request_diff"&gt;Updated fedora-zuul-jobs-config/zuul.d/jobs.dhall and regenerated the jobs.yaml&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/fedora-zuul-jobs/pull-request/98#request_diff"&gt;Updated fedora-zuul-jobs/zuul.d/jobs.dhall and regenerated the jobs.yaml&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="support-of-fedora-f34-branch"&gt;
&lt;h2&gt;Support of Fedora f34 branch&lt;/h2&gt;
&lt;p&gt;On February 9th, the branching of Fedora 34 from rawhide happened. Each distgit
repository got a &lt;cite&gt;f34&lt;/cite&gt; branch. For Zuul configuration, this required new job
variants to support this new branch. To do so we only changed some dhall files
then regenerated the yaml files.&lt;/p&gt;
&lt;p&gt;Bellow are the three changes that was required.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/fedora-project-config/pull-request/131"&gt;Updated FZCI.dhall package to include the new branch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/fedora-zuul-jobs-config/pull-request/110"&gt;Regenerated the fedora-zuul-jobs-config/zuul.d/jobs.yaml with dhall-to-yaml&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/fedora-zuul-jobs/pull-request/100"&gt;Updated fedora-zuul-jobs/zuul.d/jobs.dhall and regenered the jobs.yaml&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pros-and-cons"&gt;
&lt;h2&gt;Pros and cons&lt;/h2&gt;
&lt;p&gt;Let's see the pros and cons regarding the dhall-lang usage to manage the FZCI jobs:&lt;/p&gt;
&lt;div class="section" id="cons"&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New language to learn for contributors.&lt;/li&gt;
&lt;li&gt;Less welcoming for contributors with no previous Dhall experiences.&lt;/li&gt;
&lt;li&gt;Not as simple as editing a YAML file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pros"&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dhall-Zuul prevents invalid Zuul job definition. For instance a
typo in a job's attribute or using a string as value attribute where a list of strings
is expected will be caught by the Dhall interpreter.&lt;/li&gt;
&lt;li&gt;Dhall IDE integration provides type checking and completion. For instance my VSCode IDE
will list the available Branches (from &amp;quot;Branches.dhall&amp;quot;.Type) and prevents me
to use one not part of the Union.&lt;/li&gt;
&lt;li&gt;No more YAML formating issue.&lt;/li&gt;
&lt;li&gt;Adding a branch (ex. f34) is less error prone. For instance it is not possible to
miss a job for a given Arch, neither setting the wrong jobs' vars.&lt;/li&gt;
&lt;li&gt;No more YAML / code duplication as it is easy to write functions.&lt;/li&gt;
&lt;li&gt;Allow modularization and code reusability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="to-conclude"&gt;
&lt;h2&gt;To conclude&lt;/h2&gt;
&lt;p&gt;Thanks to that effort, adding and removing an architecture or a branch is easier
because it is significantly less error prone. We have also started
to modularize the base definitions (branches, arches) so it will be easy to
extend the jobs we provide through FZCI.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Jan 14 to Feb 3 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-jan-14-to-feb-3-summary.html" rel="alternate"></link><published>2021-02-03T10:00:00+00:00</published><updated>2021-02-03T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-02-03:/sprint-2021-jan-14-to-feb-3-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issues related to Diskimage builder for bulding RHEL (python3-PyYAML
was missing) and Centos/Fedora (get-pip.py) + fbo change for Elasticsearch
reporter in Zuul has been merged o/&lt;/li&gt;
&lt;li&gt;We rebased the zuul-runner changes, some more work is …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issues related to Diskimage builder for bulding RHEL (python3-PyYAML
was missing) and Centos/Fedora (get-pip.py) + fbo change for Elasticsearch
reporter in Zuul has been merged o/&lt;/li&gt;
&lt;li&gt;We rebased the zuul-runner changes, some more work is needed on the CLI&lt;/li&gt;
&lt;li&gt;zuul-client 0.0.4 released&lt;/li&gt;
&lt;li&gt;we added the &amp;quot;create-auth-token&amp;quot; and &amp;quot;show running-jobs&amp;quot; subcommands to
zuul-client&lt;/li&gt;
&lt;li&gt;we fixed a bug where zuul doesn't handle autohold requests on gerrit patches
with number &amp;lt; 10 correctly &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/768229"&gt;https://review.opendev.org/c/zuul/zuul/+/768229&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;we added support for pyjwt 2.0 in zuul, after the major pyjwt release broke
zuul for Christmas &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/768312"&gt;https://review.opendev.org/c/zuul/zuul/+/768312&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We validated the Gerrit upgrade with production data for SF 3.6&lt;/li&gt;
&lt;li&gt;We reworked the sf-config patches to enable the Zuul Elastic reporter in SF
since it merged upstream&lt;/li&gt;
&lt;li&gt;We refactored sf-nodepool role to improve how logs files are served with httpd
when multiple launcher and builder.&lt;/li&gt;
&lt;li&gt;We released a new version of logreduce (0.6.0) featuring a functional
interface to enable various customizations.&lt;/li&gt;
&lt;li&gt;We added gate testing for zuul-images-jobs pipelines, used by the new
containers-update pipeline.&lt;/li&gt;
&lt;li&gt;We updated the Dhall packages and froze all the dependencies for zuul,
nodepool, openstacksdk, prometheus and ansible.&lt;/li&gt;
&lt;li&gt;We reworked the default zuul tenant configuration to be more ergonomic with
the bootstrap-your-zuul project:
&lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/bootstrap-your-zuul/tree/README.md"&gt;https://softwarefactory-project.io/cgit/software-factory/bootstrap-your-zuul/tree/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We work on packaging Zuul base on upstream code to remove including patches
into the spec files&lt;/li&gt;
&lt;li&gt;we fixed zuul's badges endpoint not working properly on SF zuul and on
fedora's rpm . &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/20718/"&gt;https://softwarefactory-project.io/r/#/c/20718/&lt;/a&gt;
&lt;a class="reference external" href="https://src.fedoraproject.org/rpms/zuul/pull-request/7"&gt;https://src.fedoraproject.org/rpms/zuul/pull-request/7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We Fixed Zuul + Gerrit + Postfix error messages when Zuul and Gerrit are
deployed on different nodes: &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/20518/"&gt;https://softwarefactory-project.io/r/#/c/20518/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2021 Jan 4 to Jan 13 summary</title><link href="https://www.softwarefactory-project.io/sprint-2021-jan-4-to-jan-13-summary.html" rel="alternate"></link><published>2021-01-13T10:00:00+00:00</published><updated>2021-01-13T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2021-01-13:/sprint-2021-jan-4-to-jan-13-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We help community to remove Fedora 31 nodeset&lt;/li&gt;
&lt;li&gt;We provided a docker-compose to simplify testing the zuul web ui authentication changes [Demo]&lt;/li&gt;
&lt;li&gt;we provided a fix in zuul for problems introduced by a breaking update of pyjwt introduced …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We help community to remove Fedora 31 nodeset&lt;/li&gt;
&lt;li&gt;We provided a docker-compose to simplify testing the zuul web ui authentication changes [Demo]&lt;/li&gt;
&lt;li&gt;we provided a fix in zuul for problems introduced by a breaking update of pyjwt introduced on christmas&lt;/li&gt;
&lt;li&gt;We worked on updating the zuul-runner change stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated k1s to support silent long running task&lt;/li&gt;
&lt;li&gt;We created a zuulfmt tool to prettify ansible and zuul yaml file&lt;/li&gt;
&lt;li&gt;We updated zuul-images-jobs for containers-update&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Introducing Functional Programming to Pythonistas</title><link href="https://www.softwarefactory-project.io/introducing-functional-programming-to-pythonistas.html" rel="alternate"></link><published>2020-12-31T00:00:00+00:00</published><updated>2020-12-31T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2020-12-31:/introducing-functional-programming-to-pythonistas.html</id><summary type="html">&lt;!-- # Introducing Functional Programming to Pythonistas --&gt;&lt;p&gt;This year, I continued my journey through computer science by learning
functional programming. I started using functional programming (FP)
through emacs lisp, then scheme with the SICP book, until I discovered
Haskell, which is arguably the best language to learn FP concepts. There
I discovered software designs that provide elegant …&lt;/p&gt;</summary><content type="html">&lt;!-- # Introducing Functional Programming to Pythonistas --&gt;&lt;p&gt;This year, I continued my journey through computer science by learning
functional programming. I started using functional programming (FP)
through emacs lisp, then scheme with the SICP book, until I discovered
Haskell, which is arguably the best language to learn FP concepts. There
I discovered software designs that provide elegant solutions to some of
the problems my team and I are facing.&lt;/p&gt;
&lt;p&gt;This post documents why I introduced FP to my team, and what strategies
I used. But first, let's define the FP paradigms.&lt;/p&gt;
&lt;div class="section" id="functional-programming-paradigms"&gt;
&lt;h2&gt;Functional programming paradigms&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;FP is a programming paradigm where programs are constructed by
applying and composing functions.&lt;/li&gt;
&lt;li&gt;FP is declarative programming. Instead of using statements to change
the program's state, FP expresses the logic of a computation without
describing its control flow.&lt;/li&gt;
&lt;li&gt;FP is built on proven general purpose theories such as lambda
calculus and abstract algebra.&lt;/li&gt;
&lt;li&gt;FP enables a strong type system. While some FP languages like LISP do
not feature such type systems, I am refering to FP languages using
&lt;tt class="docutils literal"&gt;System F&lt;/tt&gt; which enable a powerful and always correct types
inference.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To learn more about these paradigms, I recommend Richard Feldman's talk
&lt;a class="reference external" href="https://www.youtube.com/watch?v=6YbK8o9rZfI"&gt;The Next Paradigm Shift in Programming&lt;/a&gt; and Gabriel Gonzales's post
&lt;a class="reference external" href="http://www.haskellforall.com/2020/10/why-i-prefer-functional-programming.html"&gt;Why I prefer FP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With that definition out of the way, the next section explains the
advantages of FP paradigms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reasons-to-use-functional-programming"&gt;
&lt;h2&gt;Reasons to use functional programming&lt;/h2&gt;
&lt;p&gt;As Michael Snoyman explains in his &lt;a class="reference external" href="https://www.youtube.com/watch?v=n7QETok5hYI"&gt;Economic Argument for Functional
Programming&lt;/a&gt; talk, FP benefits include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reduce code review time.&lt;/li&gt;
&lt;li&gt;Consistent interface and reduced bug count by combining general
purpose concepts.&lt;/li&gt;
&lt;li&gt;Remove classes of bugs entirely, reducing testing burden, QA can
focus on higher impact bugs.&lt;/li&gt;
&lt;li&gt;Motivate development, leading to better staff retention and easier
recruiting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In particular there are three areas in which I am looking for solutions:&lt;/p&gt;
&lt;div class="section" id="development-cycle"&gt;
&lt;h3&gt;Development cycle&lt;/h3&gt;
&lt;p&gt;When we update our software we rely on extensive tests to check the
code. These tests may take hours to complete, resulting in a long
feedback loop. FP may provide a faster feedback loop to improve our
productivity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reusability"&gt;
&lt;h3&gt;Reusability&lt;/h3&gt;
&lt;p&gt;When we integrate software to build services, we are often dealing with
a complex stack of components that do not share or re-use common
computations. For example, we have many independent TLS setup
implementations. Such components rely on complex state management that
is difficult to compose. FP provides effective tools to define and
re-use the common computations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-operations"&gt;
&lt;h3&gt;System operations&lt;/h3&gt;
&lt;p&gt;When we operate software, we are often faced with runtime errors such as
AttributeError or ReferenceError. For example, when we restart our CI
scheduler, we may not be able to re-enqueue some changes when they are
in an undefined state. This kind of issue is nasty because:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The underlying bugs are hard to debug.&lt;/li&gt;
&lt;li&gt;Operating the software in production is stressful.&lt;/li&gt;
&lt;li&gt;Even though we spend a lot of time and energy to prevent those
issues, they can still occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FP may result in lower bug counts to increase reliability.&lt;/p&gt;
&lt;p&gt;However, learning FP has a significant cost of its own. The next section
describes the strategies I used to introduce FP.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-new-concepts"&gt;
&lt;h2&gt;Introducing new concepts&lt;/h2&gt;
&lt;p&gt;As my team works remotely, I proposed that we set a weekly online event
to spend some time together. Without a specific goal, I meant to create
a fun and relaxed space where we would collaborate outside of our day to
day activities. We used a shared remote desktop environment so that the
whole team would see and use the same tools.&lt;/p&gt;
&lt;p&gt;This event is not dedicated to FP and each members can propose a
subject. For example, we did a couple of sessions on using GraphQL. We
used two different setups for one to two hours long session:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Code kata where the presenter would perform a software development
exercise, explaining each concept along the way.&lt;/li&gt;
&lt;li&gt;Mob programming where the presenter would not drive the session.
Instead, each participant would discuss and tell the presenter what
to do.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Introducing new concepts is more difficult than I anticipated and I
could have spend more time learning pedagogical techniques. In
particular, there is a methodology where the presenter asks the
attendees to generate questions (&lt;a class="reference external" href="https://rightquestion.org/what-is-the-qft/"&gt;QFT&lt;/a&gt;) which seems very effective.
Finding the right question focus and raise interest takes a lot of time,
even for professional educators.&lt;/p&gt;
&lt;p&gt;The next sections describes each concept I introduced over the year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-function-composition"&gt;
&lt;h2&gt;Introducing function composition&lt;/h2&gt;
&lt;div class="section" id="why"&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;Function composition is a mechanism that combines two functions. It is
similar to object inheritance or object composition, but uses general
purpose primitives that can be applied to a large set of problems. In
particular, using function composition results in a more consistent
interface compared to stateful objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h3&gt;How&lt;/h3&gt;
&lt;p&gt;I shared Scott Wlaschin's talk &lt;a class="reference external" href="https://www.youtube.com/watch?v=WhEkBCWpDas"&gt;The Power of Composition&lt;/a&gt; and looked
for practical use-cases in our code base. For example, instead of
writing this computation:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;get_builds&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NODE_FAILURE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I would suggest using this function composition:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;completed_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NODE_FAILURE&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completed_build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_builds&lt;/span&gt;&lt;span class="p"&gt;())))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits"&gt;
&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Break a computation in smaller pieces.&lt;/li&gt;
&lt;li&gt;Re-use common functions like &lt;tt class="docutils literal"&gt;map&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;filter&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;More declarative.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;Thinking in terms of function composition requires a change in habit,
though I think this first concept is easy to introduce. A colleague even
started to use &lt;tt class="docutils literal"&gt;functools.reduce&lt;/tt&gt; when &lt;tt class="docutils literal"&gt;map&lt;/tt&gt; was not enough.&lt;/p&gt;
&lt;p&gt;I recommend Julien Danjou's post &lt;a class="reference external" href="https://julien.danjou.info/python-and-functional-programming/"&gt;An Introduction to Functional
Programming with Python&lt;/a&gt; as a follow-up.&lt;/p&gt;
&lt;p&gt;To build up on function composition, I then introduced pure functions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-pure-function"&gt;
&lt;h2&gt;Introducing pure function&lt;/h2&gt;
&lt;div class="section" id="why-2"&gt;
&lt;span id="why-1"&gt;&lt;/span&gt;&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;For a given input, a pure function always produces the same output.
Thus, it is possible to truly study and understand such functions
independently from others and they provide a solid building block for
complex computations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-2"&gt;
&lt;span id="how-1"&gt;&lt;/span&gt;&lt;h3&gt;How&lt;/h3&gt;
&lt;p&gt;I introduced Haskell for a small side project where we needed a new
service to forward statsd metrics from UDP packets to two backends:
telegraph and prometheus. We implemented the service in Python
(&lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/sf-infra/tree/roles/udp-multiplexer/files/udp-multiplexer.py?id=e3eea281571325f1ccb282391613f0035adc121c"&gt;source&lt;/a&gt;) and Haskell
(&lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/sf-infra/tree/roles/udp-multiplexer/files/udp-multiplexer.hs?id=e3eea281571325f1ccb282391613f0035adc121c"&gt;source&lt;/a&gt;)
in pair programming.&lt;/p&gt;
&lt;p&gt;Then I wrote a couple of blog posts about the language: &lt;a class="reference external" href="https://fedoramagazine.org/getting-started-with-haskell-on-fedora/"&gt;Getting Started
with Haskell on Fedora&lt;/a&gt; and &lt;a class="reference external" href="https://www.softwarefactory-project.io/haskell-for-python-developers.html"&gt;Haskell for python developpers&lt;/a&gt;. I also
demonstrated how we could use the language for other use-cases such as
documentation management and software factory packages update.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits-2"&gt;
&lt;span id="benefits-1"&gt;&lt;/span&gt;&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Haskell features state-of-the-art programming paradigms.&lt;/li&gt;
&lt;li&gt;Small footprint, the service has been running continuously without
any issues.&lt;/li&gt;
&lt;li&gt;More robust, the Haskell network library reports when UDP packets are
not being delivered, something we were not able to achieve with
Python.&lt;/li&gt;
&lt;li&gt;Short development cycle where most of the bugs are prevented by the
compiler.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results-2"&gt;
&lt;span id="results-1"&gt;&lt;/span&gt;&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;There is a lot going on in Haskell and there is a steep learning curve.
Learning Haskell is a significant investment and the project I used to
introduce the language was too small to allow for the team to gain
adequate experience using the language. Though new projects are a good
opportunity to explore new languages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-monadic-function"&gt;
&lt;h2&gt;Introducing monadic function&lt;/h2&gt;
&lt;div class="section" id="why-3"&gt;
&lt;span id="why-2-1"&gt;&lt;/span&gt;&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;As Graham Hutton states in the &lt;a class="reference external" href="https://www.youtube.com/watch?v=t1e8gqXLbsU"&gt;What is a Monad?&lt;/a&gt; computerphile video,
Monad is one of the most important developments in programming languages
in the last twenty-eight years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-3"&gt;
&lt;span id="how-2-1"&gt;&lt;/span&gt;&lt;h3&gt;How&lt;/h3&gt;
&lt;p&gt;I introduced the concept through a code kata using the &lt;a class="reference external" href="https://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf"&gt;Monadic Parser
Combinators&lt;/a&gt; paper to implement a RPM spec file parser. I went through
the paper by re-implementing each functions in pure Python. Then I
showed how the same concepts can be used for error handling and to
manage side effects.&lt;/p&gt;
&lt;p&gt;I also presented a couple of Python libraries such as &lt;tt class="docutils literal"&gt;toolz&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;effect&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits-3"&gt;
&lt;span id="benefits-2-1"&gt;&lt;/span&gt;&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;p&gt;Monad is a general purpose building block that can be applied for many,
if not all, computations. Combined with pure functions, monads enable a
clean composition for effectful computations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results-3"&gt;
&lt;span id="results-2-1"&gt;&lt;/span&gt;&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;Explaining this concept from the ground up is a difficult exercise and
using an existing combinator library might have been a better strategy.
Moreover, Python is not the most ergonomic language to write purely
functional style code, resulting in non idiomatic implementations.&lt;/p&gt;
&lt;p&gt;Even though pure monadic functions did not spark much joy for my team,
there is still a lot to learn from FP. Thus, I switched gears to the
more practical type system concept.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-type-system-and-immutability"&gt;
&lt;h2&gt;Introducing type system and immutability&lt;/h2&gt;
&lt;div class="section" id="why-4"&gt;
&lt;span id="why-3-1"&gt;&lt;/span&gt;&lt;h3&gt;Why&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The fundamental purpose of a type system is to prevent the occurrence
of execution errors during the running of a program.&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Luca Cardelli&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="how-4"&gt;
&lt;span id="how-3-1"&gt;&lt;/span&gt;&lt;h3&gt;How&lt;/h3&gt;
&lt;p&gt;Since python version 3.6, we can add type annotations and use the
&lt;tt class="docutils literal"&gt;mypy&lt;/tt&gt; type checker. So instead of using such object:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_build&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SUCCESS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://example&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I would suggest to use a &lt;tt class="docutils literal"&gt;dataclass&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="nd"&gt;&amp;#64;dataclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;log_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SUCCESS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I performed a code kata on dataclass and wrote a &lt;a class="reference external" href="https://www.softwarefactory-project.io/python-dataclasses.html"&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits-4"&gt;
&lt;span id="benefits-3-1"&gt;&lt;/span&gt;&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Type checker may prevent runtime errors.&lt;/li&gt;
&lt;li&gt;Re-usable, a library providing dataclass is safer to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results-4"&gt;
&lt;span id="results-3-1"&gt;&lt;/span&gt;&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;This was well received and the benefit of &lt;tt class="docutils literal"&gt;mypy&lt;/tt&gt; is quite practical,
but dataclasses are difficult to introduce in an existing code base.
Thus, we were not able to benefit much from it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-strong-type-system"&gt;
&lt;h2&gt;Introducing strong type system&lt;/h2&gt;
&lt;div class="section" id="why-5"&gt;
&lt;span id="why-4-1"&gt;&lt;/span&gt;&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;A strong type system provides stronger safety and definitely excludes
certain classes of programming errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-5"&gt;
&lt;span id="how-4-1"&gt;&lt;/span&gt;&lt;h3&gt;How&lt;/h3&gt;
&lt;p&gt;I presented algebraic data type to enable type composition in the form
of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sum (union)&lt;/li&gt;
&lt;li&gt;Product (record)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the previous build type can also be defined as&lt;/p&gt;
&lt;pre class="literal-block"&gt;
data build = Error | Success(log_url)
&lt;/pre&gt;
&lt;p&gt;For another side project, I presented different languages featuring a
strong type system: PureScript, ELM and ReasonML. We picked ReasonML as
the team was already familiar with React, and I wrote a blog post about
this choice: &lt;a class="reference external" href="https://www.softwarefactory-project.io/software-factory-resources-in-reason.html"&gt;Software Factory Resources in Reason&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits-5"&gt;
&lt;span id="benefits-4-1"&gt;&lt;/span&gt;&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Easier to review and maintain.&lt;/li&gt;
&lt;li&gt;Safer dependencies updates, most breaking changes are prevented by
the compiler.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results-5"&gt;
&lt;span id="results-4-1"&gt;&lt;/span&gt;&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;Even though we applied this concept to a web application, using a strong
type system was a very valuable experience. We could have used Python
with some tricks, for example, by enabling the &lt;tt class="docutils literal"&gt;strict&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;disallow-any-expr&lt;/span&gt;&lt;/tt&gt; options. This is impractical because Python is
dearly missing support for tagged union and pattern matching.&lt;/p&gt;
&lt;p&gt;To learn more about strong type systems, I recommend watching this talk
by Jane Street: &lt;a class="reference external" href="https://www.youtube.com/watch?v=kZ1P8cHN3pY"&gt;Why Functional Programming Doesn't Matter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-programmable-configuration"&gt;
&lt;h2&gt;Introducing programmable configuration&lt;/h2&gt;
&lt;div class="section" id="why-6"&gt;
&lt;span id="why-5-1"&gt;&lt;/span&gt;&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;Using a general purpose configuration DSL such as Dhall enables a
functional approach to configuration management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-6"&gt;
&lt;span id="how-5-1"&gt;&lt;/span&gt;&lt;h3&gt;How&lt;/h3&gt;
&lt;p&gt;Instead of using a data serialization language like JSON or YAML, I
introduced the Dhall language to define our configurations.&lt;/p&gt;
&lt;p&gt;In the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sf-infra&lt;/span&gt;&lt;/tt&gt; project, where we define our infrastructure, I
showed how by using Dhall records we could define resources such as
servers, volumes, and networks. Then I showed how we could use functions
to transform those records into configurations such as the inventory or
the monitoring, and how we can re-use those resources in other projects.&lt;/p&gt;
&lt;p&gt;For the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;zuul-operator&lt;/span&gt;&lt;/tt&gt; I wrote a Dhall function to convert the high
level definition of a Zuul service into a collection of Kubernetes
resources and ConfigMap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits-6"&gt;
&lt;span id="benefits-5-1"&gt;&lt;/span&gt;&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Prevents runtime error, configuration is tested and valid by
construction.&lt;/li&gt;
&lt;li&gt;Enables configuration refactoring.&lt;/li&gt;
&lt;li&gt;Fosters re-use through a powerful dependency and import system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results-6"&gt;
&lt;span id="results-5-1"&gt;&lt;/span&gt;&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;Adopting a new syntax for configuration is a major difficulty. Though I
showed how this functional language can be used for all our
configuration needs, such as Kubernetes resources, container
definitions, CI pipelines and Ansible playbooks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-knowledge-as-code"&gt;
&lt;h2&gt;Introducing knowledge as code&lt;/h2&gt;
&lt;p&gt;As presented by Mikael Tönnberg in his &lt;a class="reference external" href="https://carboncloud.com/2020/12/07/tech-knowledge-as-code/"&gt;Tech Knowledge-as-Code&lt;/a&gt;
article, I re-introduced type systems as a mean to manage software
knowledge.&lt;/p&gt;
&lt;div class="section" id="why-7"&gt;
&lt;span id="why-6-1"&gt;&lt;/span&gt;&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;To capture knowledge in a way that is understandable for both the
computer and humans, now and in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-7"&gt;
&lt;span id="how-6-1"&gt;&lt;/span&gt;&lt;h3&gt;How&lt;/h3&gt;
&lt;p&gt;Comparing with object's names, documentations and tests, I showed how
type annotation could capture the knowledge more effectively.&lt;/p&gt;
&lt;p&gt;In the context of a couple of mob programming sessions, we added types
to undocumented code, resulting in an insightful documentation. Then by
increasing the type coverage, we were able to refine the initial
knowledge of the code.&lt;/p&gt;
&lt;p&gt;We used the &lt;tt class="docutils literal"&gt;TypedDict&lt;/tt&gt; annotation to incrementally document the
&lt;tt class="docutils literal"&gt;distroinfo&lt;/tt&gt; library output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits-7"&gt;
&lt;span id="benefits-6-1"&gt;&lt;/span&gt;&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Incremental, each modification adds knowledge.&lt;/li&gt;
&lt;li&gt;Mypy verifies the knowledge is correct.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results-7"&gt;
&lt;span id="results-6-1"&gt;&lt;/span&gt;&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;This concept is relatively easy to demonstrate and it yielded the most
engagement from my team.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Introducing new concepts can be an exhausting process. Most pragmatic
engineers are likely to push back against new ideas, particularly when
they induce friction. As an example, even early languages like Fortran
were frowned upon by traditional binary bytecodes authors. Von Neuman
himself was apparently getting &lt;a class="reference external" href="http://www.columbia.edu/cu/computinghistory/index.html"&gt;angry&lt;/a&gt; when his students used such
language instead of writing the bytecode by hand.&lt;/p&gt;
&lt;p&gt;FP vocabulary includes many unfamiliar words like curry, functor or
cons. These words refer to the underlying concept and I think this is
great to properly acknowledge what those things are. However, this
causes additional friction and using more familiar words would have been
a better choice to begin with.&lt;/p&gt;
&lt;p&gt;Object oriented programming is still one of the most widely used
paradigm, and even though it is fairly &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Object-oriented_programming#Criticism"&gt;criticized&lt;/a&gt;, it is the
preferred paradigms in Python. Thus, embracing FP in Python may not be
the best strategy and using a more appropriate language like OCaml or
Haskell would be ideal.&lt;/p&gt;
&lt;p&gt;At the end of the day, even if FP concepts are not applied directly,
they can significantly improve non-FP development.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Dec 4 to Dec 22 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-dec-4-to-dec-22-summary.html" rel="alternate"></link><published>2020-12-22T10:00:00+00:00</published><updated>2020-12-22T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-12-22:/sprint-2020-dec-4-to-dec-22-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added Fedora 33 as a new repository for afs mirror and help community to replace Fedora 31 nodeset with Fedora 32/33&lt;/li&gt;
&lt;li&gt;We've refreshed our OpenID-related changes on zuul web UI with a patternfly 4 twist&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added Fedora 33 as a new repository for afs mirror and help community to replace Fedora 31 nodeset with Fedora 32/33&lt;/li&gt;
&lt;li&gt;We've refreshed our OpenID-related changes on zuul web UI with a patternfly 4 twist&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created zuul-registry package and zuul-registry container image. It will be helpful for next step of Zuul Images Jobs&lt;/li&gt;
&lt;li&gt;We added support for static_config for nodepool on the config repo, it allows to have a specific configuration for a dedicated nodepool service.&lt;/li&gt;
&lt;li&gt;We added a footer to sf-ui - this is going to be the place to defined site specific links&lt;/li&gt;
&lt;li&gt;We added a koji publish job for sf-ui&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Nov 13 to Dec 2 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-nov-13-to-dec-2-summary.html" rel="alternate"></link><published>2020-12-02T10:00:00+00:00</published><updated>2020-12-02T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-12-02:/sprint-2020-nov-13-to-dec-2-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed to replace react-ansi with a new implementation named re-ansi: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/762759"&gt;https://review.opendev.org/c/zuul/zuul/+/762759&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We ported the original zuul results table to a proper gerrit plugins: &lt;a class="reference external" href="https://review.opendev.org/c/opendev/system-config/+/763891"&gt;https://review.opendev.org/c/opendev/system-config …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed to replace react-ansi with a new implementation named re-ansi: &lt;a class="reference external" href="https://review.opendev.org/c/zuul/zuul/+/762759"&gt;https://review.opendev.org/c/zuul/zuul/+/762759&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We ported the original zuul results table to a proper gerrit plugins: &lt;a class="reference external" href="https://review.opendev.org/c/opendev/system-config/+/763891"&gt;https://review.opendev.org/c/opendev/system-config/+/763891&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed a bug in zuul-client encrypt subcommand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We completed the new sf-ui using react-patternfly [DEMO]&lt;/li&gt;
&lt;li&gt;We investigated using systemd-nspawn to deploy Software Factory on fedora&lt;/li&gt;
&lt;li&gt;We make better zuul images jobs project by  improve playbooks/roles and adding zuul registry role  (it will be an intermediate registry before push to final registry)&lt;/li&gt;
&lt;li&gt;We improve setup ssl role to support nginx and switch nginx http backend to apache2&lt;/li&gt;
&lt;li&gt;We added Opendistro blogpost and documentation&lt;/li&gt;
&lt;li&gt;Good progress on the cauth -&amp;gt; keycloak migration: We updated keycloak to 11.0 and we can now migrate users in gerrit thanks to pynotedb, local users db in progress&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Update for Gerrit 3.x</title><link href="https://www.softwarefactory-project.io/zuul-update-for-gerrit-3x.html" rel="alternate"></link><published>2020-12-01T00:00:00+00:00</published><updated>2020-12-01T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2020-12-01:/zuul-update-for-gerrit-3x.html</id><summary type="html">&lt;p&gt;A Zuul fix has been added to the version 3.5 of SF to address a performance issue
when using Gerrit version 3.x has reported by the opendev infrastructure team.
To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the install-server.
Alternatively, to avoid going through CentOS 7.9 packages …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A Zuul fix has been added to the version 3.5 of SF to address a performance issue
when using Gerrit version 3.x has reported by the opendev infrastructure team.
To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the install-server.
Alternatively, to avoid going through CentOS 7.9 packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y zuul*&amp;quot;&lt;/span&gt; install-server:zuul-scheduler:zuul-merger:zuul-executor
ansible-playbook /var/lib/software-factory/ansible/zuul_restart.yml
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Oct 23 to Nov 10 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-oct-23-to-nov-10-summary.html" rel="alternate"></link><published>2020-11-10T10:00:00+00:00</published><updated>2020-11-10T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-11-10:/sprint-2020-oct-23-to-nov-10-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed to the Opendev community changes about zuul reporter for Elasticsearch, increase metrics in nodepool (long deleting, long building).&lt;/li&gt;
&lt;li&gt;We got a few features merged for zuul-client: the encrypt subcommand, and docker image generation.&lt;/li&gt;
&lt;li&gt;We worked on …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed to the Opendev community changes about zuul reporter for Elasticsearch, increase metrics in nodepool (long deleting, long building).&lt;/li&gt;
&lt;li&gt;We got a few features merged for zuul-client: the encrypt subcommand, and docker image generation.&lt;/li&gt;
&lt;li&gt;We worked on upcoming zuul release featuring highly available scheduler.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated logreduce internal API using functional parameter to simplify customization for non-zuul based usage.&lt;/li&gt;
&lt;li&gt;We continued working on udpating the sf-ui using Reason and wrote a blog-post about it: &lt;a class="reference external" href="https://www.softwarefactory-project.io/software-factory-resources-in-reason.html"&gt;https://www.softwarefactory-project.io/software-factory-resources-in-reason.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added Opendistro in Software Factory.&lt;/li&gt;
&lt;li&gt;We are working on fixing keycloak integration with gerrit 3 - the notedb backend makes it difficult to provision an admin authenticated with an external auth.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Moving to Opendistro for Elasticsearch</title><link href="https://www.softwarefactory-project.io/moving-to-opendistro-for-elasticsearch.html" rel="alternate"></link><published>2020-11-09T10:00:00+00:00</published><updated>2020-11-09T10:00:00+00:00</updated><author><name>Daniel Pawlik</name></author><id>tag:www.softwarefactory-project.io,2020-11-09:/moving-to-opendistro-for-elasticsearch.html</id><summary type="html">&lt;p&gt;This article explains why we choose Opendistro and what we have done
to integrate it in Software Factory.&lt;/p&gt;
&lt;div class="section" id="why-opendistro"&gt;
&lt;h2&gt;Why Opendistro?&lt;/h2&gt;
&lt;p&gt;The Opendistro ELK stack is a  &amp;quot;community-driven 100% open source distribution
of Elasticsearch with advanced  security, alerting, SQL support,
automated index management, deep performance analysis, and more.&amp;quot;&lt;/p&gt;
&lt;p&gt;The main reason …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This article explains why we choose Opendistro and what we have done
to integrate it in Software Factory.&lt;/p&gt;
&lt;div class="section" id="why-opendistro"&gt;
&lt;h2&gt;Why Opendistro?&lt;/h2&gt;
&lt;p&gt;The Opendistro ELK stack is a  &amp;quot;community-driven 100% open source distribution
of Elasticsearch with advanced  security, alerting, SQL support,
automated index management, deep performance analysis, and more.&amp;quot;&lt;/p&gt;
&lt;p&gt;The main reason behind the switch to Opendistro is that
we would like to have a Role Base Access Control (RBAC) which is
provided in Opendistro. With that, we are able to give read-only access to
non-privileged users, so our visualizations, indexes, index patterns and other
components in Elasticsearch and Kibana are pretected.
by third parties.&lt;/p&gt;
&lt;p&gt;Before choosing Opendistro, we evaluated the following alternatives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Opensource version of Elasticsearch with X-Pack Community Edition&lt;/li&gt;
&lt;li&gt;Secure-Guard&lt;/li&gt;
&lt;li&gt;Readonlyrest&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of them were not providing enough features, some others had licenses that
are inconvenient for our project. Thats why we chose Opendistro, which comes under
Apache2 license, has a large community for support, and provides multiple features
that we would like to include in the future releases of Software Factory.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://opendistro.github.io/"&gt;official documentation for Opendistro for Elasticsearch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-authentication"&gt;
&lt;h2&gt;Basic authentication&lt;/h2&gt;
&lt;p&gt;There is multiple authentication solutions available in Opendistro.
With Software Factory 3.6 only &amp;quot;basic internal&amp;quot; authentication is enabled.&lt;/p&gt;
&lt;p&gt;The authentication configuration can be found in the following directory on your
deployment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in &lt;cite&gt;config.yml&lt;/cite&gt; file. Configuration example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# config.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;_meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;config_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;kibana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;multitenancy_enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;anonymous_auth_enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;xff&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;authc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;basic_internal_auth_domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;authentication_backend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;intern&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Authenticate via HTTP Basic against internal users database&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;http_authenticator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;challenge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;basic&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;http_enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;transport_enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other available authentication systems are available &lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/security/configuration/configuration/"&gt;here&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-manage-users-in-basic-authentication"&gt;
&lt;h2&gt;How to manage users in basic authentication?&lt;/h2&gt;
&lt;p&gt;By using 'basic authentication', all users are defined in the dedicated file
&lt;cite&gt;internal_users.yml&lt;/cite&gt; located in &lt;cite&gt;opendistro_security config directory&lt;/cite&gt;.
&lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/security/configuration/yaml/#internal_usersyml"&gt;More information about the file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-a-new-user-to-internal-database"&gt;
&lt;h2&gt;Adding a new user to internal database&lt;/h2&gt;
&lt;p&gt;In that section, we will add a new user: &lt;cite&gt;kibana&lt;/cite&gt; to the internal
database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# internal_users.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# (...)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;kibana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;lt;PASSWORD HASH&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;reserved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;backend_roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kibana_viewer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Kibana viewer user&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="generating-password-to-new-user"&gt;
&lt;h2&gt;Generating password to new user&lt;/h2&gt;
&lt;p&gt;Opendistro comes with a CLI utility to generate password hashes for users.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/share/elasticsearch/plugins/opendistro_security/tools/hash.sh -p &amp;lt;MY PASSWORD&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generated hash should be added into the &lt;cite&gt;internal_users.yml&lt;/cite&gt; file as the &amp;quot;hash&amp;quot; property
for the user.&lt;/p&gt;
&lt;p&gt;To apply that change, you need to run &lt;cite&gt;securityadmin.sh&lt;/cite&gt; script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="roles"&gt;
&lt;h2&gt;Roles&lt;/h2&gt;
&lt;p&gt;The roles are described in &lt;cite&gt;roles.yml&lt;/cite&gt; file located in &lt;cite&gt;opendistro_security
config directory&lt;/cite&gt;.
In this file, you are able to create your own roles, with defined rules.
For example, it will be good set &lt;cite&gt;kibana&lt;/cite&gt; read only user permission limitation
to read-only access.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# roles.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# (...)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;kibana_viewer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;reserved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;cluster_permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cluster_composite_ops_ro&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;index_permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;index_patterns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?kibana*&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?kibana&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logstash-*&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;allowed_actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;read&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;indices:data/write/update&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;indices:data/write/index&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;indices:data/write/bulk*&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tenant_permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;cite&gt;kibana_viewer&lt;/cite&gt; user has &lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/security/access-control/permissions/#indices"&gt;limited access&lt;/a&gt; to run &lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/security/access-control/default-action-groups/#index-level"&gt;allowed_actions&lt;/a&gt;
on current set &lt;cite&gt;index_patterns&lt;/cite&gt;. The &lt;cite&gt;tenant_permissions&lt;/cite&gt; are in that example
set to the empty list, so it will be applied on all available tenants.
The &lt;cite&gt;cluster_permissions&lt;/cite&gt; is a Opendistro cluster-level &lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/security/access-control/default-action-groups/#cluster-level"&gt;dedicated roles&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;In Software Factory 3.6, the &lt;cite&gt;kibana&lt;/cite&gt; user has the &lt;cite&gt;kibana_viewer&lt;/cite&gt; role, which
is the same as in this example. It is because multiple automation is raising
problems in access to the &lt;cite&gt;.kibana&lt;/cite&gt; index in Elasticsearch.
The &lt;cite&gt;kibana_read_only&lt;/cite&gt; role (which you can find in the &lt;cite&gt;predefined roles&lt;/cite&gt; section)
is only allowed to see dashboards and visualization and it does not have
access to searches in the Elasticsearch, that's why we are not using the
predefined role in SF 3.6.
If the above &lt;cite&gt;kibana_viewer&lt;/cite&gt; role gives too many permissions to the
user, you can always check sample &lt;cite&gt;read-only&lt;/cite&gt; roles with bulk access
that are described in &lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/security/access-control/users-roles/#sample-roles"&gt;this document&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="predefined-roles"&gt;
&lt;h2&gt;Predefined roles&lt;/h2&gt;
&lt;p&gt;In Opendistro, there are multiple roles defined with &lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/security/access-control/users-roles/#predefined-roles"&gt;dedicated usage&lt;/a&gt;.
For example &lt;cite&gt;kibana_read_only&lt;/cite&gt; role (that should be used also with &lt;cite&gt;kibana_user&lt;/cite&gt;
role) gives user only access to the dashboards and visualization. The user
is not able to search or make some API queries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="role-mappings"&gt;
&lt;h2&gt;Role mappings&lt;/h2&gt;
&lt;p&gt;After creating roles, user can be associated using role mapping,
for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# role_mappings.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# (...)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;kibana_viewer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;reserved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;backend_roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kibana_viewer&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Maps&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;kibana&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;viewer&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;role&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In that example, the &lt;cite&gt;kibana_viewer&lt;/cite&gt; role mapping is using &lt;cite&gt;kibana_viewer&lt;/cite&gt;
role that was described in &lt;cite&gt;roles.yml&lt;/cite&gt; file. For more information, check the
&lt;cite&gt;Roles&lt;/cite&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-i-have-many-projects"&gt;
&lt;h2&gt;What if I have many projects?&lt;/h2&gt;
&lt;p&gt;Software Factory 3.6 only configures one tenant: &lt;cite&gt;global&lt;/cite&gt; and
it also disables multi-tenancy (check Kibana configuration file).
This &lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/security/access-control/multi-tenancy/#add-tenants"&gt;document&lt;/a&gt; explains how to configure multi-tenancy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-made-a-change-but-they-are-not-applied-securityadmin-sh-script"&gt;
&lt;h2&gt;I made a change, but they are not applied - securityadmin.sh script&lt;/h2&gt;
&lt;p&gt;To apply created changes, you need to execute the &lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/security/configuration/generate-certificates/#run-securityadminsh"&gt;dedicated script&lt;/a&gt; script.
It is the most important step that you should not forget after doing some
changes.&lt;/p&gt;
&lt;p&gt;In the Software Factory 3.6, the command below will setup the &lt;cite&gt;securityadmin.sh&lt;/cite&gt;
script. What you need to do is to execute it on the Elasticsearch host.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/share/elasticsearch/plugins/opendistro_security/tools/securityadmin.sh   &lt;span class="se"&gt;\&lt;/span&gt;
  -cd /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/  &lt;span class="se"&gt;\&lt;/span&gt;
  -icl -nhnv -cacert /etc/elasticsearch/certs/localCA.pem  &lt;span class="se"&gt;\&lt;/span&gt;
  -cert /etc/elasticsearch/certs/elasticsearch-admin.crt  &lt;span class="se"&gt;\&lt;/span&gt;
  -key /etc/elasticsearch/certs/elasticsearch-admin.key    &lt;span class="se"&gt;\&lt;/span&gt;
  -h &lt;span class="k"&gt;$(&lt;/span&gt;hostname&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="elasticsearch-user-password-in-software-factory"&gt;
&lt;h2&gt;Elasticsearch user password in Software Factory&lt;/h2&gt;
&lt;p&gt;Sfconfig automatically generate users for each service that
is using Elasticsearch. The passwords are saved in Software Factory
the bootstrap-data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/var/lib/software-factory/bootstrap-data/secrets.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;All entries that are beginning with &lt;cite&gt;elasticsearch_&lt;/cite&gt; preffix and ending with
&lt;cite&gt;password&lt;/cite&gt; are able to change. If you change some passwords there, you need
to run sfconfig tool to apply the changes or read section
&lt;cite&gt;Generating password to new user&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="does-opendistro-affect-other-services"&gt;
&lt;h2&gt;Does Opendistro affect other services?&lt;/h2&gt;
&lt;p&gt;By changing the ELK stack to the Opendistro, some services require to
change the configuration:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;logstash - the service requires to add &lt;cite&gt;ilm_enabled&lt;/cite&gt; &lt;a class="reference external" href="https://opendistro.github.io/for-elasticsearch-docs/docs/troubleshoot/#logstash"&gt;option set&lt;/a&gt; to False.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;output {
  elasticsearch {
    hosts =&amp;gt; [&amp;#39;localhost:9200&amp;#39;]
    index =&amp;gt; &amp;quot;logstash-%{+YYYY.MM.dd}&amp;quot;
    user =&amp;gt; &amp;#39;logstash&amp;#39;
    password =&amp;gt; &amp;#39;password&amp;#39;
    ssl =&amp;gt; true
    ssl_certificate_verification =&amp;gt; true
    ilm_enabled =&amp;gt; false
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;curator - the curator tool requires to provide authentication credentials.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost:9200&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;use_ssl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ssl_no_validate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;False&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;certificate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/elasticsearch/certs/localCA.pem&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;http_auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;curator:password&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RepoXplorer- same as &lt;cite&gt;curator&lt;/cite&gt; tool, it requires to set proper credentials.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;elasticsearch_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;repoxplorer&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;elasticsearch_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="default-opendistro-settings"&gt;
&lt;h2&gt;Default Opendistro settings&lt;/h2&gt;
&lt;p&gt;By default Opendistro is running the &lt;cite&gt;install_demo_configuration.sh&lt;/cite&gt; script
on installing the package. The script is creating default environment,
configuration for Kibana and Elasticsearch service (also generating the
self-signed certificates).
It is recommended to disable the demo configuration on production
environment (like we do in Software Factory).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The Opendistro for Elasticsearch is a good solution to enable RBAC control.
We successfully integrated it in Software Factory 3.6 to protect the user
index, and we were able to implement a transparent upgrade path.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="opendistro elasticsearch"></category></entry><entry><title>Software Factory Resources in Reason</title><link href="https://www.softwarefactory-project.io/software-factory-resources-in-reason.html" rel="alternate"></link><published>2020-11-09T00:00:00+00:00</published><updated>2020-11-09T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2020-11-09:/software-factory-resources-in-reason.html</id><summary type="html">&lt;!-- # Software Factory Resources in Reason --&gt;&lt;p&gt;The migration to Gerrit 3.x broke Software Factory's user interface.
This led us to rewrite it from first principles. We decided to replace
the existing jinja/html/css stack with &lt;a class="reference external" href="https://github.com/patternfly/patternfly-react"&gt;patternfly-react&lt;/a&gt;. After
watching the &lt;a class="reference external" href="https://www.youtube.com/watch?v=5fG_lyNuEAw"&gt;React to the Future&lt;/a&gt; talk from the original author of
React, we decided to try …&lt;/p&gt;</summary><content type="html">&lt;!-- # Software Factory Resources in Reason --&gt;&lt;p&gt;The migration to Gerrit 3.x broke Software Factory's user interface.
This led us to rewrite it from first principles. We decided to replace
the existing jinja/html/css stack with &lt;a class="reference external" href="https://github.com/patternfly/patternfly-react"&gt;patternfly-react&lt;/a&gt;. After
watching the &lt;a class="reference external" href="https://www.youtube.com/watch?v=5fG_lyNuEAw"&gt;React to the Future&lt;/a&gt; talk from the original author of
React, we decided to try &lt;a class="reference external" href="https://reasonml.github.io/"&gt;ReasonML&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article presents the results of that story's last two sprints.&lt;/p&gt;
&lt;div class="section" id="why-reason"&gt;
&lt;h2&gt;Why Reason?&lt;/h2&gt;
&lt;p&gt;Choosing Reason might sound a bit hipster, however, it is effective for
the following reasons:&lt;/p&gt;
&lt;p&gt;It builds on the javascript runtime, which is arguably the most popular
environment. Thus, the code we wrote can run on almost any computer such
as mobile devices or node servers.&lt;/p&gt;
&lt;p&gt;It features a powerful type inference system that can eliminate most
runtime errors. In other words, an entire class of bugs are fixed from
the ground up.&lt;/p&gt;
&lt;p&gt;It is an opportunity to learn functional programing paradigms which are
known to be very effective at managing complexcity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-reason"&gt;
&lt;h2&gt;What is Reason?&lt;/h2&gt;
&lt;p&gt;Reason is an OCaml syntax that is similar to JSX.&lt;/p&gt;
&lt;p&gt;It compiles to javascript using the &lt;a class="reference external" href="https://rescript-lang.org"&gt;ReScript&lt;/a&gt; compiler.&lt;/p&gt;
&lt;p&gt;It builds on years of research and engineering on meta languages (ML)
and Reason benefits from the always correct Hindley–Milner type system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="show-me-the-code"&gt;
&lt;h2&gt;Show me the code!&lt;/h2&gt;
&lt;p&gt;In this section, we review how we use Reason to manage the Software
Factory resources. This is a data model that defines projects,
repositories, and groups used by the Software Factory's services.&lt;/p&gt;
&lt;div class="section" id="using-bs-json-and-reason-react"&gt;
&lt;h3&gt;Using bs-json and reason-react&lt;/h3&gt;
&lt;p&gt;The first step was to create data types to define the resources of
Software Factory.&lt;/p&gt;
&lt;p&gt;For example, we defined a Tenant as:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tenant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;default_connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And using the &lt;a class="reference external" href="https://github.com/glennsl/bs-json#readme"&gt;bs-json&lt;/a&gt; library we wrote a function to parse its JSON
representation:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;default_connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default-connection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We also wrote interfaces to use the patternfly's components with
reason-react:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#64;&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#64;&lt;/span&gt;&lt;span class="nx"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#64;patternfly/react-core&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;external&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;=?&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Card&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The binding defines the property types and prevents runtime error when
building the web UI.&lt;/p&gt;
&lt;p&gt;Here is how we wrote a TenantCard component:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
module TenantCard = {
  [&amp;#64;react.component]
  let make = (~tenant: SF.tenant) =&amp;gt;
    &amp;lt;Card key={tenant.name}&amp;gt;
      &amp;lt;CardTitle&amp;gt;
        &amp;lt;span&amp;gt; {tenant.name |&amp;gt; React.string} &amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt; {&amp;quot; - &amp;quot; |&amp;gt; React.string} &amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;
          {Option.getWithDefault(
             tenant.description,
             &amp;quot;The &amp;quot; ++ tenant.name ++ &amp;quot; tenant&amp;quot;,
           )
           |&amp;gt; React.string}
        &amp;lt;/span&amp;gt;
      &amp;lt;/CardTitle&amp;gt;
    &amp;lt;/Card&amp;gt;
}
&lt;/pre&gt;
&lt;p&gt;The model helped us be explicit with edge cases, for example, to show a
tenant description, we had to take into account that the description may
be missing.&lt;/p&gt;
&lt;img alt="The new welcome page" src="./images/reason-patternfly-ui.png" /&gt;
&lt;p&gt;This was promising, however the first implementation revealed issues
with the resources model. It was initially designed as a flat structure
where tenants, projects and repositories could be defined side by side.
Here is an example project configuration:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;RPMS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;tenant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;local&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;RPMS Packages&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;source-repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;rpms/libuv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;zuul/include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p-Indicator"&gt;[]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Tenants and connections can be defined in an adjacent file:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;tenants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;local&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;local&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tenant.&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://softwarefactory-project.io/manage&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;default-connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;gerrit&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;gerrit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;base-url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://softwarefactory-project.io/r&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;gerrit&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Thus, to display the url of the &lt;tt class="docutils literal"&gt;rpms/libuv&lt;/tt&gt; repository of the
&lt;tt class="docutils literal"&gt;RPMS&lt;/tt&gt; project, multiple lookups need to be performed:&lt;/p&gt;
&lt;img alt="The legacy resources model" src="./images/reason-model-legacy.png" /&gt;
&lt;p&gt;This is rather complex for our user, and in the following sprint, we
designed better data types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="refactoring"&gt;
&lt;h3&gt;Refactoring&lt;/h3&gt;
&lt;p&gt;We decided to re-arrange the data types to avoid impossible states such
as respository with no connections:&lt;/p&gt;
&lt;img alt="The improved model" src="./images/reason-model-new.png" /&gt;
&lt;p&gt;We used the &lt;a class="reference external" href="https://github.com/reasonml-labs/decco#readme"&gt;decco&lt;/a&gt; library to automatically generate JSON encoder and
decoder:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#64;&lt;/span&gt;&lt;span class="nx"&gt;decco&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Gerrit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Pagure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SourceRepository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#64;&lt;/span&gt;&lt;span class="nx"&gt;decco&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#64;&lt;/span&gt;&lt;span class="nx"&gt;decco&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#64;&lt;/span&gt;&lt;span class="nx"&gt;decco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;source-repositories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;source_repositories&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SourceRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tenant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#64;&lt;/span&gt;&lt;span class="nx"&gt;decco&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then we wrote a conversion function to process the legacy model into the
new representation. For example, the connection information is now
resolved once with this function:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getConnection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tenant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nx"&gt;SFV1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SourceRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getWithDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getWithDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nx"&gt;tenant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;default_connection&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This was great because the new model doesn't require complicated lookup.
For example, here is how the user interface was improved:
&lt;a class="reference external" href="https://softwarefactory-project.io/r/20002"&gt;https://softwarefactory-project.io/r/20002&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to the typesystem, this major refactor went smoothly and we
didn't have a single runtime error.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;We created three new projects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/re-sf/tree/README.md"&gt;re-sf&lt;/a&gt; for the data types and generic utility functions.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/re-patternfly/tree/README.md"&gt;re-patternfly&lt;/a&gt; for the patternfly binding.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/sf-ui/tree/README.md"&gt;sf-ui&lt;/a&gt; for the new user interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="cons"&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;p&gt;The IDE tooling could use more polish, for example the &lt;a class="reference external" href="https://microsoft.github.io/language-server-protocol"&gt;LSP&lt;/a&gt; server
needs to be restarted at some point to pick up new changes.&lt;/p&gt;
&lt;p&gt;The ecosystem is relatively young and the new syntax/brand named
&lt;a class="reference external" href="https://rescript-lang.org"&gt;ReScript&lt;/a&gt; is confusing.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/reasonml-labs/decco#readme"&gt;decco&lt;/a&gt; library is implemented using &lt;a class="reference external" href="https://tarides.com/blog/2019-05-09-an-introduction-to-ocaml-ppx-ecosystem#what-is-a-ppx"&gt;PPX&lt;/a&gt; which can yield obscure
errors.&lt;/p&gt;
&lt;p&gt;Getting used to the type checker and IDE takes time.&lt;/p&gt;
&lt;p&gt;Functional programing is very different from imperative-style
programming and there is a lot to learn.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pros"&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://rescript-lang.org"&gt;ReScript&lt;/a&gt; compiler is extremely fast, and it can build a complete
project in a few milliseconds.&lt;/p&gt;
&lt;p&gt;Functional libraries are simple to use because the type definition
documents most of the required information. This is an improvement over
object oriented interface where how to use a foreign code base may not
be obvious.&lt;/p&gt;
&lt;p&gt;Refactoring and modifying the source code is safe because the type
checker acts as an incredibly useful assistant. Afterall, source code is
often modified, so any help is more than welcome.&lt;/p&gt;
&lt;p&gt;Overall, the functional paradigm features &amp;quot;timeless&amp;quot; primitives that
seems more portable than object oriented ones. The implementation we
wrote is not specific to Reason and it may be re-written in any
functional language. See this &lt;a class="reference external" href="http://www.haskellforall.com/2020/10/why-i-prefer-functional-programming.html"&gt;blog post&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If the Software Factory community is comfortable with these changes, we
will remove the legacy user interface and use this new implementation
through that change: &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/19640/"&gt;https://softwarefactory-project.io/r/#/c/19640/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We think this is the right strategy to manage Software Factory's
resources and we are looking forward extending our usage of this new
data model.&lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Oct 01 to Oct 22 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-oct-01-to-oct-22-summary.html" rel="alternate"></link><published>2020-10-22T10:00:00+00:00</published><updated>2020-10-22T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-10-22:/sprint-2020-oct-01-to-oct-22-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've packaged zuul-client for fedora rawhide&lt;/li&gt;
&lt;li&gt;We've added a patch to have opendev create zuul-client containers: &lt;a class="reference external" href="https://review.opendev.org/755519"&gt;https://review.opendev.org/755519&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've added/improved various subcommands to zuul-client: encrypt (covered in functional tests), builds (covered in functional tests …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've packaged zuul-client for fedora rawhide&lt;/li&gt;
&lt;li&gt;We've added a patch to have opendev create zuul-client containers: &lt;a class="reference external" href="https://review.opendev.org/755519"&gt;https://review.opendev.org/755519&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've added/improved various subcommands to zuul-client: encrypt (covered in functional tests), builds (covered in functional tests), build-info (covered in functional tests), buildsets (covered in functional tests), buildset-info (covered in functional tests), console-stream&lt;/li&gt;
&lt;li&gt;We've added documentation, dataclasses and annotations to the zuul-client API: &lt;a class="reference external" href="https://review.opendev.org/#/c/755292/"&gt;https://review.opendev.org/#/c/755292/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have investigated on a new SF welcome page and foundation for a new webui toolchain using reasonml &lt;a class="reference external" href="https://10.0.79.239/"&gt;https://10.0.79.239/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have built a reasonml module for loading SF resources files&lt;/li&gt;
&lt;li&gt;We have built a re-patternfly module to create Patternfly component in reasonml: &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/re-patternfly/tree/README.md"&gt;https://softwarefactory-project.io/cgit/software-factory/re-patternfly/tree/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated building and packaging nodejs application with zuul and rpm&lt;/li&gt;
&lt;li&gt;We added type annotation to the logreduce functions and investigated adding non-zuul build support&lt;/li&gt;
&lt;li&gt;We added a dhall binding for openstacksdk configuration: &lt;a class="reference external" href="https://softwarefactory-project.io/r/19864"&gt;https://softwarefactory-project.io/r/19864&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Sept 10 to Sept 30 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-sept-10-to-sept-30-summary.html" rel="alternate"></link><published>2020-09-30T10:00:00+00:00</published><updated>2020-09-30T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-09-30:/sprint-2020-sept-10-to-sept-30-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fabien zuul report driver for Elasticsearch is almost merged in community! (we will be able to create visualization with job duration in Kibana)&lt;/li&gt;
&lt;li&gt;We worked on the Zuul scheduler HA feature and helped on replacing the fedora-30 labels …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fabien zuul report driver for Elasticsearch is almost merged in community! (we will be able to create visualization with job duration in Kibana)&lt;/li&gt;
&lt;li&gt;We worked on the Zuul scheduler HA feature and helped on replacing the fedora-30 labels by f32&lt;/li&gt;
&lt;li&gt;Zuul-client corrective release 0.0.2 is out, the package is now installable from PYPI&lt;/li&gt;
&lt;li&gt;We worked on enabling functional testing on zuul-client with zuul&lt;/li&gt;
&lt;li&gt;We worked on new features for zuul-client: encrypt, build/buildset list and show, console-stream&lt;/li&gt;
&lt;li&gt;We did upstream review of GitLab Zuul driver (multiple patches from a real user)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We improved the purgelogs script and made it a standalone project: &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/purgelogs/tree/"&gt;https://softwarefactory-project.io/cgit/software-factory/purgelogs/tree/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated web technologies to replace the existing welcome page&lt;/li&gt;
&lt;li&gt;We validated behavior and Landed Gerrit 3.2 in sf master&lt;/li&gt;
&lt;li&gt;We experiemented with the check API of Gerrit + Zuul but gave up as the support is partial and won't allow us to remove the use of ssh stream&lt;/li&gt;
&lt;li&gt;We almost finished changing the Elasticsearch stack to Opendistro&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Python Dataclasses</title><link href="https://www.softwarefactory-project.io/python-dataclasses.html" rel="alternate"></link><published>2020-09-28T00:00:00+00:00</published><updated>2020-09-28T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2020-09-28:/python-dataclasses.html</id><summary type="html">&lt;p&gt;This is a demonstration of how to use python dataclasses to build a Zuul client that
shows build information from a REST api.&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Python &lt;a class="reference external" href="https://docs.python.org/3/library/dataclasses.html"&gt;dataclasses&lt;/a&gt;
provides many advantages over traditional datastructure such as &lt;em&gt;dict&lt;/em&gt; or &lt;em&gt;object&lt;/em&gt;.
Before we use them, let's take a look at &lt;strong&gt;typing&lt;/strong&gt;, &lt;strong&gt;immutability&lt;/strong&gt; and &lt;strong&gt;parsing …&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This is a demonstration of how to use python dataclasses to build a Zuul client that
shows build information from a REST api.&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Python &lt;a class="reference external" href="https://docs.python.org/3/library/dataclasses.html"&gt;dataclasses&lt;/a&gt;
provides many advantages over traditional datastructure such as &lt;em&gt;dict&lt;/em&gt; or &lt;em&gt;object&lt;/em&gt;.
Before we use them, let's take a look at &lt;strong&gt;typing&lt;/strong&gt;, &lt;strong&gt;immutability&lt;/strong&gt; and &lt;strong&gt;parsing&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="typing"&gt;
&lt;h2&gt;Typing&lt;/h2&gt;
&lt;p&gt;Python &lt;a class="reference external" href="https://docs.python.org/3/library/typing.html"&gt;typing&lt;/a&gt;
may be used to improve code readability.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;show_build&lt;/em&gt; function definition does not indicate what it does:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Is the input a build id or a build dict ?&lt;/li&gt;
&lt;li&gt;Does it call print or does it return something ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An annotated version would look like this:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This annotated function definition tells us a lot more about its purpose.&lt;/p&gt;
&lt;p&gt;Such functions can be checked automatically using a type checker like &lt;em&gt;mypy&lt;/em&gt;.
In another terminal, you would start the typechecker like so:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="k"&gt;while&lt;/span&gt; inotifywait -e close_write *.py&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; clear&lt;span class="p"&gt;;&lt;/span&gt; mypy *.py&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then &lt;em&gt;mypy&lt;/em&gt; would be acting as an assistant that ensures
the codes  match the signature.
This process greatly reduces the early test feedback loop
as we don't have to wait for a runtime execution.&lt;/p&gt;
&lt;p&gt;Thus, it's not surprising to see companies like Dropbox adding
type annotation to their code-base:
&lt;a class="reference external" href="https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python"&gt;Our journey to type checking 4 million lines of Python&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="immutability"&gt;
&lt;h2&gt;Immutability&lt;/h2&gt;
&lt;p&gt;Immutable records augment what one should expect from an object
and they reduce the number of states.
Each time a mutation is made, it creates a before and after state.&lt;/p&gt;
&lt;p&gt;For example let's consider this &lt;em&gt;Build&lt;/em&gt; implementation:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Build&lt;/em&gt; has at least two states, and users need to ensure
it is in the correct state before using it efficiently.&lt;/p&gt;
&lt;p&gt;Before looking at how &lt;strong&gt;dataclasses&lt;/strong&gt; can leverage &lt;em&gt;typing&lt;/em&gt;
and &lt;em&gt;immutability&lt;/em&gt;, we'll look at one more concept: &lt;em&gt;parsing&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parsing"&gt;
&lt;h2&gt;Parsing&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"&gt;Parse, don’t validate&lt;/a&gt;
design is a great companion to typing and immutability.&lt;/p&gt;
&lt;p&gt;Instead of implementing a validation layer,
we can focus on parsing immutable dataclasses.&lt;/p&gt;
&lt;p&gt;First, some functions to parse an input and produce an optional output:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_isodate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;T%H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then, using a bit of typelevel abstraction, a couple of functions to run the parsers:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Input'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Output'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Expected &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, got: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_many&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;input_values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;input_values&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We are now ready to implement the Zuul client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-build-dataclass"&gt;
&lt;h2&gt;Zuul build dataclass&lt;/h2&gt;
&lt;p&gt;A Zuul build dataclass can be written as:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;dataclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BuildArtifact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;dataclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;job_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;
    &lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
    &lt;span class="n"&gt;artifacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BuildArtifact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;# Build: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;result: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;date: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;duration: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;## Artifacts:&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_artifacts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;artifacts&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_artifacts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BuildArtifact&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;* name: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;  url: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To create the Build dataclass, a parser can be written as:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_artifact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BuildArtifact&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;BuildArtifact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'job_name'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'duration'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_isodate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'start_time'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="n"&gt;run_many&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_artifact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'artifacts'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And the rest of the client implementation is:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--build-url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--pretty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pretty&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="using-dataclasses-json-and-argparse-dataclass"&gt;
&lt;h2&gt;Using dataclasses-json and argparse-dataclass&lt;/h2&gt;
&lt;p&gt;Some convenient external libraries are available to work with dataclasses.
The above implementation may be simplified like so:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses_json&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass_json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Undefined&lt;/span&gt; &lt;span class="c1"&gt;# type: ignore&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse_dataclass&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt; &lt;span class="c1"&gt;# type: ignore&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;dataclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BuildArtifact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;dataclass_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Undefined&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EXCLUDE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;&amp;#64;dataclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;
    &lt;span class="n"&gt;job_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;
    &lt;span class="n"&gt;artifacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BuildArtifact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;# Build: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;name: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;duration: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;## Artifacts:&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_artifacts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;artifacts&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_artifacts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BuildArtifact&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;* name: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;  url: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BuildCLI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pretty_print&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;
    &lt;span class="n"&gt;zuul_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;tenant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BuildCLI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zuul_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/api/tenant/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tenant&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/build/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildCLI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;  &lt;span class="c1"&gt;# type: ignore&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pretty_print&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Install these requirements first:&lt;/span&gt;
    &lt;span class="c1"&gt;#   python3 -m pip install --user argparse-dataclass dataclasses-json requests&lt;/span&gt;
    &lt;span class="c1"&gt;# Demo:&lt;/span&gt;
    &lt;span class="c1"&gt;#   python3 dataclass.py --zuul-url https://zuul.opendev.org/ --tenant zuul --id e142dd27c4554397b3cdbf8bb4f68224&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Aug 20 to Sept 9 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-aug-20-to-sept-9-summary.html" rel="alternate"></link><published>2020-09-09T10:00:00+00:00</published><updated>2020-09-09T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-09-09:/sprint-2020-aug-20-to-sept-9-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We discussed zuul-runner spec and got it approved&lt;/li&gt;
&lt;li&gt;We reviewed zuul scheduler ha changes&lt;/li&gt;
&lt;li&gt;The zuul-client CLI project was approved. We are working on initializing the repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated upgrading gerrit to version 3.x and …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We discussed zuul-runner spec and got it approved&lt;/li&gt;
&lt;li&gt;We reviewed zuul scheduler ha changes&lt;/li&gt;
&lt;li&gt;The zuul-client CLI project was approved. We are working on initializing the repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated upgrading gerrit to version 3.x and implemented a pynotedb helper library&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Jul 30 to Aug 19 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-jul-30-to-aug-19-summary.html" rel="alternate"></link><published>2020-08-19T10:00:00+00:00</published><updated>2020-08-19T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-08-19:/sprint-2020-jul-30-to-aug-19-summary.html</id><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've continued work on ongoing zuul patches, in particular adding internationalization to the web UI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have worked to switch ELK stack to Opendistro by AWS to protect indexes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Haskell for python developers</title><link href="https://www.softwarefactory-project.io/haskell-for-python-developers.html" rel="alternate"></link><published>2020-07-30T00:00:00+00:00</published><updated>2020-07-30T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2020-07-30:/haskell-for-python-developers.html</id><summary type="html">&lt;style type="text/css"&gt;

  table {
    width: 100%;
    table-layout: fixed;
  }
  table.docutils { margin-bottom: 15px; }
  table, td, th, pre {
    border-color: lightgrey;
  }
  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }
  col {
    width: 50%;
  }

  td &gt; div &gt; div &gt; pre, td &gt; pre.code {
    margin: 0px -7px;
    border: none;
  }
  ul.simple {
    padding-left: 15px;
  }

  table { height: 1px; }
  tr …&lt;/style&gt;</summary><content type="html">&lt;style type="text/css"&gt;

  table {
    width: 100%;
    table-layout: fixed;
  }
  table.docutils { margin-bottom: 15px; }
  table, td, th, pre {
    border-color: lightgrey;
  }
  .literal {
    border-radius: 6px;
    padding: 1px 1px;
    background-color: rgba(27,31,35,.05);
  }
  col {
    width: 50%;
  }

  td &gt; div &gt; div &gt; pre, td &gt; pre.code {
    margin: 0px -7px;
    border: none;
  }
  ul.simple {
    padding-left: 15px;
  }

  table { height: 1px; }
  tr, td, td &gt; div, td &gt; div &gt; div, td &gt; div &gt; div &gt; pre { height: 100%; }
  body &gt; div.container { width: 1196px; }

&lt;/style&gt;&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Please be advised that this article is based on personal experimentation.
The information may be incorrect. Please use at your own discretion.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- This work is licensed under the Creative Commons Attribution 4.0 International License.
     To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
     or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
--&gt;&lt;p&gt;In this article, I will set out what I have learned about the Haskell language from a Python developer's perspective.&lt;/p&gt;
&lt;p&gt;This is a follow-up to &lt;a class="reference external" href="https://fedoramagazine.org/getting-started-with-haskell-on-fedora/"&gt;Getting Started with Haskell on Fedora&lt;/a&gt;
and this is similar to my previous &lt;a class="reference external" href="https://www.softwarefactory-project.io/react-for-python-developers.html"&gt;React for python developers&lt;/a&gt; post.&lt;/p&gt;
&lt;!-- note: max code width is 61 col --&gt;&lt;div class="section" id="toolchain"&gt;
&lt;h2&gt;Toolchain&lt;/h2&gt;
&lt;div class="section" id="runtime"&gt;
&lt;h3&gt;Runtime&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="70%" /&gt;
&lt;col width="30%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;python (the REPL)&lt;/td&gt;
&lt;td&gt;ghci&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;#!/usr/bin/python (the script interpreter)&lt;/td&gt;
&lt;td&gt;runhaskell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ghc (the compiler)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In practice, haskell programs are usually compiled using a package manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="read-eval-print-loop"&gt;
&lt;h3&gt;Read Eval Print Loop&lt;/h3&gt;
&lt;p&gt;A typical developper environment uses a text editor along with a REPL terminal to evaluate expressions.&lt;/p&gt;
&lt;p&gt;Given a file named &lt;tt class="docutils literal"&gt;a_file&lt;/tt&gt; in the current working directory:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# a_file.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- a_file.hs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can evaluate expressions:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;pre class="code bash first last literal-block"&gt;
$ python
Python &lt;span class="m"&gt;3&lt;/span&gt;.8.3 &lt;span class="o"&gt;(&lt;/span&gt;default, May &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;, &lt;span class="m"&gt;00&lt;/span&gt;:00:00&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; from a_file import *
&amp;gt;&amp;gt;&amp;gt; greet&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello Python!
&lt;/pre&gt;
&lt;/td&gt;
&lt;td&gt;&lt;pre class="code bash first last literal-block"&gt;
$ ghci
GHCi, version &lt;span class="m"&gt;8&lt;/span&gt;.6.5: http://www.haskell.org/ghc/
Prelude&amp;gt; :load a_file
Prelude&amp;gt; greet&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Hello Haskell!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Useful ghci command includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:reload&lt;/tt&gt; reloads all the loaded file.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:info&lt;/tt&gt; prints info about a name.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:type&lt;/tt&gt; prints the type of an expression.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:browse&lt;/tt&gt; lists the types and functions of a module.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:quit&lt;/tt&gt; to exit ghci.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More infos about ghci in this &lt;a class="reference external" href="https://typeclasses.com/ghci/intro"&gt;typeclass post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="package-manager"&gt;
&lt;h3&gt;Package Manager&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="63%" /&gt;
&lt;col width="38%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;setup.cfg and requirements.txt&lt;/td&gt;
&lt;td&gt;project-name.cabal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;setuptools and pip&lt;/td&gt;
&lt;td&gt;cabal-install&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tox and (lts) pip&lt;/td&gt;
&lt;td&gt;stack&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To learn about the history of these tools, check this &lt;a class="reference external" href="https://www.reddit.com/r/haskell/comments/htvlqv/how_to_manually_install_haskell_package_with/fynxdme/"&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; is a file format that describes most Haskell packages and programs.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cabal-install&lt;/span&gt;&lt;/tt&gt; is a package manager that uses the Hackage registry.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;stack&lt;/tt&gt; is another package manager that uses the Stackage registry, which features Long Term Support package sets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Install stack on Fedora using this command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ sudo dnf copr &lt;span class="nb"&gt;enable&lt;/span&gt; -y petersen/stack2 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo dnf install -y stack &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo stack upgrade
&lt;/pre&gt;
&lt;p&gt;Example stack usage:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ stack new my-playground&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; my-playground
$ stack build
$ stack &lt;span class="nb"&gt;test&lt;/span&gt;
$ stack ghci
$ stack ls dependencies
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="developer-tools"&gt;
&lt;h3&gt;Developer tools&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="52%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="26%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;/th&gt;
&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;code formatter&lt;/td&gt;
&lt;td&gt;black&lt;/td&gt;
&lt;td&gt;ormolu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;linter&lt;/td&gt;
&lt;td&gt;flake8&lt;/td&gt;
&lt;td&gt;hlint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;documentation&lt;/td&gt;
&lt;td&gt;sphinx&lt;/td&gt;
&lt;td&gt;haddock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;api search&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;hoogle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Documentation can be found on &lt;a class="reference external" href="https://hackage.haskell.org/"&gt;Hackage&lt;/a&gt; directly or it can be built locally using the &lt;tt class="docutils literal"&gt;stack haddock&lt;/tt&gt; command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ stack haddock
&lt;span class="c1"&gt;# Open the documentation of the base module:
&lt;/span&gt;$ stack haddock --open base
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Most packages use Haddock, click on a module name to access the module documentation.&lt;/li&gt;
&lt;li&gt;Look for a &lt;tt class="docutils literal"&gt;Tutorial&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;Prelude&lt;/tt&gt; module, otherwise start with the top level name.&lt;/li&gt;
&lt;li&gt;Click &lt;tt class="docutils literal"&gt;Contents&lt;/tt&gt; from the top menu to browse back to the index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Hoogle&lt;/tt&gt; is the Haskell API search engine. Visit &lt;a class="reference external" href="https://hoogle.haskell.org/"&gt;https://hoogle.haskell.org/&lt;/a&gt; or run it locally using the &lt;tt class="docutils literal"&gt;stack hoogle&lt;/tt&gt; command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ stack hoogle -- generate --local
$ stack hoogle -- server --local --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="c1"&gt;# Or use the like this:
&lt;/span&gt;$ stack hoogle -- &lt;span class="s1"&gt;'[a] -&amp;gt; a'&lt;/span&gt;
Prelude head :: &lt;span class="o"&gt;[&lt;/span&gt;a&lt;span class="o"&gt;]&lt;/span&gt; -&amp;gt; a
Prelude last :: &lt;span class="o"&gt;[&lt;/span&gt;a&lt;span class="o"&gt;]&lt;/span&gt; -&amp;gt; a
&lt;/pre&gt;
&lt;p&gt;I recommend running all the above stack commands before reading the rest of this article.
Then start a ghci REPL and try the example as well as use the &lt;tt class="docutils literal"&gt;:info&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;:type&lt;/tt&gt; command.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="language-features"&gt;
&lt;h2&gt;Language Features&lt;/h2&gt;
&lt;p&gt;Before starting, let's see what makes Haskell special.&lt;/p&gt;
&lt;p&gt;For more details, check out this &lt;a class="reference external" href="https://serokell.io/blog/10-reasons-to-use-haskell"&gt;blog post&lt;/a&gt; that explains why Haskell is nice to program in.&lt;/p&gt;
&lt;div class="section" id="statically-typed"&gt;
&lt;h3&gt;Statically typed&lt;/h3&gt;
&lt;p&gt;Every expression has a type and ghc ensures that types match at compile time:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello!&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Runtime type error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello!&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- Compile error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="type-inference"&gt;
&lt;h3&gt;Type inference&lt;/h3&gt;
&lt;p&gt;Most of the time, you don't have to define the types:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_to_upper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# What is the type of `list_to_upper` ?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;list_to_upper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toUpper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- list_to_upper :: [Char] -&amp;gt; [Char]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="lazy"&gt;
&lt;h3&gt;Lazy&lt;/h3&gt;
&lt;p&gt;Expressions are evaluated only when needed:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Done.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Program halt before the print&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Done.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- res is not used or evaluated&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="immutable"&gt;
&lt;h3&gt;Immutable&lt;/h3&gt;
&lt;p&gt;Variable content can not be modified.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="c1"&gt;# The attribute b of `a` now contains 42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- The last statement create a new record&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="purely-functional"&gt;
&lt;h3&gt;Purely functional&lt;/h3&gt;
&lt;p&gt;Haskell programs are made out of function compositions and applications
whereas imperative languages use procedural statements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="language-syntax"&gt;
&lt;h2&gt;Language Syntax&lt;/h2&gt;
&lt;p&gt;In this section, let's overview the Haskell syntax.&lt;/p&gt;
&lt;div class="section" id="comments"&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A comment&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; A multiline comment&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- A comment&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;{- A multiline comment&lt;/span&gt;
&lt;span class="cm"&gt;-}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="imports"&gt;
&lt;h3&gt;Imports&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;NewName&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System.Environment&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System.Environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NewName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System.Environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getEnv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System.Environment&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System.Environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;hiding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getEnv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Multiple modules can be imported using the same name, resulting in all the functions to be merged into a single namespace:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Text.IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="operators"&gt;
&lt;h3&gt;Operators&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 3.3333&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;elem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Haskell operators are regular functions used in infix notation.
To query them from the REPL, they need to be put in paranthesis:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
ghci&amp;gt; :info &lt;span class="o"&gt;(&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Haskell functions can also be used in infix notation using backticks:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;84&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Apple&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Peach&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Berry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Apple&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Peach&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Berry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="list-comprehension"&gt;
&lt;h3&gt;List comprehension&lt;/h3&gt;
&lt;p&gt;List generators:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;List comprehension:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# [3, 6, 9]&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="c1"&gt;# [(1, 1), (1, 2), (2, 1), (2, 2)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- [3,6,9]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- [(1,1),(1,2),(2,1),(2,2)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;List can be infinite.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;lt;-&lt;/tt&gt; is syntax sugar for the bind operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="function"&gt;
&lt;h3&gt;Function&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_and_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;add_and_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;add_and_double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nf"&gt;add_and_double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Parentheses and comma are not required.&lt;/li&gt;
&lt;li&gt;Return is implicit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="anonymous-function"&gt;
&lt;h3&gt;Anonymous function&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;tup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tup&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Argument separators are not needed.&lt;/li&gt;
&lt;li&gt;Tuple argument can be deconstructed using pattern matching.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="concrete-type"&gt;
&lt;h3&gt;Concrete type&lt;/h3&gt;
&lt;p&gt;Types that are not abstract:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Strings are lists of characters (more on that later).&lt;/li&gt;
&lt;li&gt;Haskell &lt;tt class="docutils literal"&gt;Int&lt;/tt&gt; are bounded, &lt;tt class="docutils literal"&gt;Integer&lt;/tt&gt; are infinite, use type annotation to force the type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basic conversion:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;
&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;42&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;fromIntegral&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Float&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;42&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Read more about number in the &lt;a class="reference external" href="https://www.haskell.org/tutorial/numbers.html"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="type-annotations"&gt;
&lt;h3&gt;Type annotations&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;--- ghci&amp;gt; :type lines&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;lines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Type annotations are prefixed by &lt;tt class="docutils literal"&gt;::&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;lines&lt;/tt&gt; is a function that takes a &lt;tt class="docutils literal"&gt;String&lt;/tt&gt;, and it returns a list of Strings, denoted &lt;tt class="docutils literal"&gt;[String]&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_and_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;add_and_double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Before &lt;tt class="docutils literal"&gt;=&amp;gt;&lt;/tt&gt; are type-variable constraints, &lt;tt class="docutils literal"&gt;Num a&lt;/tt&gt; is a constraint for the type-variable &lt;tt class="docutils literal"&gt;a&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Type is &lt;tt class="docutils literal"&gt;a &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; a&lt;/tt&gt;, which means a function that takes two &lt;tt class="docutils literal"&gt;a&lt;/tt&gt;s and that returns a &lt;tt class="docutils literal"&gt;a&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;a&lt;/tt&gt; is a variable type (or type-variable). It can be a &lt;tt class="docutils literal"&gt;Int&lt;/tt&gt;, a &lt;tt class="docutils literal"&gt;Float&lt;/tt&gt;, or anything that satisfies the &lt;tt class="docutils literal"&gt;Num&lt;/tt&gt; type class (more and that later).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="partial-application"&gt;
&lt;h3&gt;Partial application&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add20_and_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;add_and_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;add20_and_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;add20_and_double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;add_and_double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nf"&gt;add20_and_double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example, the &lt;tt class="docutils literal"&gt;map&lt;/tt&gt; function type annotation is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;map :: (a &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; [b]&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;map&lt;/tt&gt; takes a function that goes from &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;b&lt;/tt&gt;, denoted &lt;tt class="docutils literal"&gt;(a &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; b)&lt;/tt&gt;, a list of &lt;tt class="docutils literal"&gt;a&lt;/tt&gt;s and it returns a list of &lt;tt class="docutils literal"&gt;b&lt;/tt&gt;s:&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# [2, 4, 6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;--- [2, 4, 6]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here are the annotations for each sub expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="record"&gt;
&lt;h3&gt;Record&lt;/h3&gt;
&lt;p&gt;A group of values is defined using Record:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;


&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nf"&gt;person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alice&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the first line defines a &lt;tt class="docutils literal"&gt;Person&lt;/tt&gt; type with a single &lt;tt class="docutils literal"&gt;Person&lt;/tt&gt; constructor that takes a string attribute.&lt;/li&gt;
&lt;li&gt;Record attributes are actually functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the annotations of the record functions automatically created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Record value can be updated:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;new_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;new_person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;new_person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;See this &lt;a class="reference external" href="http://www.haskellforall.com/2020/07/record-constructors.html"&gt;blog post&lt;/a&gt; for more details about record syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="type-class"&gt;
&lt;h3&gt;(Type) class&lt;/h3&gt;
&lt;p&gt;Classes are defined using type class. For example, objects that can be compared:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The `==` operator use object `__eq__` function:&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- The `==` operator works with Eq type class:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Type class can also have constraints:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The `&amp;gt;` operator use object `__gt__` function:&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComparablePerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__gt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- ghci&amp;gt; :info Ord&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Ord&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Ordering&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Haskell can derive most type classes automatically using the &lt;tt class="docutils literal"&gt;deriving&lt;/tt&gt; keyword:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;deriving&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Ord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Common type classes are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read&lt;/li&gt;
&lt;li&gt;Show&lt;/li&gt;
&lt;li&gt;Eq&lt;/li&gt;
&lt;li&gt;Ord&lt;/li&gt;
&lt;li&gt;SemiGroup&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="do-notation"&gt;
&lt;h3&gt;Do notation&lt;/h3&gt;
&lt;p&gt;Expressions that produce side-effecting IO operations are descriptions of what they do.
For example the description can be assigned and evaluated when needed:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;defered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;defered&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;defered&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nf"&gt;defered&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Such expressions are often defined using the &lt;tt class="docutils literal"&gt;do&lt;/tt&gt; notations:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What is your name? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Welcome &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;putStrLn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getLine&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Welcome &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;&amp;lt;-&lt;/tt&gt; lets you bind to the content of an IO.&lt;/li&gt;
&lt;li&gt;The last expression must match the IO value, use &lt;tt class="docutils literal"&gt;pure&lt;/tt&gt; if the value is not already an IO.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;do&lt;/tt&gt; notations can also be used for other non-IO computation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;do&lt;/tt&gt; notation is syntaxic sugar, here is an equivalent implementation using regular operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;putStrLn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;getLine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Welcome &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt;&lt;/tt&gt; discards the previous value while &lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt;=&lt;/tt&gt; binds it as the first argument of the operand function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="algebraic-data-type-adt"&gt;
&lt;h3&gt;Algebraic Data Type (ADT)&lt;/h3&gt;
&lt;p&gt;Here the &lt;tt class="docutils literal"&gt;Bool&lt;/tt&gt; type has two constructors &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;.
We can say that &lt;tt class="docutils literal"&gt;Bool&lt;/tt&gt; is the sum of &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the &lt;tt class="docutils literal"&gt;Person&lt;/tt&gt; type has one constructor &lt;tt class="docutils literal"&gt;MakePerson&lt;/tt&gt; that takes two concrete values.
We can say that &lt;tt class="docutils literal"&gt;Person&lt;/tt&gt; is the product of &lt;tt class="docutils literal"&gt;String&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Int&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;MakePerson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Data type can be polymorphic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Either&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pattern-matching"&gt;
&lt;h3&gt;Pattern matching&lt;/h3&gt;
&lt;p&gt;Multiple function bodies can be defined for different arguments using patterns:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;--&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Values can also be matched using case expression:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;first_elem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;first_elem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;of&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_&lt;/tt&gt; match anything.&lt;/li&gt;
&lt;li&gt;See &lt;a class="reference external" href="https://github.com/thma/WhyHaskellMatters#lists"&gt;this section&lt;/a&gt; of Why Haskell Matters to learn more about list pattern match.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="nested-scope"&gt;
&lt;h3&gt;Nested Scope&lt;/h3&gt;
&lt;p&gt;Nesting the scope of definitions is a commonly used pattern, for example with &lt;tt class="docutils literal"&gt;.. where ..&lt;/tt&gt;:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main_fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sub_fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sub_fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;main_fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sub_fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sub_fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sub_arg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Where clauses can be used recursively. Another pattern is to use &lt;tt class="docutils literal"&gt;let .. in ..&lt;/tt&gt; :&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;a_fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kr"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kr"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For more details see &lt;a class="reference external" href="https://wiki.haskell.org/Let_vs._Where"&gt;Let vs. Where&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="standard-library"&gt;
&lt;h2&gt;Standard library&lt;/h2&gt;
&lt;p&gt;Note that the standard library is likely not enough. Add those extra libraries to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;build-depends&lt;/span&gt;&lt;/tt&gt; list
of your playground cabal file, then reload &lt;tt class="docutils literal"&gt;stack ghci&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;aeson&lt;/li&gt;
&lt;li&gt;bytestrings&lt;/li&gt;
&lt;li&gt;containers&lt;/li&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="prelude"&gt;
&lt;h3&gt;Prelude&lt;/h3&gt;
&lt;p&gt;By default, Haskell programs have access to the &lt;a class="reference external" href="https://hackage.haskell.org/package/base/"&gt;base&lt;/a&gt; library:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tuples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tuples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;fst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;tuples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tuples&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tuples&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;$&lt;/tt&gt; operator splits the expression in half, and they are evaluated last so that we can avoid using parentheses on the right hand side operand.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/tt&gt; operator works on all semigroups (while &lt;tt class="docutils literal"&gt;++&lt;/tt&gt; only works on List).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="data-list"&gt;
&lt;span id="datalist"&gt;&lt;/span&gt;&lt;h3&gt;Data.List&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;tail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;take&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;drop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="data-maybe"&gt;
&lt;span id="datamaybe"&gt;&lt;/span&gt;&lt;h3&gt;Data.Maybe&lt;/h3&gt;
&lt;p&gt;Functions to manipulate optional values: &lt;tt class="docutils literal"&gt;data Maybe a = Just a | Nothing&lt;/tt&gt;.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Maybe&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromMaybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;catMaybes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="data-either"&gt;
&lt;span id="dataeither"&gt;&lt;/span&gt;&lt;h3&gt;Data.Either&lt;/h3&gt;
&lt;p&gt;Functions to manipulate either type: &lt;tt class="docutils literal"&gt;data Either a b = Left a | Right b&lt;/tt&gt;.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe_div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Division by zero&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;safe_div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Either&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;safe_div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Division by zero&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;safe_div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;safe_div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;rights&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="data-text"&gt;
&lt;span id="datatext"&gt;&lt;/span&gt;&lt;h3&gt;Data.Text&lt;/h3&gt;
&lt;p&gt;The default type for a string is a list of characterset, &lt;tt class="docutils literal"&gt;Text&lt;/tt&gt; provides a more efficient alternative:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;a_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;universe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;a_string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;universe&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a_string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitOn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a_string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a_string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Data.Text can also be used to read files:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;cpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/proc/cpuinfo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cpus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;processor&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Text.IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;cpus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/proc/cpuinfo&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;cpus_lines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isPreffixOf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;processor&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cpus_lines&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;:set &lt;span class="pre"&gt;-XOverloadedStrings&lt;/span&gt;&lt;/tt&gt; in ghci to ensure the &amp;quot;string&amp;quot; values are Text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="data-bytestring"&gt;
&lt;span id="databytestring"&gt;&lt;/span&gt;&lt;h3&gt;Data.ByteString&lt;/h3&gt;
&lt;p&gt;Use &lt;tt class="docutils literal"&gt;ByteString&lt;/tt&gt; to work with raw data bytes. Both &lt;tt class="docutils literal"&gt;Data.Text&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Data.ByteString&lt;/tt&gt; come in two flavors, strict and lazy.&lt;/p&gt;
&lt;p&gt;Strict version, to and from &lt;tt class="docutils literal"&gt;String&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Char8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Char8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Strict version between &lt;tt class="docutils literal"&gt;Text&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ByteString&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encodeUtf8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodeUtf8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Conversion between strict and lazy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromStrict&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toStrict&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromStrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toStrict&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To avoid using fully qualified type names, these libraries are usually imported like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.ByteString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ByteString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.ByteString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="containers"&gt;
&lt;h3&gt;Containers&lt;/h3&gt;
&lt;p&gt;The containers' library offers useful containers types. For example Map:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;other&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;another&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;other&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;another&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Set:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Eve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;qualified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Data.Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Eve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Check out the documentation by running &lt;tt class="docutils literal"&gt;stack haddock &lt;span class="pre"&gt;--open&lt;/span&gt; containers&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;When unsure, use the strict version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="language-extensions"&gt;
&lt;h2&gt;Language Extensions&lt;/h2&gt;
&lt;p&gt;The main compiler &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; supports some useful language extensions. They can be enabled:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Per file using this syntax: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{-#&lt;/span&gt; LANGUAGE ExtensionName &lt;span class="pre"&gt;#-}&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Per project using the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;default-extensions:&lt;/span&gt; ExtensionName&lt;/tt&gt; cabal configuration.&lt;/li&gt;
&lt;li&gt;Per ghci session using the &lt;tt class="docutils literal"&gt;:set &lt;span class="pre"&gt;-XExtensionName&lt;/span&gt;&lt;/tt&gt; command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that ghci &lt;tt class="docutils literal"&gt;:set -&lt;/tt&gt; command can be auto completed using &lt;tt class="docutils literal"&gt;Tab&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="section" id="overloadedstrings"&gt;
&lt;h3&gt;OverloadedStrings&lt;/h3&gt;
&lt;p&gt;Enables using automatic conversion of &amp;quot;string&amp;quot; value to the appropriate type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="numericunderscores"&gt;
&lt;h3&gt;NumericUnderscores&lt;/h3&gt;
&lt;p&gt;Enables using underscores separator e.g. &lt;tt class="docutils literal"&gt;1_000_000&lt;/tt&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="noimplicitprelude"&gt;
&lt;h3&gt;NoImplicitPrelude&lt;/h3&gt;
&lt;p&gt;Disables the implicit &lt;tt class="docutils literal"&gt;import Prelude&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Please check &lt;a class="reference external" href="http://dev.stephendiehl.com/hask/#philosophy"&gt;What I Wish I Knew When Learning Haskell&lt;/a&gt; for a complete overview of Language Extensions,
or &lt;a class="reference external" href="https://kowainik.github.io/posts/extensions"&gt;this post&lt;/a&gt; from the kowainik team.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="further-resources"&gt;
&lt;h2&gt;Further Resources&lt;/h2&gt;
&lt;p&gt;To delve in further, I recommend digging through the links I shared above.
These videos are worth a watch:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=b9FagOVqxmI"&gt;Haskell Amuse-Bouche&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Vgu82wiiZ90&amp;amp;list=PLe7Ei6viL6jGp1Rfu0dil1JH1SHk9bgDV"&gt;Haskell for Imperative Programmers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These introductory books are often mentioned:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://atypeofprogramming.com/"&gt;A Type of Programming&lt;/a&gt; by Renzo Carbonara.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/bitemyapp/learnhaskell#how-to-learn-haskell"&gt;Learn Haskell&lt;/a&gt; by Chris Allen.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.manning.com/books/get-programming-with-haskell"&gt;Get Programming with Haskell&lt;/a&gt; by Will Kurt (Manning).&lt;/li&gt;
&lt;li&gt;Graham Hutton’s textbook &lt;a class="reference external" href="https://www.cambridge.org/core/books/programming-in-haskell/8FED82E807EF12D390DE0D16FDE217E4"&gt;Programming in Haskell&lt;/a&gt; (2nd ed).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, if you need help, please join the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;#haskell-beginners&lt;/span&gt;&lt;/tt&gt; IRC channel on Freenode.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Jul 10 to 29 Jul summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-jul-10-to-29-jul-summary.html" rel="alternate"></link><published>2020-07-29T10:00:00+00:00</published><updated>2020-07-29T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-07-29:/sprint-2020-jul-10-to-29-jul-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We contributed to the zuul-3.19.1 release process&lt;/li&gt;
&lt;li&gt;We implemented a feature complete GitLab driver for Zuul &lt;a class="reference external" href="https://review.opendev.org/#/q/topic:gitlab+(status:open+OR+status:merged"&gt;https://review.opendev.org/#/q/topic:gitlab+(status:open+OR+status:merged&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created a dhall-zuul package to …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We contributed to the zuul-3.19.1 release process&lt;/li&gt;
&lt;li&gt;We implemented a feature complete GitLab driver for Zuul &lt;a class="reference external" href="https://review.opendev.org/#/q/topic:gitlab+(status:open+OR+status:merged"&gt;https://review.opendev.org/#/q/topic:gitlab+(status:open+OR+status:merged&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created a dhall-zuul package to enable a safer zuul configuration management: &lt;a class="reference external" href="https://docs.softwarefactory-project.io/dhall-zuul/"&gt;https://docs.softwarefactory-project.io/dhall-zuul/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on branching the next version 3.5 of software-factory&lt;/li&gt;
&lt;li&gt;We experimented new tools to simplify some part of the release process, such as updating rpm python dependencies version using pip resolver&lt;/li&gt;
&lt;li&gt;We created some client library to interface with gerrit, podman, zuul and pypi: &lt;a class="reference external" href="https://docs.softwarefactory-project.io/"&gt;https://docs.softwarefactory-project.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;we fixed the sf-tenants test that &amp;quot;disappeared&amp;quot; for a while, and needed an update following the switch to k1s&lt;/li&gt;
&lt;li&gt;we implement backup and restore feature for Kibana&lt;/li&gt;
&lt;li&gt;We created a fedora based container for X11 capture, which is useful with selenium testing in a headless fashion &lt;a class="reference external" href="https://hub.docker.com/r/mhuin/ffmpeg-x11grab"&gt;https://hub.docker.com/r/mhuin/ffmpeg-x11grab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We got some help to fix the github ssh key mapper with keycloak 10&lt;/li&gt;
&lt;li&gt;We packaged keycloak 10 and 11&lt;/li&gt;
&lt;li&gt;We've improved coverage on our keycloak related testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Security Fix Localhost</title><link href="https://www.softwarefactory-project.io/zuul-security-fix-localhost.html" rel="alternate"></link><published>2020-07-22T00:00:00+00:00</published><updated>2020-07-22T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2020-07-22:/zuul-security-fix-localhost.html</id><summary type="html">&lt;p&gt;A new Zuul version has been added to the SF-3.4 to address
a security issue: &lt;a class="reference external" href="https://review.opendev.org/742229"&gt;https://review.opendev.org/742229&lt;/a&gt;.
To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the
install-server. Alternatively, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y *zuul*&amp;quot;&lt;/span&gt; zuul-scheduler:zuul-web:zuul-executor:zuul-merger
ansible-playbook /var …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A new Zuul version has been added to the SF-3.4 to address
a security issue: &lt;a class="reference external" href="https://review.opendev.org/742229"&gt;https://review.opendev.org/742229&lt;/a&gt;.
To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the
install-server. Alternatively, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y *zuul*&amp;quot;&lt;/span&gt; zuul-scheduler:zuul-web:zuul-executor:zuul-merger
ansible-playbook /var/lib/software-factory/ansible/zuul_restart.yml
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Jun 19 to 08 Jul summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-jun-19-to-08-jul-summary.html" rel="alternate"></link><published>2020-07-08T10:00:00+00:00</published><updated>2020-07-08T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-07-08:/sprint-2020-jun-19-to-08-jul-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated the Gitlab approval system, experimented with API endpoints and web-hooks. That should be fine. Now ready for the implementation.&lt;/li&gt;
&lt;li&gt;We proposed i18n for zuul&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added support for gitlab in sf-config (in-review)&lt;/li&gt;
&lt;li&gt;We added …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated the Gitlab approval system, experimented with API endpoints and web-hooks. That should be fine. Now ready for the implementation.&lt;/li&gt;
&lt;li&gt;We proposed i18n for zuul&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added support for gitlab in sf-config (in-review)&lt;/li&gt;
&lt;li&gt;We added zookeeper tls support for zuul 4.x compatibility&lt;/li&gt;
&lt;li&gt;We removed runc integration from sf-config and sf-ci&lt;/li&gt;
&lt;li&gt;We fixed an issue with kubectl console stream when using complex job&lt;/li&gt;
&lt;li&gt;We update packages related to new ELK&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 May 29 to Jun 17 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-may-29-to-jun-17-summary.html" rel="alternate"></link><published>2020-06-17T10:00:00+00:00</published><updated>2020-06-17T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-06-17:/sprint-2020-may-29-to-jun-17-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reported and validated a critical fix for the Zuul scheduler&lt;/li&gt;
&lt;li&gt;We have proposed some patches on Zuul to improve the GitLab driver: push, tag support + depends-on support. The documentation has been proposed as well. We have managed …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reported and validated a critical fix for the Zuul scheduler&lt;/li&gt;
&lt;li&gt;We have proposed some patches on Zuul to improve the GitLab driver: push, tag support + depends-on support. The documentation has been proposed as well. We have managed to include some people interested about the driver.&lt;/li&gt;
&lt;li&gt;[Demo] We've worked on some Quality-of-Life patches for Zuul and the web UI:&lt;/li&gt;
&lt;li&gt;Filter/display builds depending on whether they're held or not&lt;/li&gt;
&lt;li&gt;Display autohold requests&lt;/li&gt;
&lt;li&gt;Allow filtering of nodes by label, provider, state and time spent in state&lt;/li&gt;
&lt;li&gt;[Demo] We've restarted work on authentication in the UI from scratch:&lt;/li&gt;
&lt;li&gt;Support for tenant-scoped identity providers&lt;/li&gt;
&lt;li&gt;How-Tos explaining how to configure Zuul with google Auth or keycloak for user authentication&lt;/li&gt;
&lt;li&gt;Dequeues can be triggered from the status page&lt;/li&gt;
&lt;li&gt;We proposed to split the zuul CLI to be usable by tenant admin&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have validated and merged the dhall-nodepool integration in sf-config&lt;/li&gt;
&lt;li&gt;We discussed the next step for SoftwareFactory 3.5 release and future roadmap: &lt;a class="reference external" href="https://softwarefactory-project.io/etherpad/p/sf-3.5"&gt;https://softwarefactory-project.io/etherpad/p/sf-3.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed zuul console streaming when running jobs in container&lt;/li&gt;
&lt;li&gt;We configured prometheus monitoring for zuul queue length and nodepool image age&lt;/li&gt;
&lt;li&gt;we setup udp-multiplexer on our sf infra - works well (it redirect nodepool statsd metrics to multiple destination hosts)&lt;/li&gt;
&lt;li&gt;we patched repoxplorer so now is also supporting Elasticsearch 7.X&lt;/li&gt;
&lt;li&gt;we've added testing for upgrades and migration from cauth to keycloak (they're failing for now!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 May 06 to May 27 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-may-06-to-may-27-summary.html" rel="alternate"></link><published>2020-05-27T10:00:00+00:00</published><updated>2020-05-27T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-05-27:/sprint-2020-may-06-to-may-27-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated zuul-jobs third party CI to get better coverage and added support for fedora-32 CI&lt;/li&gt;
&lt;li&gt;We discussed with zuul maintainer about zuul-output usage and finally made the tox docs job work on kubectl node&lt;/li&gt;
&lt;li&gt;We've produced a …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;Opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated zuul-jobs third party CI to get better coverage and added support for fedora-32 CI&lt;/li&gt;
&lt;li&gt;We discussed with zuul maintainer about zuul-output usage and finally made the tox docs job work on kubectl node&lt;/li&gt;
&lt;li&gt;We've produced a series of patches to improve the end user experience:&lt;/li&gt;
&lt;li&gt;Doc: How to: REST API with cURL &lt;a class="reference external" href="https://review.opendev.org/727785"&gt;https://review.opendev.org/727785&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fixes and improvements to the REST API and client, ultimately leading to a split between zuul admin CLI and zuul-web-client (for end users) &lt;a class="reference external" href="https://review.opendev.org/#/q/topic:fix_rest_client"&gt;https://review.opendev.org/#/q/topic:fix_rest_client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adding a &amp;quot;held&amp;quot; attribute to builds in the sql reporter, so that builds can be filtered by held status in the web UI: &lt;a class="reference external" href="https://review.opendev.org/#/q/topic:build_held_attribute"&gt;https://review.opendev.org/#/q/topic:build_held_attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adding a Autohold requests page in the web UI &lt;a class="reference external" href="https://review.opendev.org/#/c/729307/"&gt;https://review.opendev.org/#/c/729307/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We integrated latest zuul and nodepool versions in sf-3.4&lt;/li&gt;
&lt;li&gt;We found a weird bug in ansible smart fact gathering resulting in ansible_hostname being incorrect&lt;/li&gt;
&lt;li&gt;We added cache management on zuul-images-jobs to have a main cache per distribution (centos-7, f32) of projects (pip). We added dhall tasks to keep up to date and attach these caches.&lt;/li&gt;
&lt;li&gt;keycloak: We implemented support for basic user CRUD operations through sfmanager.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Apr 15 to May 06 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-apr-15-to-may-06-summary.html" rel="alternate"></link><published>2020-05-06T10:00:00+00:00</published><updated>2020-05-06T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-05-06:/sprint-2020-apr-15-to-may-06-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added cert-manager integration to the zuul-operator&lt;/li&gt;
&lt;li&gt;We reviewed zuul changes about the scheduler HA and container buildset&lt;/li&gt;
&lt;li&gt;We added new zuul-jobs to validate Haskell based project&lt;/li&gt;
&lt;li&gt;We discussed about the zuul-images-jobs project [DEMO]&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;keycloak integration …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added cert-manager integration to the zuul-operator&lt;/li&gt;
&lt;li&gt;We reviewed zuul changes about the scheduler HA and container buildset&lt;/li&gt;
&lt;li&gt;We added new zuul-jobs to validate Haskell based project&lt;/li&gt;
&lt;li&gt;We discussed about the zuul-images-jobs project [DEMO]&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;keycloak integration:&lt;ul&gt;
&lt;li&gt;started supporting CRUD for keycloak in sfmanager&lt;/li&gt;
&lt;li&gt;sf-ci-functional-minimal-keycloak and sf-ci-functional-allinone-keycloak are almost GO!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;we are integrating statsd_exporter with nodepool services to provide more informations about nodepool and dib images&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Mar 26 to Apr 15 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-mar-26-to-apr-15-summary.html" rel="alternate"></link><published>2020-04-15T10:00:00+00:00</published><updated>2020-04-15T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-04-15:/sprint-2020-mar-26-to-apr-15-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We contributed to the zuul-operator by adding nodepool-launcher service, kubernetes integration tests and support for the cert-manager&lt;/li&gt;
&lt;li&gt;We proposed an improvements in Zuul Pagure driver to:&lt;/li&gt;
&lt;li&gt;Use the new endpoint webhook/token&lt;/li&gt;
&lt;li&gt;Use a fixed CI status slot …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We contributed to the zuul-operator by adding nodepool-launcher service, kubernetes integration tests and support for the cert-manager&lt;/li&gt;
&lt;li&gt;We proposed an improvements in Zuul Pagure driver to:&lt;/li&gt;
&lt;li&gt;Use the new endpoint webhook/token&lt;/li&gt;
&lt;li&gt;Use a fixed CI status slot and do not consider other CI status (bug)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We created dhall-nodepool project with schemas for nodepool configuration, the follow up will be to use it to manage nodepool configuraion in sf config repo.&lt;/li&gt;
&lt;li&gt;We've improved test coverage on keycloak distgit and custom extensions&lt;/li&gt;
&lt;li&gt;We've documented how users can configure gerrit-git-blame plugin through the acl rules in the resource engine&lt;/li&gt;
&lt;li&gt;We re-wrote the SF gerrit replication test that was Flaky&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Mar 04 to Mar 26 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-mar-04-to-mar-26-summary.html" rel="alternate"></link><published>2020-03-26T10:00:00+00:00</published><updated>2020-03-26T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-03-26:/sprint-2020-mar-04-to-mar-26-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on finding a way to configure gerrit plugins at the project level using the resources engine. Turns out the feature was there all along :) it is now documented.&lt;/li&gt;
&lt;li&gt;We implemented support for keycloak in the …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on finding a way to configure gerrit plugins at the project level using the resources engine. Turns out the feature was there all along :) it is now documented.&lt;/li&gt;
&lt;li&gt;We implemented support for keycloak in the repoxplorer GUI.&lt;/li&gt;
&lt;li&gt;We've identified some problems with keycloak 9.0 (custom mapper for github is broken, keycloak does not start on centos image used in our CI)&lt;/li&gt;
&lt;li&gt;We fixed quite a few minor issue in sf-config, discovered when doing the migration&lt;/li&gt;
&lt;li&gt;We worked on a zuul-images-jobs proof of concept&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Feb 12 to Mar 04 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-feb-12-to-mar-04-summary.html" rel="alternate"></link><published>2020-03-04T10:00:00+00:00</published><updated>2020-03-04T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-03-04:/sprint-2020-feb-12-to-mar-04-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We found a security issue in Zuul: &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-security-fix-add-host.html"&gt;https://www.softwarefactory-project.io/zuul-security-fix-add-host.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on integrating the zuul-registry into the zuul-operator&lt;/li&gt;
&lt;li&gt;We participated in the Zuul User Survey design&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added port-forward to k1s service …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We found a security issue in Zuul: &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-security-fix-add-host.html"&gt;https://www.softwarefactory-project.io/zuul-security-fix-add-host.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on integrating the zuul-registry into the zuul-operator&lt;/li&gt;
&lt;li&gt;We participated in the Zuul User Survey design&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added port-forward to k1s service to implement zuul console stream from pod&lt;/li&gt;
&lt;li&gt;We tested clean-check removal from zuul pipeline with good success&lt;/li&gt;
&lt;li&gt;We've continued to work on keycloak integration, replacement for SF cauth:&lt;ul&gt;
&lt;li&gt;keycloak RPM updated to 9.0.0&lt;/li&gt;
&lt;li&gt;manageSF: the REST API is protected by mod_auth_openidc &amp;amp; the resources engine can fetch a JWT to authenticate on a remote manageSF&lt;/li&gt;
&lt;li&gt;sfmanager: the CLI can fetch a JWT on keycloak &amp;amp; user related commands are deactivated if keycloak is the SSO&lt;/li&gt;
&lt;li&gt;grafana: user login via keycloak&lt;/li&gt;
&lt;li&gt;gerrit: after investigating the REST API auth, I feel the best solution is just to enable the default flow, ie allow users to set API password in settings.&lt;/li&gt;
&lt;li&gt;next steps: repoxplorer integration, SSH keys sync, Zuul GUI, multi tenant deployment support (TBD)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Security Fix Add Host</title><link href="https://www.softwarefactory-project.io/zuul-security-fix-add-host.html" rel="alternate"></link><published>2020-02-27T00:00:00+00:00</published><updated>2020-02-27T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2020-02-27:/zuul-security-fix-add-host.html</id><summary type="html">&lt;p&gt;A new Zuul version has been added to the SF-3.3 and SF-3.4 to address
a security issue: &lt;a class="reference external" href="https://review.opendev.org/710287"&gt;https://review.opendev.org/710287&lt;/a&gt;.
To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the
install-server. Alternatively, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y *zuul*&amp;quot;&lt;/span&gt; install-server:zuul-scheduler:zuul-merger …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A new Zuul version has been added to the SF-3.3 and SF-3.4 to address
a security issue: &lt;a class="reference external" href="https://review.opendev.org/710287"&gt;https://review.opendev.org/710287&lt;/a&gt;.
To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the
install-server. Alternatively, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y *zuul*&amp;quot;&lt;/span&gt; install-server:zuul-scheduler:zuul-merger:zuul-executor
ansible-playbook /var/lib/software-factory/ansible/zuul_restart.yml
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Jan 22 to Feb 12 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-jan-22-to-feb-12-summary.html" rel="alternate"></link><published>2020-02-12T10:00:00+00:00</published><updated>2020-02-12T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-02-12:/sprint-2020-jan-22-to-feb-12-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We discussed zuul-operator implementation with upstream and finally agree on: &lt;a class="reference external" href="https://review.opendev.org/#/c/705535/3/CONTRIBUTE.md"&gt;https://review.opendev.org/#/c/705535/3/CONTRIBUTE.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on making zuul-jobs compatible with kubectl connection&lt;/li&gt;
&lt;li&gt;We had improvements to the openidconnect driver merged&lt;/li&gt;
&lt;li&gt;We worked …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;div class="section" id="opendev"&gt;
&lt;h2&gt;opendev&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We discussed zuul-operator implementation with upstream and finally agree on: &lt;a class="reference external" href="https://review.opendev.org/#/c/705535/3/CONTRIBUTE.md"&gt;https://review.opendev.org/#/c/705535/3/CONTRIBUTE.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on making zuul-jobs compatible with kubectl connection&lt;/li&gt;
&lt;li&gt;We had improvements to the openidconnect driver merged&lt;/li&gt;
&lt;li&gt;We worked on adding templating in the admin rules: the keyword {TENANT} can be used in rules definitions and replaced by the context's tenant when checking authZ rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory"&gt;
&lt;h2&gt;Software Factory&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;we worked on preparing managesf for integration with keycloak:&lt;/li&gt;
&lt;li&gt;we removed all old code related to Storyboard&lt;/li&gt;
&lt;li&gt;we investigated mod_auth_openidc&lt;/li&gt;
&lt;li&gt;we've packaged yaml-cpp since this dependency was missing after discarding ROD's openstack repositories&lt;/li&gt;
&lt;li&gt;we're preparing managesf for a seamless switch from cauth to keycloak&lt;/li&gt;
&lt;li&gt;we discussed sf-3.5 roadmap to better integrate with the new sf-infra system as well as an eventual sf-operator&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2020 Jan 02 to Jan 22 summary</title><link href="https://www.softwarefactory-project.io/sprint-2020-jan-02-to-jan-22-summary.html" rel="alternate"></link><published>2020-01-22T10:00:00+00:00</published><updated>2020-01-22T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2020-01-22:/sprint-2020-jan-02-to-jan-22-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We discussed the next steps for the upstream zuul operator, notes are: &lt;a class="reference external" href="https://etherpad.openstack.org/p/zuul-operator-dhall"&gt;https://etherpad.openstack.org/p/zuul-operator-dhall&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;We reviewed the zuul/zuul-heml charts (Golang based templates for CRDs).&lt;/li&gt;
&lt;li&gt;We participated in …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We discussed the next steps for the upstream zuul operator, notes are: &lt;a class="reference external" href="https://etherpad.openstack.org/p/zuul-operator-dhall"&gt;https://etherpad.openstack.org/p/zuul-operator-dhall&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;We reviewed the zuul/zuul-heml charts (Golang based templates for CRDs).&lt;/li&gt;
&lt;li&gt;We participated in the zuul documentation refactor using the django 4 sections structure and we proposed the Hand's On Zuul blog post series as user tutorials.&lt;/li&gt;
&lt;li&gt;We improved the OIDC auth driver in Zuul to support well-known config, and expose the drivers' configurations through the REST API so it can be consumed by the web client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added a new cloud-centos-8 label using the official CentOS 8 cloud image and virt-customize.&lt;/li&gt;
&lt;li&gt;We worked on migrating the sf-project.io control plane to a new provider.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Nov 20 to Dec 18 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-nov-20-to-dec-18-summary.html" rel="alternate"></link><published>2019-12-18T10:00:00+00:00</published><updated>2019-12-18T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-12-18:/sprint-2019-nov-20-to-dec-18-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gitlab driver implemented the Note event (recheck) &lt;a class="reference external" href="https://review.opendev.org/#/c/698964/"&gt;https://review.opendev.org/#/c/698964/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basic support for oidc in the zuul react app o/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on ci-tracer improvements to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gitlab driver implemented the Note event (recheck) &lt;a class="reference external" href="https://review.opendev.org/#/c/698964/"&gt;https://review.opendev.org/#/c/698964/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basic support for oidc in the zuul react app o/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on ci-tracer improvements to support CentOS 8 and display more metrics such as memory page count variation per process.&lt;/li&gt;
&lt;li&gt;We finish the migration from SCL and RDO build requirements to pure CentOS 7 packages.&lt;/li&gt;
&lt;li&gt;We finalized the sf-3.4 release and upgrade sf-project.io tenants.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Oct 30 to Nov 20 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-oct-30-to-nov-20-summary.html" rel="alternate"></link><published>2019-11-20T10:00:00+00:00</published><updated>2019-11-20T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-11-20:/sprint-2019-oct-30-to-nov-20-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed changes to zuul and nodepool&lt;/li&gt;
&lt;li&gt;We updated the proposal to add prometheus metrics to zuul&lt;/li&gt;
&lt;li&gt;Shanghai PTG, see &lt;a class="reference external" href="https://etherpad.openstack.org/p/OpenDev-Shanghai-PTG-2019#63"&gt;https://etherpad.openstack.org/p/OpenDev-Shanghai-PTG-2019#63&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implemented a simple reporter for …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed changes to zuul and nodepool&lt;/li&gt;
&lt;li&gt;We updated the proposal to add prometheus metrics to zuul&lt;/li&gt;
&lt;li&gt;Shanghai PTG, see &lt;a class="reference external" href="https://etherpad.openstack.org/p/OpenDev-Shanghai-PTG-2019#63"&gt;https://etherpad.openstack.org/p/OpenDev-Shanghai-PTG-2019#63&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implemented a simple reporter for the Gitlab driver &lt;a class="reference external" href="https://review.opendev.org/694346"&gt;https://review.opendev.org/694346&lt;/a&gt; &lt;a class="reference external" href="https://gitlab.com/fabien.dot.boucher/demo-zuul/merge_requests/7#note_244782493"&gt;https://gitlab.com/fabien.dot.boucher/demo-zuul/merge_requests/7#note_244782493&lt;/a&gt; o/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We now use rhel-7-server-openstack-14-rpms repo for rhel ci jobs instead rdo repo.&lt;/li&gt;
&lt;li&gt;We migrated most of the component to python3&lt;/li&gt;
&lt;li&gt;We added an option to run multiple nodepool-launcher&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Using eBPF programs to profile Zuul CI builds</title><link href="https://www.softwarefactory-project.io/using-ebpf-programs-to-profile-zuul-ci-builds.html" rel="alternate"></link><published>2019-11-07T00:00:00+00:00</published><updated>2019-11-07T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2019-11-07:/using-ebpf-programs-to-profile-zuul-ci-builds.html</id><summary type="html">&lt;p&gt;This article introduces a new role named &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/"&gt;ci-tracer&lt;/a&gt; which leverages BPF technology
to profile &lt;a class="reference external" href="https://zuul-ci.org/"&gt;Zuul CI&lt;/a&gt; jobs and gain new insights over builds' performance.&lt;/p&gt;
&lt;div class="section" id="the-extended-berkeley-packet-filter"&gt;
&lt;h2&gt;The Extended Berkeley Packet Filter&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Berkeley_Packet_Filter"&gt;BPF&lt;/a&gt; virtual machine is a general purpose RISC instruction set that
can interpret custom programs which are loaded from the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This article introduces a new role named &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/"&gt;ci-tracer&lt;/a&gt; which leverages BPF technology
to profile &lt;a class="reference external" href="https://zuul-ci.org/"&gt;Zuul CI&lt;/a&gt; jobs and gain new insights over builds' performance.&lt;/p&gt;
&lt;div class="section" id="the-extended-berkeley-packet-filter"&gt;
&lt;h2&gt;The Extended Berkeley Packet Filter&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Berkeley_Packet_Filter"&gt;BPF&lt;/a&gt; virtual machine is a general purpose RISC instruction set that
can interpret custom programs which are loaded from the user space.
While it was originally designed for network packet processing,
the Linux kernel implements an extended version, named &lt;a class="reference external" href="https://www.kernel.org/doc/html/latest/bpf/"&gt;eBPF&lt;/a&gt;, that can be
used to safely attach programs to various tracepoints and inspect kernel data structures.
If you are running a modern Linux system, chances are you already use BPF programs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# List running BPF programs&lt;/span&gt;
$ sudo ls -l /proc/*/fd &lt;span class="p"&gt;|&lt;/span&gt; grep bpf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the purpose of this article we are only going to use the &lt;strong&gt;TRACEPOINT&lt;/strong&gt; and &lt;strong&gt;KPROBE&lt;/strong&gt; types of programs.
Other types of programs are currently being used for all sorts of things, such as, the new
CgroupV2 which implements an eBPF based device controller.&lt;/p&gt;
&lt;p&gt;While the BPF bytecode can be written by hand and loaded manually, we are going to use the &lt;a class="reference external" href="https://github.com/iovisor/bcc"&gt;BCC&lt;/a&gt;
toolkit to implement the &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/"&gt;ci-tracer&lt;/a&gt; role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bcc-bpf-compiler-and-python-frontend"&gt;
&lt;h2&gt;BCC: BPF Compiler And Python Frontend&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/iovisor/bcc"&gt;BCC&lt;/a&gt; project provides an easy to use toolkit to load BPF programs using
Python and a C wrapper around LLVM. It comes with ready-to-use examples to get started,
for example, &lt;a class="reference external" href="https://github.com/iovisor/bcc/blob/master/tools/cpudist.py"&gt;cpudist&lt;/a&gt; can show the cpu time distribution of every processes running on a system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo /usr/share/bcc/tools/cpudist -P &lt;span class="m"&gt;5&lt;/span&gt;
Tracing on-CPU time... Hit Ctrl-C to end.

&lt;span class="nv"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;271090&lt;/span&gt; emacs

  usecs               : count     distribution
      &lt;span class="m"&gt;0&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt;          : &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;                                        &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="m"&gt;2&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;3&lt;/span&gt;          : &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;                                        &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="m"&gt;4&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;7&lt;/span&gt;          : &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;                                        &lt;span class="p"&gt;|&lt;/span&gt;
      &lt;span class="m"&gt;8&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;15&lt;/span&gt;         : &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;                                        &lt;span class="p"&gt;|&lt;/span&gt;
     &lt;span class="m"&gt;16&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;31&lt;/span&gt;         : &lt;span class="m"&gt;1&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;********************                    &lt;span class="p"&gt;|&lt;/span&gt;
     &lt;span class="m"&gt;32&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;63&lt;/span&gt;         : &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;                                        &lt;span class="p"&gt;|&lt;/span&gt;
     &lt;span class="m"&gt;64&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;127&lt;/span&gt;        : &lt;span class="m"&gt;2&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;****************************************&lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="m"&gt;128&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;255&lt;/span&gt;        : &lt;span class="m"&gt;2&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;****************************************&lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="m"&gt;256&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;511&lt;/span&gt;        : &lt;span class="m"&gt;1&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;********************                    &lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="m"&gt;512&lt;/span&gt; -&amp;gt; &lt;span class="m"&gt;1023&lt;/span&gt;       : &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &lt;a class="reference external" href="https://github.com/iovisor/bcc/blob/master/tools/cpudist.py"&gt;cpudist&lt;/a&gt; tool works by attaching a kprobe program to the &lt;em&gt;finish_task_switch&lt;/em&gt;
function that gets evaluated each time the kernel switches tasks on a CPU.
The BPF program does the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Record the start time of the next task.&lt;/li&gt;
&lt;li&gt;If it knows when the previous task started, it records how long the task spent on CPU.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Python code only prints the recorded value periodically.&lt;/p&gt;
&lt;p&gt;This is a very efficient process, as the intensive work is running inside the BPF virtual
machine which can interpret the program frequently with minimal overhead. Indeed such a low-level
&lt;em&gt;finish_task_switch&lt;/em&gt; kprobe can be triggered millions of times per second on a busy system.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/"&gt;ci-tracer&lt;/a&gt; implements a custom BPF program to collect fine grained information from &lt;a class="reference external" href="https://zuul-ci.org/"&gt;Zuul CI&lt;/a&gt;
builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-ci-tracer"&gt;
&lt;h2&gt;Introducing ci-tracer&lt;/h2&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://zuul-ci.org/"&gt;Zuul CI&lt;/a&gt; build is composed of Ansible tasks that execute processes on ephemeral test instances.
The &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/"&gt;ci-tracer&lt;/a&gt; is designed to load a custom BPF program in the test instance to gather information
about the processes. This initial implementation collects on-CPU times which this article will discuss
further in the conclusion.&lt;/p&gt;
&lt;p&gt;The implementation is composed of two components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a BPF program &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/src/agent.c"&gt;agent.c&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;a Python service &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/src/agent.py"&gt;agent.py&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's look at the BPF Program.&lt;/p&gt;
&lt;div class="section" id="the-bpf-program"&gt;
&lt;h3&gt;The BPF Program&lt;/h3&gt;
&lt;p&gt;From the kernel point of view, the unit of computing is a &lt;em&gt;task&lt;/em&gt; that is represented by a &lt;em&gt;task_struct&lt;/em&gt;.
A task (also called thread) is assigned an identifier named &lt;em&gt;pid&lt;/em&gt; and multiple tasks can be grouped by a &lt;em&gt;tgid&lt;/em&gt;.
Note that this differs from the user point of view where a &lt;em&gt;pid&lt;/em&gt; is actually a &lt;em&gt;tgid&lt;/em&gt;...
This is confusing when going back and forth between userland and kernelland, thus we will name:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A process is an userland &lt;em&gt;pid&lt;/em&gt;, kernelland &lt;em&gt;tgid&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;A task (or thread) is an userland &lt;em&gt;tid&lt;/em&gt;, kernelland &lt;em&gt;pid&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This initial implementation doesn't collect individual task.
Instead the measurements are grouped by &lt;em&gt;tgid&lt;/em&gt;.&lt;/p&gt;
&lt;div class="section" id="on-cpu-measure"&gt;
&lt;h4&gt;On-CPU Measure&lt;/h4&gt;
&lt;p&gt;Two data structures are used to measure the time each process spent on-cpu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Internal data to record next task start time&lt;/span&gt;
&lt;span class="n"&gt;BPF_HASH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PID_MAX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Shared data of tgid and oncpu time&lt;/span&gt;
&lt;span class="n"&gt;BPF_HASH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oncpus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PID_MAX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the &lt;em&gt;finish_task_switch&lt;/em&gt; probe does the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;finish_task_switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;pt_regs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;task_struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// At this time, prev is not running, next is going to be scheduled&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;u64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cur_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bpf_ktime_get_ns&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tgid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tgid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tgid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;u64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prev_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prev_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// Previous task start time was recorded, compute the time it spent oncpu&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;u64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prev_time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INTERVAL_NS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Per tgid cpu info&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;u64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;oncpu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oncpus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tgid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oncpu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;oncpu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Record time per task group&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;oncpus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tgid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Record the start time of the next task&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;next_pid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bpf_get_current_pid_tgid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;cur_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bpf_ktime_get_ns&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;next_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cur_time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program updates the &lt;em&gt;oncpus&lt;/em&gt; hash table with the processes (userland pid) as key and
the cpu times in nanoseconds as value.&lt;/p&gt;
&lt;p&gt;By the time the Python service reads the &lt;em&gt;oncpus&lt;/em&gt; hash table, the process may have died.
Thus, we use another probe to record the processes information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="execution-event"&gt;
&lt;h4&gt;Execution Event&lt;/h4&gt;
&lt;p&gt;As demonstrated by the BCC &lt;a class="reference external" href="https://github.com/iovisor/bcc/blob/master/tools/execsnoop.py"&gt;execsnoop&lt;/a&gt; tool, we can get new processes information, with a &lt;em&gt;perf&lt;/em&gt; channel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// The exec perf channel&lt;/span&gt;
&lt;span class="n"&gt;BPF_PERF_OUTPUT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;execs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// The type of event sent back to userland&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;execs_perf_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;EVENT_TYPE_INIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;EVENT_TYPE_ARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;EVENT_TYPE_EXEC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;EVENT_TYPE_EXIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;EVENT_TYPE_FORK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// The event structure&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;exec_info_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;execs_perf_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cgroup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ARGSIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we attach multiple probes and tracepoints on the different process lifecycle steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;KPROBE on the clone syscall: when a thread is created (unused at the moment).&lt;/li&gt;
&lt;li&gt;TRACEPOINT_PROBE(sched, sched_process_fork): when a process forks.&lt;/li&gt;
&lt;li&gt;KPROBE on the execve syscall: when a process executes a command.&lt;/li&gt;
&lt;li&gt;KPROBE on the execve ret syscall: when a process succeeds in executing a command.&lt;/li&gt;
&lt;li&gt;TRACEPOINT_PROBE(sched, sched_process_exit): when a process exits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each probe can send process information through the &lt;em&gt;execs&lt;/em&gt; perf channel created earlier,
for example, when a process forks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TRACEPOINT_PROBE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sched&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sched_process_fork&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;exec_info_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EVENT_TYPE_FORK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ppid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;parent_pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cgroup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bpf_get_current_cgroup_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;execs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perf_submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out the &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/src/agent.c"&gt;agent.c&lt;/a&gt; source code to see how the other execve probes are implemented.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/"&gt;ci-tracer&lt;/a&gt; BPF program collects process lifecycle events and the time they spend on-cpu.
Next let's look at the Python service.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-python-service"&gt;
&lt;h3&gt;The Python Service&lt;/h3&gt;
&lt;p&gt;The purpose of the Python service &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/src/agent.py"&gt;agent.py&lt;/a&gt; is to process the information collected by the
BPF program. It is composed of two parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a callback for the &lt;em&gt;execs&lt;/em&gt; perf event, and&lt;/li&gt;
&lt;li&gt;a main loop to read the &lt;em&gt;oncpus&lt;/em&gt; measures.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Its goal is to serialize the measurements so that they can be analyzed after the build is completed.&lt;/p&gt;
&lt;div class="section" id="bpf-to-userland"&gt;
&lt;h4&gt;BPF To Userland&lt;/h4&gt;
&lt;p&gt;The callback is executed each time an &lt;em&gt;execs&lt;/em&gt; perf event occurs, and it keeps track
of the processes information in a dictionary like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Cache pid info&lt;/span&gt;
&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_exec_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Process execs perf event&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EventType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FORK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Copy the parent process info&lt;/span&gt;
            &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ppid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ppid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;

        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Sometime pids are unknown when process clone or events are out of order.&lt;/span&gt;
        &lt;span class="c1"&gt;# It&amp;#39;s ok, we only care about pids that successfully execve.&lt;/span&gt;
        &lt;span class="c1"&gt;# warn(f&amp;quot;Unknown {event.pid} {event.ppid} for {event.type} ({event.arg})&amp;quot;)&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="n"&gt;bpf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach_kprobe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bpf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_syscall_fnname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;execve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fn_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;syscall__execve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bpf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach_kretprobe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bpf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_syscall_fnname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;execve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fn_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;do_ret_sys_execve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bpf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;execs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_perf_buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;handle_exec_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;execs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then main loop is in charge of collecting the &lt;em&gt;oncpus&lt;/em&gt; measures and it generates the
report periodically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;collect_cpu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oncpus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Perf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Perf&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Periodically dump the oncpus content&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cpu_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;interval_sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Clock based sleep to take into account the serialization time below&lt;/span&gt;
        &lt;span class="n"&gt;clock_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interval_sec&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cpu_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;clock_time&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clock_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cpu_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="c1"&gt;# Fast loop to extract oncpus measures&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;oncpus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;1e6&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_cpu&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_cpu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Skip unknown pids&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;oncpus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Serialize events&lt;/span&gt;
        &lt;span class="n"&gt;relnow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cpu_start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt;
        &lt;span class="n"&gt;tl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;ts&amp;quot;: &lt;/span&gt;&lt;span class="si"&gt;%.2f&lt;/span&gt;&lt;span class="s1"&gt;},&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;relnow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;inf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;relnow&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Process started less than .5 second ago&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pids_serialized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Put the pid informations in the report&lt;/span&gt;
                &lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;pids_serialized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;tl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;cpu&amp;quot;: &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;, &amp;quot;v&amp;quot;: &lt;/span&gt;&lt;span class="si"&gt;%.3f&lt;/span&gt;&lt;span class="s1"&gt;},&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bpf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach_kprobe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;finish_task_switch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;finish_task_switch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;collect_cpu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;oncpus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The goal is to prevent overwhelming the report and have a low signal-to-noise ratio
while achieving a minimal overhead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-report-format"&gt;
&lt;h4&gt;The Report Format&lt;/h4&gt;
&lt;p&gt;The service produces a stream of JSON objects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When a new process is measured, its information such as start time,
command line arguments, cgroups, and parents are serialized like so:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;cgr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2624&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user.slice/user-1000.slice/session-55.scope&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;pid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5144&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;ppid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;cg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2624&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/python3 &amp;amp;&amp;amp; sleep 0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;pid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5173&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;ppid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5144&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;cg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2624&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/python3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;pid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5278&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;ppid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5173&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;cg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2624&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/tox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;py37&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Then periodically, the &lt;em&gt;oncpus&lt;/em&gt; measures are dumped like so:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;ts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;111.16&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;cpu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5173&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;41.357&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;cpu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5278&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;169.483&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To save space, all the timestamps are relative to the start time and the measures are in milliseconds.
With such reports, we can now build a visualization:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-data-driven-document-d3js-report"&gt;
&lt;h3&gt;The Data Driven Document (D3js) Report&lt;/h3&gt;
&lt;p&gt;The current report interface looks like this:&lt;/p&gt;
&lt;img alt="None" src="images/ci-tracer-2019-11.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The time serie data points are grouped into a list of processes sorted by total CPU time
and represented as a heatmap.
The &lt;a class="reference external" href="https://d3js.org"&gt;D3js&lt;/a&gt; library provides an efficient framework to render large datasets as it lets
us display each data point without normalizing the data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// dates is a list of Date object created for each &amp;quot;ts&amp;quot; event&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scaleBand&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scaleUtc&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;endDate&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* axis labels, notes, ... */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Each row is a group&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.row&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;svg:g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;row&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Each cpu_event result in a new cell&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.cell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cpu_events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rect&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Redraw sets objects coordinates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;redraw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;bw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rowHeight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;myColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to the &lt;em&gt;scaleUtc&lt;/em&gt; object it is easy to annotate the map with the Ansible task timestamps
and zoom in at particular areas of interest. Check out the code in the &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/ci-tracer/tree/web"&gt;web directory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another interesting visualization is the sunburst where pid hierarchy are displayed on a circle:&lt;/p&gt;
&lt;img alt="None" src="images/ci-tracer-2019-11-sunburst.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This report is from a DLRN rpm build job and it has been produced using this
&lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/16971/"&gt;review&lt;/a&gt; (in the job result click the &lt;em&gt;CiTracer report&lt;/em&gt; link).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using eBPF programs to profile CI jobs let us efficiently compile large amount of data to gain
new perspective on builds' performance.
While this initial version only collects on-CPU times, it accounts for less than 0.1% of the total job
load and it produces about 100KB of data per minute when sampling every seconds.&lt;/p&gt;
&lt;p&gt;However this work is still in early development and the following are priorities:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Better heatmap interface with cgroup navigation.&lt;/li&gt;
&lt;li&gt;Add more kprobes or task_struct data to measure:&lt;ul&gt;
&lt;li&gt;Block devince IO,&lt;/li&gt;
&lt;li&gt;Network traffic,&lt;/li&gt;
&lt;li&gt;Memory pressure,&lt;/li&gt;
&lt;li&gt;Syscalls count, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Update the heatmap to split the cell for each type of measurements.&lt;/li&gt;
&lt;li&gt;Improve Ansible task process collection to get the actual module name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you would like to give this a try or get involved, please reach out by mail or on the
#softwarefactory and #zuul Freenode channels.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Oct 09 to Oct 30 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-oct-09-to-oct-30-summary.html" rel="alternate"></link><published>2019-10-30T10:00:00+00:00</published><updated>2019-10-30T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-10-30:/sprint-2019-oct-09-to-oct-30-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the new zuul-registry project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed an issue we have with sf-ci jobs on rhel, we adapted our roles to ensure rhel repos are used to install …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the new zuul-registry project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed an issue we have with sf-ci jobs on rhel, we adapted our roles to ensure rhel repos are used to install openshift on rhel-7 instead using upstream origin mirror.&lt;/li&gt;
&lt;li&gt;We bumped Zuul and Nodepool.&lt;/li&gt;
&lt;li&gt;We fixed some issues related to the use of the last master of SF due to the Centos 7.7 mess.&lt;/li&gt;
&lt;li&gt;We proposed and merged a solution to get the last rawhide to provision the rawhide Nodepool image &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/config/commit/?id=16cf8900c03e27e39b60d9fea0ec3fbfe6b88587"&gt;https://softwarefactory-project.io/cgit/config/commit/?id=16cf8900c03e27e39b60d9fea0ec3fbfe6b88587&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added Fedora 31 to Nodepool but need a new change as it was the image under the test directory and F31 is now released officially. &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/config/commit/?id=3bf8b0afcd90d4d3ed6c15b4cecf34b379c79c70"&gt;https://softwarefactory-project.io/cgit/config/commit/?id=3bf8b0afcd90d4d3ed6c15b4cecf34b379c79c70&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We started to integrate the virt-customize builder in sf-config.&lt;/li&gt;
&lt;li&gt;We experimented using prometheus for the monitoring.&lt;/li&gt;
&lt;li&gt;We setup node-exporter on the new vexxhost and used linear_prediction to create better alarm about available resources.&lt;/li&gt;
&lt;li&gt;We investigated a custom exporter for journald event.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Sep 18 to Oct 09 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-sep-18-to-oct-09-summary.html" rel="alternate"></link><published>2019-10-09T10:00:00+00:00</published><updated>2019-10-09T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-10-09:/sprint-2019-sep-18-to-oct-09-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pagure Driver, we created some patches on Pagure and Zuul (tag/branch create/delete event support, old rev support + related Zuul patch).&lt;/li&gt;
&lt;li&gt;Pagure Driver, we provided a patch to force the driver …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pagure Driver, we created some patches on Pagure and Zuul (tag/branch create/delete event support, old rev support + related Zuul patch).&lt;/li&gt;
&lt;li&gt;Pagure Driver, we provided a patch to force the driver to fetch a new project connector (api token) from pagure when the one in cache is invalid.&lt;/li&gt;
&lt;li&gt;We boostrapped a Gitlab driver for Zuul (Basic support of Merge Request + Unit test initialized) &lt;a class="reference external" href="https://review.opendev.org/#/q/topic:gitlab+(status:open+OR+status:merged)+project:zuul/zuul"&gt;https://review.opendev.org/#/q/topic:gitlab+(status:open+OR+status:merged)+project:zuul/zuul&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We worked on fixing IPv6 support for glean and fedora.&lt;/li&gt;
&lt;li&gt;We reviewed the zuul-registry changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Demo of the current Keycloak integration.&lt;/li&gt;
&lt;li&gt;We refactored virt-customize Nodepool element in Ansible roles (ex. &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/config/tree/nodepool/elements/virt-customize/fedora-30-cloud.yaml"&gt;https://softwarefactory-project.io/cgit/config/tree/nodepool/elements/virt-customize/fedora-30-cloud.yaml&lt;/a&gt;) and proposed rawhide image.&lt;/li&gt;
&lt;li&gt;We repackaged the SCL rh-python35 to system package using the new python3.6 provided by CentOS. This will simplifies the migration to CentOS8.&lt;/li&gt;
&lt;li&gt;We also worked on removing dependency to RDO by deprecating the storyboard service.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Hands on - part 6 - Cross project dependencies</title><link href="https://www.softwarefactory-project.io/zuul-hands-on-part-6-cross-project-dependencies.html" rel="alternate"></link><published>2019-10-01T00:00:00+00:00</published><updated>2019-10-01T00:00:00+00:00</updated><author><name>Zoltan Caplovi</name></author><id>tag:www.softwarefactory-project.io,2019-10-01:/zuul-hands-on-part-6-cross-project-dependencies.html</id><summary type="html">&lt;p&gt;In this article, we will explain how project dependencies work in Zuul.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The examples and commands that follow are intended to be run on a Software Factory
sandbox where a &lt;strong&gt;demo-repo&lt;/strong&gt; repository exists. You should have such an environment
after following …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, we will explain how project dependencies work in Zuul.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The examples and commands that follow are intended to be run on a Software Factory
sandbox where a &lt;strong&gt;demo-repo&lt;/strong&gt; repository exists. You should have such an environment
after following the previous articles in this series:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To deploy a Software Factory sandbox please read the &lt;a class="reference external" href="https://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;first article of the series&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To create the &lt;strong&gt;demo-repo&lt;/strong&gt; repository, please follow the sections &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#clone-the-config-repository"&gt;Clone the config repository&lt;/a&gt;
and &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#define-the-demo-repo-repository"&gt;Define the demo-repo repository&lt;/a&gt; sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Incidentally, most of the links reference &lt;em&gt;sftests.com&lt;/em&gt; which is the default
domain of the sandbox. Make sure to adapt the links if necessary.&lt;/p&gt;
&lt;p&gt;If you have already deployed a Software Factory sandbox and created a snapshot as
suggested, you can restore this snapshot in order to follow this article on a clean environment.
In that case make sure the virtual machine's time is correct post
restoration. If not fix it by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl stop ntpd&lt;span class="p"&gt;;&lt;/span&gt; ntpd -gq&lt;span class="p"&gt;;&lt;/span&gt; systemctl start ntpd
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-case-for-cross-project-testing"&gt;
&lt;h2&gt;The Case for Cross-Project Testing&lt;/h2&gt;
&lt;p&gt;Software tends to be less and less monolithic, and even before that trend took off
most software projects depended on third party libraries or external frameworks.
Even from an architectural standpoint, it isn't rare to see projects split into
functional subcomponents, like frontends, client libraries, or servers. And with
the advent of containerized applications and micro-services, it becomes more and
more complex to ensure that every cog in the system works well with the other.&lt;/p&gt;
&lt;p&gt;Zuul was designed with dependency testing in mind, and can help a
development team make sure that changes to any subcomponents
won't break the whole project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-s-dependent-pipelines-extended"&gt;
&lt;h2&gt;Zuul's Dependent Pipelines, extended&lt;/h2&gt;
&lt;p&gt;We've introduced the notion of &lt;strong&gt;dependent pipelines&lt;/strong&gt; in Zuul &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-4-the-gate-pipeline.html"&gt;in a previous article of the series&lt;/a&gt;.
It's time to see how it can be used beyond speculative merging on a single project.&lt;/p&gt;
&lt;div class="section" id="shared-workspaces"&gt;
&lt;h3&gt;Shared workspaces&lt;/h3&gt;
&lt;p&gt;Zuul can be configured to incorporate branches (usually master but not necessarily)
of other projects into its workspace for a given job. This can be done with the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;required-projects&lt;/span&gt;&lt;/tt&gt; stanza in a job definition, for example:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-ci&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;The sf ci tests&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;post-run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;playbooks/get-logs.yaml&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;10800&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;required-projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;software-factory/sf-ci&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;software-factory/sfinfo&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;install-server&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;cloud-centos-7&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Whenever the job &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sf-ci&lt;/span&gt;&lt;/tt&gt; is being run, Zuul will also pull the &lt;em&gt;sf-ci&lt;/em&gt; and
&lt;em&gt;sfinfo&lt;/em&gt; projects into the job's workspace. Of course, these projects need to
be known to Zuul through its tenants and projects configuration.&lt;/p&gt;
&lt;p&gt;It is also possible to include other projects known to Zuul with the &amp;quot;&lt;a class="reference internal" href="#depends-on"&gt;Depends-On&lt;/a&gt;&amp;quot;
stanza, as we will explain below. In that case, the jobs must handle the case where
such projects are present in the workspace.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="independent-pipelines"&gt;
&lt;h3&gt;Independent Pipelines&lt;/h3&gt;
&lt;p&gt;When a pipeline is &lt;strong&gt;Independent&lt;/strong&gt;, changes that land in that pipeline are tested
independently from each other, meaning that the tests are not sharing a common
workspace during testing. This is fine when doing preliminary validation, like
in the &lt;strong&gt;check&lt;/strong&gt; pipeline.&lt;/p&gt;
&lt;p&gt;As an example, let's assume three projects A, B, C defined in Zuul; their &lt;strong&gt;check&lt;/strong&gt; and &lt;strong&gt;gate&lt;/strong&gt;
pipelines are configured to execute a job called &lt;em&gt;myjob&lt;/em&gt; which requires A, B and C.&lt;/p&gt;
&lt;p&gt;Let's also assume three patches landing in the check pipeline in the following order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A1 on project A&lt;/li&gt;
&lt;li&gt;B1 on project B&lt;/li&gt;
&lt;li&gt;A2 on project A&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;myjob&lt;/em&gt;'s respective workspaces will be:&lt;/p&gt;
&lt;img alt="None" src="images/independent_pipeline_A2.png" /&gt;
&lt;p&gt;In that case patches are tested independently and the builds can be run in parallel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dependent-pipelines"&gt;
&lt;h3&gt;Dependent Pipelines&lt;/h3&gt;
&lt;p&gt;When a pipeline is &lt;strong&gt;Dependent&lt;/strong&gt;, it means that it can define &lt;strong&gt;queues&lt;/strong&gt; to which
projects can be associated. All the patches of projects that belong to the same queue
are tested together, in their order of landing in the pipeline; it means that
they are included into each new workspace as patches get tested. Typically,
&lt;strong&gt;gate&lt;/strong&gt;-type pipelines should be defined as dependent in order to catch
dependency problems before they get merged.&lt;/p&gt;
&lt;p&gt;Let's now assume projects A, B and C belong to queue &amp;quot;abc&amp;quot; on the gate pipeline.
When patches A1, B1 and A2 land in the gate pipeline in that order, this is what
the respective workspaces for &lt;em&gt;myjob&lt;/em&gt; will look like:&lt;/p&gt;
&lt;img alt="None" src="images/dependent_pipeline_A2.png" /&gt;
&lt;p&gt;A &lt;strong&gt;Dependent&lt;/strong&gt; pipeline will catch any problem introduced by incompatibilities
brought by new patches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="depends-on"&gt;
&lt;h2&gt;Depends-On&lt;/h2&gt;
&lt;p&gt;What if a patch needs an unmerged dependency to pass the check pipeline? This
can happen, for example, when an incoming patch on a client library expects an
implementation of the server API that is still being reviewed. Independent pipelines
allow cross-dependency testing as well by using the &lt;strong&gt;Depends-On&lt;/strong&gt; keyword. By
adding a line like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Depends-On: path/to/patch
&lt;/pre&gt;
&lt;p&gt;In the commit message or the Pull Request's description, you can make Zuul aware
that a patch must be added to the workspace. Of course, this propagates to dependent
pipelines as well.&lt;/p&gt;
&lt;p&gt;This is a very powerful feature that allows developers to work on several components
in parallel, regardless of how fast patches get merged. With any other CI system,
developers would have to wait until the dependency gets merged before they can
get feedback on their patch from the CI!&lt;/p&gt;
&lt;p&gt;Zuul's Depends-On supports GitHub or Pagure Pull Requests URIs, Gerrit review
URIs or Change-IDs, or any other git source defined in Zuul's configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-test-it"&gt;
&lt;h2&gt;Let's test it&lt;/h2&gt;
&lt;p&gt;We will set up two Python projects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;demo-repo, the main project&lt;/li&gt;
&lt;li&gt;demo-lib, a module demo-repo needs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="provision-the-demo-repo-source-code"&gt;
&lt;h3&gt;Provision the demo-repo source code&lt;/h3&gt;
&lt;p&gt;As always, let's start with a fresh version of &lt;strong&gt;demo-repo&lt;/strong&gt;. It is assumed that
this project already exists; if not &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#clone-the-config-repository"&gt;follow the instructions here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Clone &lt;strong&gt;demo-repo&lt;/strong&gt; and provision it with &lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/hoz-4-demo-repo.tgz"&gt;this demo code&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/demo-repo
&lt;span class="nb"&gt;cd&lt;/span&gt; demo-repo
git rm -r *
git review -s &lt;span class="c1"&gt;# Enter admin as username&lt;/span&gt;
tar -xzf /tmp/hoz-4-demo-repo.tgz -C .
git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Initialize demo-repo project&amp;quot;&lt;/span&gt;
git push gerrit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="define-the-demo-lib-repository"&gt;
&lt;h3&gt;Define the demo-lib repository&lt;/h3&gt;
&lt;p&gt;From your host, clone the config repository and configure &lt;strong&gt;git review&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/config
&lt;span class="nb"&gt;cd&lt;/span&gt; config
git review -s  &lt;span class="c1"&gt;# Enter admin as username&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit the &lt;strong&gt;resources/demo-project.yaml&lt;/strong&gt; file to add the &amp;quot;demo-lib&amp;quot; project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Demo project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;source-repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-lib&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;A demo repository&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;acl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-acl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-lib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;A dependency for the demo repository&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;acl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-acl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;acls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-acl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[access &amp;quot;refs/*&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;owner = group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[access &amp;quot;refs/heads/*&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Code-Review = -2..+2 group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Code-Review = -2..+2 group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Verified = -2..+2 group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Workflow = -1..+1 group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Workflow = -1..+1 group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Workflow = -1..+0 group Registered Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;submit = group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group Registered Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[access &amp;quot;refs/meta/config&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group Registered Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[receive]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;requireChangeId = true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[submit]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;mergeContent = false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;action = merge if necessary&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;strong&gt;git review&lt;/strong&gt; to send the patch on Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add resources/demo-project.yaml
git commit -m&lt;span class="s2"&gt;&amp;quot;Add demo-lib repo&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As admin, approve the patch on sftests.com's Gerrit UI.&lt;/p&gt;
&lt;p&gt;Once the changes have been applied, clone &lt;strong&gt;demo-lib&lt;/strong&gt; and provision it with &lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/hoz-7-demolib-repo.tgz"&gt;this code&lt;/a&gt; .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/demo-lib
&lt;span class="nb"&gt;cd&lt;/span&gt; demo-lib
git rm -r *
git review -s &lt;span class="c1"&gt;# Enter admin as username&lt;/span&gt;
tar -xzf /tmp/hoz-7-demolib-repo.tgz -C .
git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Initialize demo-lib project&amp;quot;&lt;/span&gt;
git push gerrit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="define-initial-ci-on-the-projects"&gt;
&lt;h3&gt;Define initial CI on the projects&lt;/h3&gt;
&lt;p&gt;We will add some simple tox validation using the Zuul jobs library.&lt;/p&gt;
&lt;p&gt;Create the following .zuul.yaml file in demo-lib and demo-repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each project, commit the file and create a review:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Initialize CI&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure the patches pass the CI, and approve them from Gerrit's UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-the-dependency-relationship-between-demo-lib-and-demo-repo"&gt;
&lt;h3&gt;Add the dependency relationship between demo-lib and demo-repo&lt;/h3&gt;
&lt;p&gt;Let's make the demo-repo project able to import the demolib module. In the
demo-repo project:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Edit &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nose
git+https://sftests.com/r/demo-lib.git
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Edit &lt;tt class="docutils literal"&gt;tox.ini&lt;/tt&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;pep8,py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[testenv]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;-rrequirements.txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;nosetests -v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;setenv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;GIT_SSL_NO_VERIFY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[testenv:pep8]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;flake8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;flake8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Edit &lt;tt class="docutils literal"&gt;hello/hello.py&lt;/tt&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;demolib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit all and create a review:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Import demolib&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure the change passes the CI, and approve it from Gerrit's UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="define-a-dependent-job"&gt;
&lt;h3&gt;Define a dependent job&lt;/h3&gt;
&lt;p&gt;Since we want demo-repo to depend on demo-lib, we want to make sure changes on
demo-lib will not break demo-repo. In our case, that means we want to run the unit
tests with tox on demo-repo whenever a new patch is submitted on demo-repo, &lt;strong&gt;or&lt;/strong&gt;
on demo-lib.&lt;/p&gt;
&lt;p&gt;In order to do this, let's add a new job definition in demo-repo's .zuul.yaml:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-demorepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox test for demo-repo with dependencies&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;required-projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-lib&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;zuul_work_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul.projects[&amp;#39;sftests.com/demo-repo&amp;#39;].src_dir&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-demorepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-demorepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's break the new job down a bit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt;: the job inherits from the existing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;tox-py27&lt;/span&gt;&lt;/tt&gt; job. We can do this
because the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;tox-*&lt;/span&gt;&lt;/tt&gt; jobs from Zuul's library were written with dependency
support in mind; we just have to specify which projects must be in the workspace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;required-projects&lt;/strong&gt;: this is simply the list of projects we must include in
the workspace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vars.zuul_work_dir&lt;/strong&gt;: we override Zuul's working directory, so that the tox
tests are always run for demo-repo regardless of which project triggers this
job. By default, &lt;tt class="docutils literal"&gt;zuul_work_dir&lt;/tt&gt; would be the path to the project for which
the job was triggered. We'll explain the new value below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Commit all, and upload a review:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Add dependent job&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wait until the check pipeline completes, and let's take a closer look at what is
happening. First, let's have a look at the Ansible variables that were set by
Zuul for this job: go to &lt;a class="reference external" href="https://sftests.com/zuul/t/local/builds"&gt;https://sftests.com/zuul/t/local/builds&lt;/a&gt; and click on
the last successful build of tox-demorepo (it should be in the first or second row
of the table), then click the log url and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;zuul-info&lt;/span&gt;&lt;/tt&gt;, then &lt;tt class="docutils literal"&gt;inventory.yaml&lt;/tt&gt;.
Have a look at the &lt;tt class="docutils literal"&gt;zuul&lt;/tt&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;zuul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;_inheritance_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;Job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;base&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;branches:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;None&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;source:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;config/zuul.d/_jobs-base.yaml@master#3&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;Job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;unittests&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;branches:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;None&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;source:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul-jobs/zuul.yaml@master#4&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;Job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tox&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;branches:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;None&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;source:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul-jobs/zuul.yaml@master#15&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;Job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tox-py27&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;branches:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;None&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;source:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul-jobs/zuul.yaml@master#58&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;Job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tox-demorepo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;branches:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;None&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;source:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;demo-repo/.zuul.yaml@master#1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;Job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tox-demorepo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;branches:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;None&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;source:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;demo-repo/.zuul.yaml@master#11&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;fa9996bbdab64e69838d300c8ac0a58d&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;buildset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;75fc274cc856422b92e5ac9f87b1ca7a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;14&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;change_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://sftests.com/r/14&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;child_jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;managesf.sftests.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;14&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;change_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://sftests.com/r/14&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;patchset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;canonical_hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sftests.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;canonical_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sftests.com/demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;short_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;src_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;src/sftests.com/demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-demorepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;jobtags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;QWRkIGRlcGVuZGVudCBqb2IKCkNoYW5nZS1JZDogSTc0MWE5YjU2ZWIzYTcxYWIzNTBmOWU0OTczODgxN2FjZTg0NWM2NDEK&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;patchset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;canonical_hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sftests.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;canonical_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sftests.com/demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;short_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;src_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;src/sftests.com/demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;sftests.com/demo-lib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;canonical_hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sftests.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;canonical_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sftests.com/demo-lib&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-lib&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;short_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-lib&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;src_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;src/sftests.com/demo-lib&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;sftests.com/demo-repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;canonical_hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sftests.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;canonical_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sftests.com/demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;short_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;src_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;src/sftests.com/demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;refs/changes/14/14/1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tenant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;local&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1800&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;voting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;zuul_work_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul.projects[&lt;/span&gt;&lt;span class="se"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;sftests.com/demo-repo&lt;/span&gt;&lt;span class="se"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;].src_dir&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;zuul.projects&lt;/tt&gt; is a dictionary of all the required projects we declared in the
job's definition. For each required project, the path to the checked out code is
in &lt;tt class="docutils literal"&gt;src_dir&lt;/tt&gt;. These variables are available at the job's level, meaning that
you can write your playbooks using these. This should also explain the specific
value we chose for &lt;tt class="docutils literal"&gt;zuul_work_dir&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Finally, make sure the change passes the CI, and approve it from Gerrit's UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-tox-demorepo-to-demo-lib-s-ci"&gt;
&lt;h3&gt;Add tox-demorepo to demo-lib's CI&lt;/h3&gt;
&lt;p&gt;Edit .zuul.yaml in demo-lib:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-demorepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-demorepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that here, we want to keep testing demo-lib as an isolated module; which is
why we're keeping the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;tox-py27&lt;/span&gt;&lt;/tt&gt; job. Also, jobs are shared globally within a
Zuul project, which is why we can reuse tox-demorepo from demo-repo.&lt;/p&gt;
&lt;p&gt;As usual, commit, review and approve on Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Add dependent job in demo-lib CI&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="scenario-1-catch-problems-with-dependencies-early-on"&gt;
&lt;h3&gt;Scenario 1: Catch problems with dependencies early on&lt;/h3&gt;
&lt;p&gt;In this scenario we will create a patch on demo-lib that breaks demo-repo.&lt;/p&gt;
&lt;p&gt;Create a new branch on demo-lib:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout -b uhoh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit demolib/__init__.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello Dana&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit tests/test_demolib.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;demolib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello Dana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit and upload for review:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;No Zuul, only Dana&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wait a few minutes, and you should see the following CI results from the check
pipeline:&lt;/p&gt;
&lt;img alt="None" src="images/hoz-7-breaking-dependency.png" /&gt;
&lt;p&gt;Even though this patch passes demo-lib's unit tests, we can see with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;tox-demorepo&lt;/span&gt;&lt;/tt&gt;
that this patch would break demo-repo at the current state of the master branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scenario-2-using-depends-on"&gt;
&lt;h3&gt;Scenario 2: using Depends-On&lt;/h3&gt;
&lt;p&gt;In this scenario we will create a patch on demo-repo that requires another patch
on demo-lib.&lt;/p&gt;
&lt;p&gt;First, let's add a function to demo-lib. Create a new branch on the demo-lib
repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout master &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git pull origin master &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout -b goodbye
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit demolib/__init__.py:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello Zuul&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bye Zuul&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Commit and upload for review:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Bye Zuul&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We won't merge this yet. But take note of the URL of the patch in Gerrit; it
should be something like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://sftests.com/r/#/c/{patch_number}&lt;/span&gt;&lt;/tt&gt; (in my case it is
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://sftests.com/r/#/c/17&lt;/span&gt;&lt;/tt&gt; )&lt;/p&gt;
&lt;p&gt;Now let's create a patch in demo-repo to use our new function. Create a new
branch on demo-repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout master &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git pull origin master &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout -b goodbye
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit hello/hello.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;demolib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;goodbye&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit and upload for review:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Bye Zuul&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The check pipeline will return a failure, since we're using a version of
demo-lib that wasn't merged yet. Indeed, in the logs for the tox-demorepo job,
we see:&lt;/p&gt;
&lt;img alt="None" src="images/hoz-7-importError.png" /&gt;
&lt;p&gt;Let's amend our commit message to specify the unmerged dependency we need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git commit --amend
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add the line &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Depends-On:&lt;/span&gt; &lt;span class="pre"&gt;https://sftests.com/r/#/c/{patch_number}&lt;/span&gt;&lt;/tt&gt; to the commit
message, where {patch_number} is the number of the unmerged patch on demo-lib.&lt;/p&gt;
&lt;p&gt;Upload for review:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The check pipeline will show the dependency:&lt;/p&gt;
&lt;img alt="None" src="images/hoz-7-check-Depends-On.gif" /&gt;
&lt;p&gt;This time the tests pass; we effectively managed to validate a change before its
dependency was merged.&lt;/p&gt;
&lt;p&gt;As exercises left to the reader:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;try and see what happens when you attempt to approve the patch on demo-repo
without approving the dependency on demo-lib first;&lt;/li&gt;
&lt;li&gt;approve the patch on demo-lib then the one on demo-repo in rapid succession,
and observe the gate pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article we've learned how Zuul can handle dependencies between projects,
so that side effects can be detected early. It can also be used to speed up the
development of features, as patches can use unmerged dependencies in their
workspace.&lt;/p&gt;
&lt;p&gt;In a nutshell:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dependencies can be declared at job level with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;required-projects&lt;/span&gt;&lt;/tt&gt; directive.&lt;/li&gt;
&lt;li&gt;You can also explicitly declare a dependency with the &lt;strong&gt;Depends-On&lt;/strong&gt; magic keyword
in the commit message, or the Pull Request description.&lt;/li&gt;
&lt;li&gt;Zuul provides an ansible variable called &lt;tt class="docutils literal"&gt;zuul.projects&lt;/tt&gt; with information about
the dependencies that are checked out by Zuul. That variable can be used in your
jobs playbooks to perform actions on dependencies (installation, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should know enough by now to set up your own dependency-aware CI with Zuul.
So happy testing !&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>Delegating maintenance actions with Zuul - part 2</title><link href="https://www.softwarefactory-project.io/delegating-maintenance-actions-with-zuul-part-2.html" rel="alternate"></link><published>2019-09-24T00:00:00+00:00</published><updated>2019-09-24T00:00:00+00:00</updated><author><name>Matthieu Huin</name></author><id>tag:www.softwarefactory-project.io,2019-09-24:/delegating-maintenance-actions-with-zuul-part-2.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://zuul-ci.org"&gt;Zuul's&lt;/a&gt; CLI Client provides several actions that can help
debugging kinks along its integration pipelines. These actions were until now only
available to operators of a Zuul deployment, meaning that project members were
dependent on the availability of an operator to help them sort problems out. I
have been working …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://zuul-ci.org"&gt;Zuul's&lt;/a&gt; CLI Client provides several actions that can help
debugging kinks along its integration pipelines. These actions were until now only
available to operators of a Zuul deployment, meaning that project members were
dependent on the availability of an operator to help them sort problems out. I
have been working on scoping these actions to tenants, with support for
authentication and authorization within Zuul itself. This means that operators
can now delegate the ability to perform these actions temporarily as they see fit.&lt;/p&gt;
&lt;p&gt;This series of articles will explain how these tenant-scoped actions work, and
how to set up a Zuul deployment to delegate these actions.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://www.softwarefactory-project.io/delegating-maintenance-actions-with-zuul-part-1.html"&gt;part 1&lt;/a&gt; we introduced
the &lt;a class="reference external" href="https://jwt.io/introduction/"&gt;JWT standard&lt;/a&gt; and described the simplest way to
get started with delegating maintenance actions. Let's expand on this with a
closer look at Zuul's access rules.&lt;/p&gt;
&lt;div class="section" id="jwt-and-claims"&gt;
&lt;h2&gt;JWT and Claims&lt;/h2&gt;
&lt;p&gt;As we saw in part 1, a requirement of the JWT standard is that the contents of a token
be signed. JWTs can be issued by a trusted service like an identity provider,
and then consumed safely by other services such as Zuul, as long as the signature
can be verified.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The JWT standard requires signing the payload, but that doesn't mean that the
data is encrypted. Actually, anybody with access to the token can read its
payload, as it is simply base64-encoded. No sensitive data should be carried
in a JWT.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The payload of a JWT can be set to anything we want, except for a few standard claims.
This means a JWT can hold specific information about its bearer
such as a username, email address or phone numbers; or attributes and properties
such as groups, resources ownership, or roles within an organization.&lt;/p&gt;
&lt;p&gt;By setting access rules, an operator can ensure that tenant-scoped
maintenance actions are allowed only for token bearers where the token's claims
verify a specific set of conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-s-access-rules"&gt;
&lt;h2&gt;Zuul's Access Rules&lt;/h2&gt;
&lt;p&gt;Access rules, as they are defined in &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/admin/tenants.html#admin-rule-definition"&gt;Zuul's manual&lt;/a&gt;,
are &amp;quot;a set of conditions the claims of a JWT must match in order to be allowed
to perform protected actions at a tenant's level&amp;quot;. These rules are described as
YAML objects and must be set in Zuul's tenant configuration file.&lt;/p&gt;
&lt;p&gt;Here's what a rule definition looks like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- admin-rule:
    name: first_rule_of_fight_club
    conditions:
      - speak: false
&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;name&lt;/strong&gt; is used for later reference to the rule in the tenant configuration.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;conditions&lt;/strong&gt; is a list of, unsurprisingly, conditions on some claims in the
JWT. They're written in the form &lt;em&gt;&amp;lt;claim name&amp;gt;&lt;/em&gt;: &lt;em&gt;&amp;lt;claim value&amp;gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Depending on the type of the claim in the JWT (list or string), Zuul's
authorization engine will treat the condition as either &amp;quot;membership&amp;quot; (list) or
&amp;quot;strict equality&amp;quot; (string).&lt;/p&gt;
&lt;div class="section" id="advanced-rules"&gt;
&lt;h3&gt;Advanced Rules&lt;/h3&gt;
&lt;p&gt;Some JWTs can have complex structures such as nested dictionaries. Zuul's
authorization engine can match these by using the XPath format, for example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- admin-rule:
    name: example_of_xpath_rule
    conditions:
       - resources_access.account.roles: admin
&lt;/pre&gt;
&lt;p&gt;will match successfully on the following complex JWT payload:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
{
 'iss': 'columbia_university',
 'aud': 'my_zuul_deployment',
 'exp': 1234567890,
 'iat': 1234556780,
 'sub': 'venkman',
 'resources_access': {
     'account': {
         'roles': ['ghostbuster', 'admin']
     }
   },
}
&lt;/pre&gt;
&lt;p&gt;Basic boolean operations on conditions is supported as well:&lt;/p&gt;
&lt;div class="section" id="and"&gt;
&lt;h4&gt;AND&lt;/h4&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- admin-rule:
    name: AND_RULE
    conditions:
      - iss: my_issuer
        myclaim: myvalue
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="or"&gt;
&lt;h4&gt;OR&lt;/h4&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- admin-rule:
    name: OR_RULE
    conditions:
      - iss: my_issuer
      - myclaim: myvalue
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-uid"&gt;
&lt;h3&gt;zuul_uid&lt;/h3&gt;
&lt;p&gt;Zuul's authorization engine allows operators to define a special claim called
&lt;strong&gt;zuul_uid&lt;/strong&gt; mapped to an arbitrary claim name of the operator's choosing, by
default the &lt;strong&gt;sub&lt;/strong&gt; claim. This is useful when the service emitting JWTs sets
the sub claim as a hard-to-read user id like a hash; and another, human-friendlier
claim can be used to refer to a user.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-rules-to-a-tenant"&gt;
&lt;h2&gt;Adding Rules to a Tenant&lt;/h2&gt;
&lt;p&gt;Once you are satisfied with your rules, you can assign them to any tenant with
the &lt;strong&gt;admin-rules&lt;/strong&gt; attribute in your tenant configuration:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- tenant:
    name: my-tenant
    admin-rules:
      - rule1
      - rule2
&lt;/pre&gt;
&lt;p&gt;Now when a user tries to use the REST API to trigger a maintenance action on
&lt;em&gt;my-tenant&lt;/em&gt;, she will be allowed to do so if her token matches &lt;em&gt;rule1&lt;/em&gt; or &lt;em&gt;rule2&lt;/em&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;As we mentioned in part 1, authenticators can be configured to allow overriding
a tenant's rules if the &lt;tt class="docutils literal"&gt;allow_authz_override&lt;/tt&gt; option is set to True. In that
case, any JWT with the &lt;tt class="docutils literal"&gt;zuul.admin&lt;/tt&gt; claim set to a given tenant will override
its access rules.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="generating-a-custom-jwt"&gt;
&lt;h2&gt;Generating a custom JWT&lt;/h2&gt;
&lt;p&gt;Now that we can use custom claims for authorization, we need a way to generate
custom JWTs. This can be done in python with the &lt;a class="reference external" href="https://pyjwt.readthedocs.io/en/latest/"&gt;pyjwt library&lt;/a&gt;,
for example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import jwt
import time
token = {'sub': 'user1',
         'iss': 'my_issuer',
         'aud': 'zuul',
         'iat': time.time(),
         'exp': time.time() + 300,
         'my_claim': 'my_value'}
print(jwt.encode(token, 'secret', algorithm='HS256'))
&lt;/pre&gt;
&lt;p&gt;Online resources like &lt;a class="reference external" href="https://jwt.io"&gt;https://jwt.io&lt;/a&gt; are also available to generate, decode and
debug JWTs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article we've seen how to define and use access rules with Zuul. We've also
explained how to generate JWTs with custom claims for use with these rules. In the
next article of this series, we will discuss how to use an identity provider with
Zuul to authenticate and authorize users. Stay tuned!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Aug 29 to Sep 18 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-aug-29-to-sep-18-summary.html" rel="alternate"></link><published>2019-09-23T10:00:00+00:00</published><updated>2019-09-23T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-09-23:/sprint-2019-aug-29-to-sep-18-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on reducing the numbers of diskimages in Nodepool&lt;/li&gt;
&lt;li&gt;We wrote a phoronix Zuul jobs to validate the performance of cloud providers&lt;/li&gt;
&lt;li&gt;We added a third-party jobs to validate multinode roles …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on reducing the numbers of diskimages in Nodepool&lt;/li&gt;
&lt;li&gt;We wrote a phoronix Zuul jobs to validate the performance of cloud providers&lt;/li&gt;
&lt;li&gt;We added a third-party jobs to validate multinode roles with RHEL 8&lt;/li&gt;
&lt;li&gt;We propose fixes to zuul-jobs to support kubectl connections&lt;/li&gt;
&lt;li&gt;We reviewed the autohold-revamp zuul changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated keycloack package to the last 7.0 version&lt;/li&gt;
&lt;li&gt;We enforced gateway configuration on sf.io following goods practices on &lt;a class="reference external" href="https://observatory.mozilla.org/"&gt;https://observatory.mozilla.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We improved ansible performances on sf by getting only minimal facts during ansible runs&lt;/li&gt;
&lt;li&gt;We worked on integrating and deploying k1s to provide podman container as test resources&lt;/li&gt;
&lt;li&gt;We refactored sf CI job templates to simplify test management&lt;/li&gt;
&lt;li&gt;Keycloak integration: good progress, we have an open review for an ansible role to deploy the service, configure github as an IdP, use MariaDB as the backend, a custom theme and also automatically fetching SSH keys from github&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Security Fix</title><link href="https://www.softwarefactory-project.io/zuul-security-fix.html" rel="alternate"></link><published>2019-09-19T00:00:00+00:00</published><updated>2019-09-19T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2019-09-19:/zuul-security-fix.html</id><summary type="html">&lt;p&gt;A new Zuul version has been added to the SF-3.2 and SF-3.3 to address
a security issue. To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the
install-server. Alternatively, to avoid going through CentOS 7.7 packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y rh-python35-zuul*&amp;quot;&lt;/span&gt; install-server …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A new Zuul version has been added to the SF-3.2 and SF-3.3 to address
a security issue. To fix a deployment run &lt;strong&gt;sfconfig --update&lt;/strong&gt; from the
install-server. Alternatively, to avoid going through CentOS 7.7 packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From the install-server&lt;/span&gt;
ansible -m &lt;span class="nb"&gt;command&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;yum update -y rh-python35-zuul*&amp;quot;&lt;/span&gt; install-server:zuul-scheduler:zuul-merger:zuul-executor
ansible-playbook /var/lib/software-factory/ansible/zuul_restart.yml
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>CentOS 7.7 has been released!</title><link href="https://www.softwarefactory-project.io/centos-77-has-been-released.html" rel="alternate"></link><published>2019-09-18T00:00:00+00:00</published><updated>2019-09-18T00:00:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2019-09-18:/centos-77-has-been-released.html</id><summary type="html">&lt;p&gt;The latest version 7.7 of CentOS has been released and some fixes has
been integrated in SF-3.2 and SF-3.3 to properly support this new version.&lt;/p&gt;
&lt;p&gt;Please update the sf-release and sf-config package before doing an update.&lt;/p&gt;
&lt;p&gt;The next version of Software Factory will benefit from the new …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The latest version 7.7 of CentOS has been released and some fixes has
been integrated in SF-3.2 and SF-3.3 to properly support this new version.&lt;/p&gt;
&lt;p&gt;Please update the sf-release and sf-config package before doing an update.&lt;/p&gt;
&lt;p&gt;The next version of Software Factory will benefit from the new python3
system package provided by CentOS which will simplify the migration to
CentOS 8.&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Delegating maintenance actions with Zuul - part 1</title><link href="https://www.softwarefactory-project.io/delegating-maintenance-actions-with-zuul-part-1.html" rel="alternate"></link><published>2019-09-17T00:00:00+00:00</published><updated>2019-09-17T00:00:00+00:00</updated><author><name>Matthieu Huin</name></author><id>tag:www.softwarefactory-project.io,2019-09-17:/delegating-maintenance-actions-with-zuul-part-1.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://zuul-ci.org"&gt;Zuul's&lt;/a&gt; CLI Client provides several actions that can help
debugging kinks along its integration pipelines. These actions were until now only
available to operators of a Zuul deployment, meaning that project members were
dependent on the availability of an operator to help them sort problems out. I
have been working …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://zuul-ci.org"&gt;Zuul's&lt;/a&gt; CLI Client provides several actions that can help
debugging kinks along its integration pipelines. These actions were until now only
available to operators of a Zuul deployment, meaning that project members were
dependent on the availability of an operator to help them sort problems out. I
have been working on scoping these actions to tenants, with support for
authentication and authorization within Zuul itself. This means that operators
can now delegate the ability to perform these actions temporarily as they see fit.&lt;/p&gt;
&lt;p&gt;This series of articles will explain how these tenant-scoped actions work, and
how to set up a Zuul deployment to delegate these actions.&lt;/p&gt;
&lt;div class="section" id="zuul-s-client-toolset"&gt;
&lt;h2&gt;Zuul's Client Toolset&lt;/h2&gt;
&lt;p&gt;Zuul operators can perform maintenance actions thanks to its CLI client. Here is
a non exaustive list of some of the most useful actions available for debugging:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/admin/client.html#dequeue"&gt;dequeue a build set&lt;/a&gt;:
this action lets an operator manually stop a running build. This can be done
when a build is stuck in some form of infinite loop, or is known to be failing
for reasons unrelated to proper testing. This can free precious resources quickly.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/admin/client.html#autohold"&gt;auto-hold a node set&lt;/a&gt;:
when running jobs on volatile resources like containers or virtual machines, usually
Zuul would destroy these resources at the end of the run, regardless of the
results. The &lt;tt class="docutils literal"&gt;autohold&lt;/tt&gt; action notifies Zuul that a node set must be kept on
hold after a job's failure. This will allow an operator to investigate problems
directly on the node set, if these issues are hard to reproduce otherwise.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/admin/client.html#enqueue"&gt;enqueue a build set&lt;/a&gt;:
this action lets an operator manually &amp;quot;replay&amp;quot; a previous build. This is especially
useful when a problem was fixed with a given job, but the trigger that would start
the build anew is hard or impossible to reproduce; for example a build in a
&lt;tt class="docutils literal"&gt;periodic&lt;/tt&gt; pipeline, or a build triggered in a &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; pipeline as a
tag cannot be recreated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="json-web-tokens"&gt;
&lt;h2&gt;JSON Web Tokens&lt;/h2&gt;
&lt;p&gt;Zuul's authentication and authorization rely on the &lt;a class="reference external" href="https://jwt.io/introduction/"&gt;JSON Web Token (JWT)
standard&lt;/a&gt;. This standard defines a way to exchange
information between parties securely and in a lightweight manner, and is also well
suited for consumption by web-based services. The information is shared as a JSON
payload that is signed digitally to protect from data tampering.&lt;/p&gt;
&lt;p&gt;A JWT consists of three parts that are Base64-encoded and separated by dots:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the &lt;strong&gt;header&lt;/strong&gt;, a JSON dictionary stating that the token is a JWT, and which
algorithm was used to sign the payload. The JWT standard supports several
signing algorithms such as HMAC SHA256, and also asymmetrical encryption like
RSA.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;payload&lt;/strong&gt;, a free-form JSON dictionary containing the actual information
to share. Some of the keys in the payload are standard, like &lt;strong&gt;iss&lt;/strong&gt; (the
entity issueing the token), &lt;strong&gt;exp&lt;/strong&gt; (the expiry time of the token) and &lt;strong&gt;aud&lt;/strong&gt;
(the intended recipient of the token). When using JWTs with Zuul, the custom &lt;strong&gt;zuul.admin&lt;/strong&gt;
key can be set to convey information about which tenants the token bearer is
allowed to perform maintenance actions on. In the JWT standard, the key-value
pairs are called &lt;strong&gt;claims&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;signature&lt;/strong&gt; takes the Base64-encoded header and payload, and signs them
using the algorithm in the header and a secret.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the token is only &lt;em&gt;signed&lt;/em&gt;, not &lt;em&gt;encrypted&lt;/em&gt;. The JWT standard is not
meant to hold sensitive information like passwords.&lt;/p&gt;
&lt;p&gt;JWTs are passed to Zuul's REST API as the &amp;quot;Authorization&amp;quot; header.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-an-authenticator-in-zuul"&gt;
&lt;h2&gt;Configuring an authenticator in Zuul&lt;/h2&gt;
&lt;p&gt;Let's configure Zuul so that operators can generate JWTs that can be used to
perform maintenance actions at tenant level. In order to do so, we must first
add an &lt;strong&gt;authenticator&lt;/strong&gt; in Zuul's configuration file:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[auth zuul_operator]
 driver=HS256
 allow_authz_override=true
 realm=zuul.example.com
 client_id=zuul.example.com
 issuer_id=zuul_operator
 secret=NoDanaOnlyZuul
 token_expiry=36000
&lt;/pre&gt;
&lt;p&gt;This snippet, when added to &lt;tt class="docutils literal"&gt;zuul.conf&lt;/tt&gt;, declares an authenticator called
&amp;quot;zuul_operator&amp;quot;. It uses the symmetrical signing algorithm &lt;em&gt;HS256&lt;/em&gt;, where the secret
can be any type of password or passphrase. This is the
simplest way to get started, but it is also possible to use asymmetrical algorithms;
you will however need to generate a pair of RSA keys on your own. For more
information on the different algorithms available and how to configure them, see &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/admin/components.html#driver-specific-attributes"&gt;Zuul's documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;allow_authz_override&lt;/tt&gt; parameter must be set to true, so that operator-generated
tokens can override any pre-existing authorization rules (we'll explain
Zuul's authorization rules in the next article of the series). &lt;tt class="docutils literal"&gt;client_id&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;issuer_id&lt;/tt&gt; are the expected values of the token's &lt;tt class="docutils literal"&gt;aud&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;iss&lt;/tt&gt; claims
respectively. &lt;tt class="docutils literal"&gt;token_expiry&lt;/tt&gt; is an extra, optional security to ensure that tokens cannot
be active for more than that value in seconds after being issued (thus the JWT
must include the &lt;strong&gt;iat&lt;/strong&gt;, or &amp;quot;issued at&amp;quot;, claim).&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;realm&lt;/tt&gt; parameter is only useful when emitting error messages, when an
incorrect token is presented.&lt;/p&gt;
&lt;p&gt;Once you are done with editing zuul.conf, restart the zuul-web service to load
the authenticator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generating-a-jwt-for-a-user"&gt;
&lt;h2&gt;Generating a JWT for a user&lt;/h2&gt;
&lt;p&gt;An operator can simply generate a token using Zuul's CLI. You only need to specify
the authenticator to use, the scoped tenant, and a user name (for traceability
in logs only, since Zuul does not have a user backend):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ zuul create-auth-token --auth-config zuul_operator --tenant tenantA --user user1
&lt;/pre&gt;
&lt;p&gt;The output is what the &amp;quot;Authorization&amp;quot; header value should be when querying
Zuul's REST API manually; the JWT itself is right after &amp;quot;Bearer&amp;quot;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1NjQ3MDAxNzIuMDQxNzc0MywiZXhwIjoxNTY0NzAwNzcyLjA0MTc3NDMsImlzcyI6Inp1dWxfb3BlcmF0b3IiLCJhdWQiOiJ6dXVsLmV4YW1wbGUuY29tIiwic3ViIjoidXNlcjEiLCJ6dXVsIjp7ImFkbWluIjpbInRlbmFudEEiXX19.l8PMwEWgtgqqm95uSlwFaUXc97pnvow0O4IGangX3OQ
&lt;/pre&gt;
&lt;p&gt;If we &lt;a class="reference external" href="https://jwt.io/#debugger"&gt;decode the token&lt;/a&gt;, this is what we find in
the payload:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
{
 &amp;quot;exp&amp;quot;: 1564701158.2460928,
 &amp;quot;iss&amp;quot;: &amp;quot;zuul_operator&amp;quot;,
 &amp;quot;aud&amp;quot;: &amp;quot;zuul.example.com&amp;quot;,
 &amp;quot;sub&amp;quot;: &amp;quot;user1&amp;quot;,
 &amp;quot;zuul&amp;quot;: {
   &amp;quot;admin&amp;quot;: [
     &amp;quot;tenantA&amp;quot;
   ]
 }
}
&lt;/pre&gt;
&lt;p&gt;The claim &lt;tt class="docutils literal"&gt;zuul.admin&lt;/tt&gt; contains the list of tenants on which maintenance
actions can be performed with this token.&lt;/p&gt;
&lt;p&gt;The token must then be transmitted to the user out-of-band. Note that this is a
bearer token, so anybody can use the JWT to perform actions that will potentially
impact Zuul's regular operations. A good way to mitigate this problem is to
always limit the scope to one single tenant, and to use as short an expiry time
as possible for generated tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-jwt"&gt;
&lt;h2&gt;Using the JWT&lt;/h2&gt;
&lt;p&gt;As a user, there are two ways to consume the JWT once it has been issued:&lt;/p&gt;
&lt;div class="section" id="direct-api-calls"&gt;
&lt;h3&gt;Direct API calls&lt;/h3&gt;
&lt;p&gt;We can use cURL to dequeue the buildset started for tenant &lt;strong&gt;tenantA&lt;/strong&gt;'s project
&lt;strong&gt;org/project1&lt;/strong&gt; from the periodic pipeline:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
JWT=Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1NjQ3MDAxNzIuMDQxNzc0MywiZXhwIjoxNTY0NzAwNzcyLjA0MTc3NDMsImlzcyI6Inp1dWxfb3BlcmF0b3IiLCJhdWQiOiJ6dXVsLmV4YW1wbGUuY29tIiwic3ViIjoidXNlcjEiLCJ6dXVsIjp7ImFkbWluIjpbInRlbmFudEEiXX19.l8PMwEWgtgqqm95uSlwFaUXc97pnvow0O4IGangX3OQ
 curl -X POST -H &amp;quot;Authorization: ${JWT}&amp;quot; \
 -d '{&amp;quot;ref&amp;quot;: &amp;quot;refs/heads/stable&amp;quot;, &amp;quot;pipeline&amp;quot;: &amp;quot;periodic&amp;quot;}' \
 https://zuul.example.com/api/tenant/tenantA/project/org/project1/dequeue
&lt;/pre&gt;
&lt;p&gt;Zuul's REST API's documentation is a work-in-progress, but you can find the latest
prototype of the documentation in the &lt;a class="reference external" href="https://github.com/OAI/OpenAPI-Specification"&gt;OpenAPI&lt;/a&gt;
format &lt;a class="reference external" href="https://review.opendev.org/#/c/674257/"&gt;in this code review&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-cli"&gt;
&lt;h3&gt;Using the CLI&lt;/h3&gt;
&lt;p&gt;Or we can use Zuul's CLI, which is much simpler :) You need to install the CLI
first; you should do so in a virtualenv (see &lt;a class="reference external" href="https://docs.python-guide.org/dev/virtualenvs/"&gt;this documentation&lt;/a&gt;
for example if you need help with that).&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip install zuul
&lt;/pre&gt;
&lt;p&gt;(Note that doing so pulls down the whole zuul project, but it is the only way
at the moment to install the client)&lt;/p&gt;
&lt;p&gt;While it is possible to specify Zuul's base URL and SSL settings through command
line arguments, if you're going to perform maintenance actions more than once it
may be wiser to prepare a configuration file:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[webclient]
 url=https://zuul.example.com
 verify_ssl=true
&lt;/pre&gt;
&lt;p&gt;The only two available options are self-explanatory.&lt;/p&gt;
&lt;p&gt;The previous REST call can be then performed this way with the CLI:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
JWT=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1NjQ3MDAxNzIuMDQxNzc0MywiZXhwIjoxNTY0NzAwNzcyLjA0MTc3NDMsImlzcyI6Inp1dWxfb3BlcmF0b3IiLCJhdWQiOiJ6dXVsLmV4YW1wbGUuY29tIiwic3ViIjoidXNlcjEiLCJ6dXVsIjp7ImFkbWluIjpbInRlbmFudEEiXX19.l8PMwEWgtgqqm95uSlwFaUXc97pnvow0O4IGangX3OQ
zuul -c /path/to/zuul.conf --auth-token $JWT dequeue --tenant tenantA \
--project org/project1 --pipeline periodic --ref refs/head/stable
&lt;/pre&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;You have to remove the &amp;quot;Bearer&amp;quot; part from the token this time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With JWT support, Zuul operators can now easly delegate maintenance actions at tenant
level to others when needed. This article was a short introduction to get operators
started with this new feature, with a minimal setup.&lt;/p&gt;
&lt;p&gt;In the next article, we will expand on this and see how operators can configure
access rules and apply them to tenants, so that access can be filtered through
conditions on JWT claims.&lt;/p&gt;
&lt;p&gt;In the meantime, if you'd like to learn more about the feature, you can refer to
&lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/admin/tenant-scoped-rest-api.html"&gt;Zuul's section of the documentation about the tenant-scoped REST API&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Aug 8 to Aug 28 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-aug-8-to-aug-28-summary.html" rel="alternate"></link><published>2019-09-02T10:00:00+00:00</published><updated>2019-09-02T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-09-02:/sprint-2019-aug-8-to-aug-28-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added multi line selection to Zuul log viewer&lt;/li&gt;
&lt;li&gt;We documented how to test job: &lt;a class="reference external" href="https://review.opendev.org/676424"&gt;https://review.opendev.org/676424&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We documented some of the REST endpoint&lt;/li&gt;
&lt;li&gt;We investigated Prometheus and Node …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added multi line selection to Zuul log viewer&lt;/li&gt;
&lt;li&gt;We documented how to test job: &lt;a class="reference external" href="https://review.opendev.org/676424"&gt;https://review.opendev.org/676424&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We documented some of the REST endpoint&lt;/li&gt;
&lt;li&gt;We investigated Prometheus and Node Exporter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We finalized the move of python-sfmanager to python3&lt;/li&gt;
&lt;li&gt;We finalized the sf-config patch to use managesf configuration for nodepool instead of the previous standalone script&lt;/li&gt;
&lt;li&gt;We packaged and added the last version of Zuul and Nodepool to the sf-3.3 repository&lt;/li&gt;
&lt;li&gt;We worked on enabling the new build page interface&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 July 18 to Aug 7 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-july-18-to-aug-7-summary.html" rel="alternate"></link><published>2019-08-09T10:00:00+00:00</published><updated>2019-08-09T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-08-09:/sprint-2019-july-18-to-aug-7-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We got most of the JWT patch chain merged. The GUI part is going to take some time.&lt;/li&gt;
&lt;li&gt;We added a review documenting the protected REST API in the OpenAPI format. The …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We got most of the JWT patch chain merged. The GUI part is going to take some time.&lt;/li&gt;
&lt;li&gt;We added a review documenting the protected REST API in the OpenAPI format. The formatting could be problematic and might require additional work.&lt;/li&gt;
&lt;li&gt;We helped with integration testing of the zuul-operator upstream.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 June 27 to July 17 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-june-27-to-july-17-summary.html" rel="alternate"></link><published>2019-07-18T10:00:00+00:00</published><updated>2019-07-18T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-07-18:/sprint-2019-june-27-to-july-17-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first few patches in the JWT chain were merged&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We switched managesf to SCL python 3.5&lt;/li&gt;
&lt;li&gt;We started switching sf-manager to SCL python 3.5&lt;/li&gt;
&lt;li&gt;We packaged …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first few patches in the JWT chain were merged&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We switched managesf to SCL python 3.5&lt;/li&gt;
&lt;li&gt;We started switching sf-manager to SCL python 3.5&lt;/li&gt;
&lt;li&gt;We packaged keycloak 6.0.1&lt;/li&gt;
&lt;li&gt;We tuned zookeeper configuration to automatically purge snapshot so save space&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 June 06 to June 26 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-june-06-to-june-26-summary.html" rel="alternate"></link><published>2019-06-28T10:00:00+00:00</published><updated>2019-06-28T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-06-28:/sprint-2019-june-06-to-june-26-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have got the Pagure driver merged in Zuul&lt;/li&gt;
&lt;li&gt;We fixed Zuul to be able to display a start-message on gerrit that redirect to the buildset status page (&lt;a class="reference external" href="https://review.opendev.org/#/q/topic:start-message"&gt;see the change in …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regarding our contributions to Zuul and Nodepool:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have got the Pagure driver merged in Zuul&lt;/li&gt;
&lt;li&gt;We fixed Zuul to be able to display a start-message on gerrit that redirect to the buildset status page (&lt;a class="reference external" href="https://review.opendev.org/#/q/topic:start-message"&gt;see the change in opendev&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;After merging the JWT spec, we worked on addressing comments on the implementation (missing doc and release notes). We're waiting on more validation.&lt;/li&gt;
&lt;li&gt;We started discussion on the mailing list about upgrading ara to 1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regarding Software Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We addressed the dependency issues with installation of some components on RHEL 7 (mock and python-daemon). We added check on sfconfig and provided user documentation for it (see &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/15759/"&gt;change 15759&lt;/a&gt; and &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/15751/"&gt;change 15751&lt;/a&gt; in SF Gerrit)&lt;/li&gt;
&lt;li&gt;We've added managesf nodepool endpoint and now integrating this endpoint on the config check job&lt;/li&gt;
&lt;li&gt;We are working on making managesf py3x only. We've pruned a lot of dead code and are currently working on porting the code and tests to Python 3x.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 May 16 to June 05 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-may-16-to-june-05-summary.html" rel="alternate"></link><published>2019-06-07T10:00:00+00:00</published><updated>2019-06-07T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-06-07:/sprint-2019-may-16-to-june-05-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We improved the webtrigger interface to support multiple pipeline for different nodeset and detect the default branch.&lt;/li&gt;
&lt;li&gt;We helped fixes issues in Zuul CI for the containers and tox-remote jobs.&lt;/li&gt;
&lt;li&gt;We added …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We improved the webtrigger interface to support multiple pipeline for different nodeset and detect the default branch.&lt;/li&gt;
&lt;li&gt;We helped fixes issues in Zuul CI for the containers and tox-remote jobs.&lt;/li&gt;
&lt;li&gt;We added tests to the React scripts bump for Zuul.&lt;/li&gt;
&lt;li&gt;We added a cleanup-run phase to Zuul jobs: &lt;a class="reference external" href="https://review.opendev.org/#/q/topic:cleanup-phase"&gt;https://review.opendev.org/#/q/topic:cleanup-phase&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;We improved the Pagure driver tests to add Cross gerrit/github/pagure tests&lt;/li&gt;
&lt;li&gt;We have updated the Elasticsearch Zuul driver to not by default export vars and exported vars&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued to improve our multi-instances ci job to have a better tests coverage for tenants deployment.&lt;/li&gt;
&lt;li&gt;We prepared SF 3.3 release during the sprint and did a lot of testing around tenants deployment features.&lt;/li&gt;
&lt;li&gt;We upgraded sf-project.io, review.rdoproject.org and ansible.softwarefactory-project.io to SF 3.3 candidate&lt;/li&gt;
&lt;li&gt;We have investigated solution to build SF with distro-jobs on Copr instead of local Mock&lt;/li&gt;
&lt;li&gt;We have investigated further how to replace cauth by Keycloak&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Apr 25 to May 15 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-apr-25-to-may-15-summary.html" rel="alternate"></link><published>2019-05-17T10:00:00+00:00</published><updated>2019-05-17T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-05-17:/sprint-2019-apr-25-to-may-15-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued working on the webtrigger interface&lt;/li&gt;
&lt;li&gt;We have fixed an issue with dequeue-ref &lt;a class="reference external" href="https://review.opendev.org/659110/"&gt;https://review.opendev.org/659110/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started the dicussion about the roadmap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued working on the webtrigger interface&lt;/li&gt;
&lt;li&gt;We have fixed an issue with dequeue-ref &lt;a class="reference external" href="https://review.opendev.org/659110/"&gt;https://review.opendev.org/659110/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started the dicussion about the roadmap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on removing the last few Zuul and Nodepool patches.&lt;/li&gt;
&lt;li&gt;We wrote a patch in sf-config to add the support the pagure driver of Zuul &lt;a class="reference external" href="https://softwarefactory-project.io/r/15442/"&gt;https://softwarefactory-project.io/r/15442/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We created a multinode job to validate multitenants deployment job using sf-ci roles  &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/15558/"&gt;https://softwarefactory-project.io/r/#/c/15558/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have started the release process for SF 3.3, some patches should be merged before we can finalize the release &lt;a class="reference external" href="https://softwarefactory-project.io/etherpad/p/sf_3.3_release"&gt;https://softwarefactory-project.io/etherpad/p/sf_3.3_release&lt;/a&gt; . We also used the new roles in sf-ci to validate upgrade from 3.2 to 3.3.&lt;/li&gt;
&lt;li&gt;We're experimenting with keycloak as a replacement for cauth.&lt;/li&gt;
&lt;li&gt;We helped tripleo-ci investigate a zuul-runner based reproducer: &lt;a class="reference external" href="https://pagure.io/zuul-rdo-reproducer/blob/master/f/run.sh"&gt;https://pagure.io/zuul-rdo-reproducer/blob/master/f/run.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Apr 04 to April 24 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-apr-04-to-april-24-summary.html" rel="alternate"></link><published>2019-04-24T10:00:00+00:00</published><updated>2019-04-24T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-04-24:/sprint-2019-apr-04-to-april-24-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a Docker compose PoC upstream so that people can test out the authN/Z feature. A video was shared on the zuul-discuss ML. &lt;a class="reference external" href="https://softwarefactory-project.io/static/zuul_jwt_demo.mkv"&gt;https://softwarefactory-project.io/static/zuul_jwt_demo.mkv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a Docker compose PoC upstream so that people can test out the authN/Z feature. A video was shared on the zuul-discuss ML. &lt;a class="reference external" href="https://softwarefactory-project.io/static/zuul_jwt_demo.mkv"&gt;https://softwarefactory-project.io/static/zuul_jwt_demo.mkv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We continued the work on the zuul-operator: added rdms and auto-scalling for executor and merger. To improve that implementation, we proposed a  new Ansible module: &lt;a class="reference external" href="https://github.com/ansible/ansible/pull/55029"&gt;https://github.com/ansible/ansible/pull/55029&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added allowed-label restriction to the zuul API: &lt;a class="reference external" href="https://review.opendev.org/653895"&gt;https://review.opendev.org/653895&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Finalized the Zuul/Pagure driver &lt;a class="reference external" href="https://review.opendev.org/604404/"&gt;https://review.opendev.org/604404/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We investigated a sf-operator to deploy gerrit and re-use the zuul-operator by re-using the sfconfig and arch file as the custom resource spec to simplify the migration process.&lt;/li&gt;
&lt;li&gt;We updated the etherpad, disk-image-builder, and zuul version to include a security fix: &lt;a class="reference external" href="https://www.softwarefactory-project.io/software-factory-32-new-zuul-update-for-security-fix.html"&gt;https://www.softwarefactory-project.io/software-factory-32-new-zuul-update-for-security-fix.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We simplified the purge-logs script. The previous version was unable some king of periodic jobs logs.&lt;/li&gt;
&lt;li&gt;We added the local tenant with dedicated SF config repository feature in SF&lt;/li&gt;
&lt;li&gt;We converted all playbooks we use in sf-ci in ansible roles. The next step is to create multinodes/multitenants ci jobs, it will be easier with roles.&lt;/li&gt;
&lt;li&gt;We enforced sshd configuration for ci instances following ssh guidelines &lt;a class="reference external" href="https://infosec.mozilla.org/guidelines/openssh"&gt;https://infosec.mozilla.org/guidelines/openssh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We merged the changes to cauth and sf-config allowing the creation of a JWT for zuul with groups info.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Software Factory 3.2 New Zuul Update For Security Fix</title><link href="https://www.softwarefactory-project.io/software-factory-32-new-zuul-update-for-security-fix.html" rel="alternate"></link><published>2019-04-17T00:00:00+00:00</published><updated>2019-04-17T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2019-04-17:/software-factory-32-new-zuul-update-for-security-fix.html</id><content type="html">&lt;p&gt;The repository has been updated to include a new Zuul version 3.6.1-3
package that includes a security &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/releasenotes.html#security-issues"&gt;fix&lt;/a&gt;. Patch your deployment by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sfconfig --update
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Mar 15 to April 03 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-mar-15-to-april-03-summary.html" rel="alternate"></link><published>2019-04-03T10:00:00+00:00</published><updated>2019-04-03T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-04-03:/sprint-2019-mar-15-to-april-03-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Implemented a Elasticsearch reporter for Zuul &lt;a class="reference external" href="https://review.openstack.org/644927/"&gt;https://review.openstack.org/644927/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Move forward with the Zuul/Pagure driver &lt;a class="reference external" href="https://review.openstack.org/604404/"&gt;https://review.openstack.org/604404/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made good progress on the authentication spec and …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Implemented a Elasticsearch reporter for Zuul &lt;a class="reference external" href="https://review.openstack.org/644927/"&gt;https://review.openstack.org/644927/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Move forward with the Zuul/Pagure driver &lt;a class="reference external" href="https://review.openstack.org/604404/"&gt;https://review.openstack.org/604404/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made good progress on the authentication spec and implementation. We're working on the GUI side, and a demo docker-compose to allow others to play around with the change.&lt;/li&gt;
&lt;li&gt;We continued working on the zuul-runner feature.&lt;/li&gt;
&lt;li&gt;We discussed about Zuul build parameter and implemented a job filter/build button.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We packaged zuul-3.7 with the multi-ansible bundles.&lt;/li&gt;
&lt;li&gt;We investigated how to manage resources update with the supercedent pipeline manager.&lt;/li&gt;
&lt;li&gt;We investigated a zuul-operator.&lt;/li&gt;
&lt;li&gt;Some work on sf-config to handle commit range in managesf resources for config-update and config-check.&lt;/li&gt;
&lt;li&gt;We've made cauth aware of groups. A new &amp;quot;groups&amp;quot; key was added to the authentication cookie. The groups can either be defined in the resources, or mapped from a SAML assertion.&lt;/li&gt;
&lt;li&gt;We worked to improve logstash filtering on SF to use timestamp from logs files instead the one logstash create when it receive message.&lt;/li&gt;
&lt;li&gt;We proposed a submit-logstash role on zuul-jobs to allow users to export jobs' artifacts directly to logstash.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Feb 22 to March 13 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-feb-22-to-march-13-summary.html" rel="alternate"></link><published>2019-03-13T10:00:00+00:00</published><updated>2019-03-13T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-03-13:/sprint-2019-feb-22-to-march-13-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued work on Zuul's tenant-scoped admin REST API.The spec got its first
+1 o/ &lt;a class="reference external" href="https://review.openstack.org/#/c/562321/"&gt;https://review.openstack.org/#/c/562321/&lt;/a&gt;. The patch chain reflects the
latest version of the spec …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued work on Zuul's tenant-scoped admin REST API.The spec got its first
+1 o/ &lt;a class="reference external" href="https://review.openstack.org/#/c/562321/"&gt;https://review.openstack.org/#/c/562321/&lt;/a&gt;. The patch chain reflects the
latest version of the spec: &lt;a class="reference external" href="https://review.openstack.org/#/q/status:open+project:openstack-infra/zuul+branch:master+topic:zuul_admin_web"&gt;https://review.openstack.org/#/q/status:open+project:openstack-infra/zuul+branch:master+topic:zuul_admin_web&lt;/a&gt;.
We added an authorization rules engine. We added an endpoint that returns allowed
actions for an authenticated user, this is meant to be consumed by frontends to
display privileged actions depending on a user's privileges. We're looking into
frontend integration and providing a small docker-compose file that would set up
a keycloak instance so that people can play around with the change.&lt;/li&gt;
&lt;li&gt;We investigate a release_node task to release the nodeset before the end of the
job, but there may be a better way to handle that use-case, like using a
after-post-run for example.&lt;/li&gt;
&lt;li&gt;We updated the webtrigger patch according to upstream comment and removed
the custom parameters.&lt;/li&gt;
&lt;li&gt;We continued to work on the zuul-runner utility and investigated how it can
use nodepool standalone.custom parameters.&lt;/li&gt;
&lt;li&gt;We discussed OpenShift operator and BuildConfig on zuul-discuss.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed issues related to custom deployment mode reported by users (e.g. multinode
deployment without gerrit or greenfield letsencrypt setup)&lt;/li&gt;
&lt;li&gt;We updated the sf-3.2 release repository to include the Zuul security fix.&lt;/li&gt;
&lt;li&gt;The ELK stack bump 5.X patch is almost ready (working in CI) is in the review phase.&lt;/li&gt;
&lt;li&gt;We proposed a change to move the Hound (code search) configurator in managesf/configuration
and add support of externally hosted repository (external gerrit / github).&lt;/li&gt;
&lt;li&gt;We packaged repoxplorer to SCL and integrated that new version in SF.&lt;/li&gt;
&lt;li&gt;We removed support of Elastic 2.X and add support for 5.X and 6.X in repoxplorer.&lt;/li&gt;
&lt;li&gt;We bootstrapped the distrojobs library and tried to took advantage of the new provide/require
capability of Zuul.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Software Factory 3.2 New Update For Zuul Security Fix</title><link href="https://www.softwarefactory-project.io/software-factory-32-new-update-for-zuul-security-fix.html" rel="alternate"></link><published>2019-03-12T00:00:00+00:00</published><updated>2019-03-12T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2019-03-12:/software-factory-32-new-update-for-zuul-security-fix.html</id><content type="html">&lt;p&gt;The Software Factory version 3.2 has been updated to include the
latest Zuul release in order to fix a security issue. Patch your
deployment by running on the install-server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum update -y sf-config &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sfconfig --update
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 Feb 1 to Feb 20 summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-feb-1-to-feb-20-summary.html" rel="alternate"></link><published>2019-02-20T10:00:00+00:00</published><updated>2019-02-20T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-02-20:/sprint-2019-feb-1-to-feb-20-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a URLTrigger driver to Zuul:
&lt;a class="reference external" href="https://review.openstack.org/#/c/635567/"&gt;https://review.openstack.org/#/c/635567/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've updated the JWT auth spec with improved security, and started discussion
about authorization. We've updated the PoC patches …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a URLTrigger driver to Zuul:
&lt;a class="reference external" href="https://review.openstack.org/#/c/635567/"&gt;https://review.openstack.org/#/c/635567/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've updated the JWT auth spec with improved security, and started discussion
about authorization. We've updated the PoC patches and the SF distgit. Because
the patches are not trivial we're waiting on further feedback from upstream
before going further (especially with the authZ mechanics)&lt;/li&gt;
&lt;li&gt;We continued working on zuul-runner to enable running Zuul jobs locally.&lt;/li&gt;
&lt;li&gt;We worked on Zuul webtrigger driver:
&lt;a class="reference external" href="https://review.openstack.org/#/q/topic:webtrigger"&gt;https://review.openstack.org/#/q/topic:webtrigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on a Zuul AMQP trigger driver:
&lt;a class="reference external" href="https://review.openstack.org/#/q/topic:amqp-trigger"&gt;https://review.openstack.org/#/q/topic:amqp-trigger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We prepared zuul and nodepool package update for upcoming release with AWS
driver and some of the tech preview (job hierarchy, urltrigger)&lt;/li&gt;
&lt;li&gt;We fixed managesf usage of the Gerrit rsa key. Now managesf owns its own key.&lt;/li&gt;
&lt;li&gt;We added support for gerrithub on hound and repoxplorer. We also fixed the
welcome page to support gerrithub.&lt;/li&gt;
&lt;li&gt;We continue to work on the ELK stack upgrade.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Gating projects on GitHub using Zuul</title><link href="https://www.softwarefactory-project.io/gating-projects-on-github-using-zuul.html" rel="alternate"></link><published>2019-02-06T00:00:00+00:00</published><updated>2019-02-06T00:00:00+00:00</updated><author><name>Javier Peña</name></author><id>tag:www.softwarefactory-project.io,2019-02-06:/gating-projects-on-github-using-zuul.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Zuul is a very versatile tool for Continuous Integration. When used as part of
a Software Factory deployment, it is configured by default to gate new commits
to the integrated (but optional) Gerrit instance, however it can be configured
to do much more than that.&lt;/p&gt;
&lt;p&gt;In this post, we …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Zuul is a very versatile tool for Continuous Integration. When used as part of
a Software Factory deployment, it is configured by default to gate new commits
to the integrated (but optional) Gerrit instance, however it can be configured
to do much more than that.&lt;/p&gt;
&lt;p&gt;In this post, we will describe how we have configured Zuul to test changes to a
project hosted on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-we-wanted-to-achieve"&gt;
&lt;h2&gt;What we wanted to achieve&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/ceph/ceph-ansible/"&gt;ceph-ansible project&lt;/a&gt; provides a
set of Ansible playbooks for Ceph, the distributed filesystem. These playbooks
are used by a number of projects, including &lt;a class="reference external" href="http://tripleo.org/"&gt;TripleO&lt;/a&gt;,
an OpenStack project aimed at installing, upgrading and operating OpenStack
clouds.&lt;/p&gt;
&lt;p&gt;The ceph-ansible project is hosted on GitHub, and manages development using
pull requests. However, we wanted to make sure that new commits to the project
would not break TripleO deployments. Thus, we needed a way to test incoming
pull requests and check that TripleO would still work with this to-be-merged
change.&lt;/p&gt;
&lt;p&gt;This is where Zuul comes to play. We can configure the Zuul deployment at
&lt;a class="reference external" href="https://review.rdoproject.org"&gt;https://review.rdoproject.org&lt;/a&gt; so it listens to new pull requests created at
GitHub, and runs CI jobs that are already defined there to make sure everything
is still working as expected with TripleO. Finally, Zuul will report the result
in the pull request itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation"&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;These are the steps we followed to set up the integration.&lt;/p&gt;
&lt;div class="section" id="create-the-github-com-connection-in-software-factory"&gt;
&lt;h3&gt;Create the github.com connection in Software Factory&lt;/h3&gt;
&lt;p&gt;From an already setup Software Factory installation, you will need to follow
the steps from &lt;a class="reference external" href="https://softwarefactory-project.io/docs/operator/zuul_operator.html?highlight=github_connections#create-a-github-app"&gt;this guide&lt;/a&gt; to
configure a GitHub connection named &lt;em&gt;github.com&lt;/em&gt;. This connection will allow
Zuul to listen to events from GitHub-hosted repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-the-zuul-configuration-for-the-github-project"&gt;
&lt;h3&gt;Create the Zuul configuration for the GitHub project&lt;/h3&gt;
&lt;p&gt;The second step is to add the ceph-ansible repository to the list of repos
handled by Zuul. We did this by adding the following lines to our &lt;em&gt;zuul/rdo.yaml&lt;/em&gt;
file from the &lt;a class="reference external" href="https://github.com/rdo-infra/review.rdoproject.org-config"&gt;review.rdoproject.org config repo&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;github.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;untrusted-projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Don&amp;#39;t load any in-repo configuration from these projects&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ceph/ceph-ansible&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are using the previously created &lt;em&gt;github.com&lt;/em&gt; connection, and including
ceph/ceph-ansible in the Zuul configuration.&lt;/p&gt;
&lt;p&gt;Note that, while Zuul could import extra configuration from the project (like
additional Zuul pipelines and jobs), we are going to define the configuration
in the global RDO Zuul configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-the-software-factory-github-application-on-the-ceph-ansible-repo"&gt;
&lt;h3&gt;Install the Software Factory GitHub application on the ceph-ansible repo&lt;/h3&gt;
&lt;p&gt;This step has to be applied on the GitHub repo configuration, to provide Zuul
with credentials to interact with the repository. To do so, we followed the steps
from &lt;a class="reference external" href="https://softwarefactory-project.io/docs/user/zuul_user.html#install-a-github-app"&gt;the Software Factory documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-a-zuul-pipeline-and-a-base-no-op-job"&gt;
&lt;h3&gt;Configure a Zuul pipeline and a base no-op job&lt;/h3&gt;
&lt;p&gt;With the previous configuration in place, we are ready to start receiving
information from GitHub pull requests and react to them. For simplicity, we
created a unique &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/admin/quick-start.html?highlight=pipeline#configure-zuul-pipelines"&gt;Zuul pipeline&lt;/a&gt;
to handle GitHub-related jobs. We created the following configuration at
&lt;em&gt;zuul.d/github.yaml&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github-check&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;Newly uploaded patchsets on GitHub enter this pipeline to receive an&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;initial +/-1 Verified vote.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;success-message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build succeeded (check pipeline).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;failure-message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build failed (check pipeline).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;independent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;rdoproject.org&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;current-patchset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;github.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# NOTE(jpena): while the pipeline and jobs are being developed, we only trigger jobs via a keyword&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;#        - event: pull_request&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;#          action:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;#            - opened&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;#            - changed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;#            - reopened&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pull_request&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;comment&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(?i)^\s*(recheck|check-rdo)\s*$&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;github.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pending&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status-url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://review.rdoproject.org/zuul/status&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;github.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;github.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;failure&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We configured the pipeline to react to new pull requests on the &lt;em&gt;github.com&lt;/em&gt;
connection and provide a 'success' or 'failure' message depending on the job
outcome. During the testing phase, we do not want Zuul to send messages to
every pull request with (potentially) meaningless information, so we configured
the pipeline to only trigger jobs when a special keyword was added as a comment.
In this case, it was either &lt;em&gt;recheck&lt;/em&gt; or &lt;em&gt;check-rdo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, we configured a basic, no-op job to test that our configuration
was correct. We did so by adding the following to the &lt;em&gt;zuul.d/projects.yaml&lt;/em&gt;
file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ceph/ceph-ansible&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;github-check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;noop&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are using the previously defined &lt;em&gt;github-check&lt;/em&gt; pipeline, and assigning the
special &lt;em&gt;noop&lt;/em&gt; job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-jobs-manage-branch-differences-between-github-and-software-factory"&gt;
&lt;h3&gt;Create jobs, manage branch differences between GitHub and Software Factory&lt;/h3&gt;
&lt;p&gt;Once the basic integration was tested, we moved on to create some more real
jobs. We found a potential issue related to the different branches used by the
ceph-ansible project and TripleO.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ceph-ansible project has stable-* branches for each release, such as
&lt;em&gt;stable-3.2&lt;/em&gt;, &lt;em&gt;stable-3.1&lt;/em&gt;, etc.&lt;/li&gt;
&lt;li&gt;TripleO, like most OpenStack project, had stable branches using code names,
such as &lt;em&gt;stable/rocky&lt;/em&gt; or &lt;em&gt;stable/queens&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to this, each ceph-ansible branch needs to be tested against
different TripleO branches, so we need to tell Zuul about the branch mapping
in each case. By doing so, we can ensure that each ceph-ansible commit is
tested against the relevant TripleO branches.&lt;/p&gt;
&lt;p&gt;We did this as a two-step process. The first step required additions to the
&lt;a class="reference external" href="https://github.com/rdo-infra/rdo-jobs"&gt;rdo-jobs&lt;/a&gt; repository, which is a
repository containing the Zuul jobs used in our review.rdoproject.org instance.
We added the following to the &lt;em&gt;zuul.d/ceph-ansible.yaml&lt;/em&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tripleo-ceph-integration-master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tripleo-ceph-integration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# branches makes this job run only for master PR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;required-projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# without options, the branch of the PR is used for the required-projects&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git.openstack.org/openstack/tripleo-heat-templates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.com/ceph/ceph-ansible&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tripleo-ceph-integration-rocky&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tripleo-ceph-integration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# this job run only for stable-3.2 PR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stable-3.2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;required-projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git.openstack.org/openstack/tripleo-heat-templates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# using override-checkout, we can map ceph-ansible branch to rdo branch&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;override-checkout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stable/rocky&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.com/ceph/ceph-ansible&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w w-Error"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key elements here are in the &lt;em&gt;tripleo-ceph-integration-rocky&lt;/em&gt; definition:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We specify &lt;em&gt;branches: stable-3.2&lt;/em&gt;, so this job is only executed when we are
testing a change to the stable-3.2 branch of the ceph-ansible repository.&lt;/li&gt;
&lt;li&gt;For the tripleo-heat-templates repository, we use
&lt;em&gt;override-checkout: stable/rocky&lt;/em&gt;. This makes Zuul checkout the stable/rocky
branch of the project to use it when testing the change.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Effectively, this allows us to map branches from GitHub and OpenStack-hosted
repositories, to ensure the required coverage.&lt;/p&gt;
&lt;p&gt;The second step was to use these jobs in the review.rdoproject config
repository. We changed the definition in &lt;em&gt;zuul.d/projects.yaml&lt;/em&gt; to look like
the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ceph/ceph-ansible&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;system-required&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;github-check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tripleo-ceph-integration-master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tripleo-ceph-integration-rocky&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tripleo-ceph-integration-queens&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the change was merged, we can see the integration in action in some test
pull requests, &lt;a class="reference external" href="https://github.com/ceph/ceph-ansible/pull/3398"&gt;like this one&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-thoughts-and-next-steps"&gt;
&lt;h2&gt;Additional thoughts and next steps&lt;/h2&gt;
&lt;p&gt;With the basic integration in place and working for different branches, we can
now move to the next step, and integrate a complete TripleO-based job. This
will allow us to fulfill our initial goal of gating commits to the ceph-ansible
project using TripleO jobs. We can see the start of this work on &lt;a class="reference external" href="https://review.rdoproject.org/r/18734"&gt;this review&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By using the Zuul integration, we can take advantage of some of its advanced
features, like testing cross-project dependencies using the
&lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/user/gating.html?highlight=depends#cross-project-dependencies"&gt;Depends-On&lt;/a&gt; keyword,
or using Zuul not only to check jobs, but also as a gatekeeper to merge
commits all CI jobs are successful.&lt;/p&gt;
&lt;p&gt;Finally, during the test phase the Zuul jobs are only triggered when a specially
crafted message is added to the GitHub PR as a comment. Once jobs are stable,
we will be able to remove this requirement, and trigger jobs for every commit.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>CI/CD workflow offered by Zuul/Nodepool on Software Factory</title><link href="https://www.softwarefactory-project.io/cicd-workflow-offered-by-zuulnodepool-on-software-factory.html" rel="alternate"></link><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2019-01-31:/cicd-workflow-offered-by-zuulnodepool-on-software-factory.html</id><summary type="html">&lt;div class="section" id="high-level-overview-of-software-factory"&gt;
&lt;h2&gt;High level overview of Software Factory&lt;/h2&gt;
&lt;p&gt;Zuul and Nodepool are at the core of Software Factory.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zuul is a job scheduler/runner.&lt;/li&gt;
&lt;li&gt;Nodepool is the node provisioner on which Zuul executes jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Software Factory provides a fully functional Zuul and Nodepool platform out of
the box through default settings and …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="high-level-overview-of-software-factory"&gt;
&lt;h2&gt;High level overview of Software Factory&lt;/h2&gt;
&lt;p&gt;Zuul and Nodepool are at the core of Software Factory.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zuul is a job scheduler/runner.&lt;/li&gt;
&lt;li&gt;Nodepool is the node provisioner on which Zuul executes jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Software Factory provides a fully functional Zuul and Nodepool platform out of
the box through default settings and addionnal (optional) components like
a logserver or an ELK stack. These components are deployed and configured to
efficiently integrate with Zuul and Nodepool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-factory-components"&gt;
&lt;h2&gt;Software Factory components&lt;/h2&gt;
&lt;p&gt;The diagram, below, shows the deployed components as part of Software Factory.
Grey boxes are mandatory components and blue boxes are optional components.&lt;/p&gt;
&lt;img alt="None" src="images/sf-arch.png" /&gt;
&lt;div class="section" id="mandatory-components"&gt;
&lt;h3&gt;Mandatory components&lt;/h3&gt;
&lt;p&gt;These components are essential parts of Software Factory and are installed as
part of every deployment.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Apache: HTTP frontend on top of the APIs and serve WEB UI.&lt;/li&gt;
&lt;li&gt;Zuul: The job scheduler and runner that is used to define and run jobs.&lt;/li&gt;
&lt;li&gt;Nodepool: Zuul's companion pool manager that provides clean
and re-producible node contexts to Zuul for job execution.&lt;/li&gt;
&lt;li&gt;Zookeeper: The distributed database for Zuul and Nodepool.&lt;/li&gt;
&lt;li&gt;MariaDB: SQL database backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="optional-components"&gt;
&lt;h3&gt;Optional components&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gerrit: A git hosting and code review service.&lt;/li&gt;
&lt;li&gt;Logserver: A simple job logs/artifacts storage and publication service.&lt;/li&gt;
&lt;li&gt;ELK: The ElasticSearch, Logstash, Kibana stack. It can be used to
index job's artifacts and search through.&lt;/li&gt;
&lt;li&gt;ARA: Service to create comprehensive html Zuul/Ansible job execution reports.&lt;/li&gt;
&lt;li&gt;Log-analyse: Service to ease anomalies detection on job failures based on
baselines of previous succeeded jobs.&lt;/li&gt;
&lt;li&gt;Code-Search: Service that provides a code search accross git repositories
hosted by Software Factory.&lt;/li&gt;
&lt;li&gt;repoXplorer: Service that provides metrics on code contributions.&lt;/li&gt;
&lt;li&gt;Storyboard: A story/issue tracker.&lt;/li&gt;
&lt;li&gt;cgit: A fast git repositories web browser.&lt;/li&gt;
&lt;li&gt;Grafana/InfluxDB: The stack that provide Software Factory usage metrics.&lt;/li&gt;
&lt;li&gt;Paste: A pastie like service.&lt;/li&gt;
&lt;li&gt;Etherpad: A collaborative editor.&lt;/li&gt;
&lt;li&gt;Mumble: An audio chat service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Software Factory can integrate with existing Code Review systems such as Gerrit
or Github as well as regular Git source code repositories.&lt;/p&gt;
&lt;p&gt;Software Factory relies on a &lt;em&gt;config&lt;/em&gt; git repository
(configuration as code) where configuration is validated and deployed via
Zuul. Two Zuul jobs handle this configuration as code workflow:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;em&gt;config-chek&lt;/em&gt; job ensures the proposed configuration is valid before the
configuration change is merged.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;config-update&lt;/em&gt; job deploys, after review and approval,
the configuration on Software Factory. For instance, a change on the
Nodepool configuration, will be deployed on the Nodepool services
and services will be reload without any operator intervention.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-nodepool"&gt;
&lt;h3&gt;Zuul/Nodepool&lt;/h3&gt;
&lt;div class="section" id="the-architecture"&gt;
&lt;h4&gt;The architecture&lt;/h4&gt;
&lt;p&gt;This diagram shows Zuul and Nodepool's components as well as external
services involved in the architecture.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-nodepool-arch.png" /&gt;
&lt;p&gt;Zuul receives events from code review systems which act as source stimuli
from which Zuul makes job triggering decisions.&lt;/p&gt;
&lt;p&gt;Example events:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pull-Request/Review created,&lt;/li&gt;
&lt;li&gt;Pull-Request/Review updated,&lt;/li&gt;
&lt;li&gt;Pull-Request/Review commented,&lt;/li&gt;
&lt;li&gt;Pull-Request/Review merged,&lt;/li&gt;
&lt;li&gt;Tag created,&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Zuul's scheduler, based on its configuration and the received events,
requests services from other Zuul components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zuul's mergers prepare project(s)'s (to be tested) source code by
rebasing or merging the PR/Code-review X on top of master branch of
the repository.&lt;/li&gt;
&lt;li&gt;Zuul's executors, prepare the Ansible workspace, and run ansible-playbook
against the test node(s).&lt;/li&gt;
&lt;li&gt;The Zuul web service provides the REST API. The API is mainly used by
the Zuul UI to provide jobs execution status and projects configuration
overview.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Gearman bus is the communication channel between Zuul's services.&lt;/p&gt;
&lt;p&gt;Nodepool manages nodes/containers' lifecycle and communicates with the
Zuul scheduler via the Zookeeper service. Zookeeper stores node requests and
statuses. Zuul stores a node request in Zookeeper to acquire a node for a job
execution. Nodepool's launchers look for requests and fullfil them
by spawning a node or a container on the PaaS/CaaS or static node provider.
Nodepool destroys the ephemeral node(s) after the job(s) execution.&lt;/p&gt;
&lt;p&gt;Furthermore, Nodepool is able to build cloud images from a Disk Image Builder
definition. When a new image is created, Nodepool uploads it to each cloud
provider configured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-execution-workflow"&gt;
&lt;h4&gt;Job execution workflow&lt;/h4&gt;
&lt;p&gt;This sequence diagram shows Zuul and Nodepool components involved in
the run of a single job from the trigger stimuli (the Code-Review proposed
patch), to the job result returned to the patch author.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-nodepool-workflow.png" /&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;An event is received (PR/Review created/updated).&lt;/li&gt;
&lt;li&gt;Zuul requests a node from Nodepool in order to execute a job.&lt;/li&gt;
&lt;li&gt;Nodepool reserves an existing one or spawns a new node and notifies
that the node is available.&lt;/li&gt;
&lt;li&gt;Zuul executor runs the job (an Ansible playbook) against the node.&lt;/li&gt;
&lt;li&gt;Zuul releases the node to be deleted.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If multiple jobs are configured to be run, then the scheduler will request
the corresponding amount of nodes to Nodepool. A single job may require
multiple nodes (multi-nodes job), Zuul will fullfil the requirement by
requesting the resources to Nodepool.&lt;/p&gt;
&lt;p&gt;Note that fresh nodes are requested from Nodepool for each job execution. This
ensures an healthy workspace and reduces job flakiness. Furthermore Nodepool
is quota awared then it is capable of notifying Zuul to wait for resources
to become available.&lt;/p&gt;
&lt;p&gt;Now look at how the executor handles a job execution.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-executor-workflow.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zuul executor creates an Ansible workspace with:&lt;ul&gt;
&lt;li&gt;An inventory file&lt;/li&gt;
&lt;li&gt;The playbooks (pre-run, run, post-run)&lt;/li&gt;
&lt;li&gt;Additional roles (pull from git repositories)&lt;/li&gt;
&lt;li&gt;Fetch dependant repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Zuul Ansible runs Ansible playbooks (job phases) isolated in bubblewrap&lt;ul&gt;
&lt;li&gt;pre-run&lt;ul&gt;
&lt;li&gt;push source code on the test node&lt;/li&gt;
&lt;li&gt;validate the test node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;run&lt;ul&gt;
&lt;li&gt;unittest&lt;/li&gt;
&lt;li&gt;functional test&lt;/li&gt;
&lt;li&gt;code style&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;post-run&lt;ul&gt;
&lt;li&gt;build the job ARA report&lt;/li&gt;
&lt;li&gt;export the logs/artifacts to the logserver&lt;/li&gt;
&lt;li&gt;export the logs/artifacts to the ELK stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="architecture-of-zuul-job"&gt;
&lt;h4&gt;Architecture of Zuul job&lt;/h4&gt;
&lt;p&gt;A Zuul job is a YAML definition that describes (non-exhaustive list):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The job name.&lt;/li&gt;
&lt;li&gt;Its parent job.&lt;/li&gt;
&lt;li&gt;The required Ansible roles for the job playbooks.&lt;/li&gt;
&lt;li&gt;The secrets required (if any) (i.e.: passwords/private keys).&lt;/li&gt;
&lt;li&gt;The nodeset, required Nodepool nodes for the job playbooks.&lt;/li&gt;
&lt;li&gt;The pre-run phase: the preparation playbook (if any).&lt;ul&gt;
&lt;li&gt;Any actions that must be performed before the real
job such as installing dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The run phase: the job playbook.&lt;/li&gt;
&lt;li&gt;The post-run phase: the post action playbook.&lt;ul&gt;
&lt;li&gt;Any action that must be performed after the real
job such as artifacts retrieval.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is the Zuul &lt;em&gt;base&lt;/em&gt; job created as part of a standard Software Factory
installation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;null&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;The base job.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pre-run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/base/pre.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;post-run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/base/post.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;zuul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sf-jobs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;zuul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;zuul-jobs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1800&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;attempts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;site_sflogs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;container&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;runc-centos&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pre-run playbook is used to synchronize repository sources to the test node.
The post-run playbook is used to fetch artifacts from the test node,
copy them to the log server and index them into ELK.&lt;/p&gt;
&lt;p&gt;This base job may be simply inherited by any other job.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run tox pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/tox.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This concludes this quick overview of the workflow offered by Zuul and Nodepool
using Software Factory.&lt;/p&gt;
&lt;p&gt;Some useful links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/"&gt;Zuul documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zuul-ci.org/docs/nodepool/"&gt;Nodepool documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.softwarefactory-project.io/docs/3.2/operator/quickstart.html"&gt;Software Factory documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul Hands-On blog post series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software Factory in action on &lt;a class="reference external" href="https://softwarefactory-project.io"&gt;softwarefactory-project.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 11 Jan to 30 Jan summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-11-jan-to-30-jan-summary.html" rel="alternate"></link><published>2019-01-30T10:00:00+00:00</published><updated>2019-01-30T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-01-30:/sprint-2019-11-jan-to-30-jan-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;freeze_job: worked on a new zuul-runner command line to be able to run a job locally.
This rebased and fix the proposed implementation and added the execute sub-command
as well as support …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;freeze_job: worked on a new zuul-runner command line to be able to run a job locally.
This rebased and fix the proposed implementation and added the execute sub-command
as well as support for depends-on: &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:freeze_job"&gt;https://review.openstack.org/#/q/topic:freeze_job&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;parameterized build: started the discussion to be able to run job from the web interface.&lt;/li&gt;
&lt;li&gt;zuul-web: worked on new interfaces to display job's hierarchy, build roles and config.&lt;/li&gt;
&lt;li&gt;zuul-jobs: we proposed a series of guidelines to write jobs, so that multiple environments
(OS flavors, privileges) can be supported &lt;a class="reference external" href="http://logs.openstack.org/07/631507/3/check/tox-docs/971c8fd/html/policy.html#coding-guidelines"&gt;http://logs.openstack.org/07/631507/3/check/tox-docs/971c8fd/html/policy.html#coding-guidelines&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;zuul-jobs: we proposed a change to allow running nodejs zuul-jobs on RPM based systems.&lt;/li&gt;
&lt;li&gt;zuul/pagure driver: proposed two changes (new REST enpoints) on Pagure to ease Zuul
integration &lt;a class="reference external" href="https://pagure.io/pagure/pull-request/4221"&gt;https://pagure.io/pagure/pull-request/4221&lt;/a&gt; and &lt;a class="reference external" href="https://pagure.io/pagure/pull-request/4223"&gt;https://pagure.io/pagure/pull-request/4223&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;blog: proposed a new one about SF/Zuul/Nodepool workflows: &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/14874/"&gt;https://softwarefactory-project.io/r/#/c/14874/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;zuul/nodepool: updated the distgit for a security issue, backport to 3.2 and updated the services.&lt;/li&gt;
&lt;li&gt;cauth: improved the logging to include transaction id.&lt;/li&gt;
&lt;li&gt;started the work on supporting python3 for the rest of the services (cauth, managesf, gerritbot, ...).&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Software Factory 3.2 Updated For Zuul Security Fix</title><link href="https://www.softwarefactory-project.io/software-factory-32-updated-for-zuul-security-fix.html" rel="alternate"></link><published>2019-01-24T00:00:00+00:00</published><updated>2019-01-24T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2019-01-24:/software-factory-32-updated-for-zuul-security-fix.html</id><content type="html">&lt;p&gt;The Software Factory version 3.2 has been updated to include the
latest Zuul release in order to fix a security issue. Patch your
deployment by running &amp;quot;sfconfig --update&amp;quot; on the install-server.&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2019 21 Dec to 09 Jan summary</title><link href="https://www.softwarefactory-project.io/sprint-2019-21-dec-to-09-jan-summary.html" rel="alternate"></link><published>2019-01-09T10:00:00+00:00</published><updated>2019-01-09T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2019-01-09:/sprint-2019-21-dec-to-09-jan-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added upstream testing for upload-to-pypi, and submitted a patch to improve this role's compatibility with devPI: &lt;a class="reference external" href="https://review.openstack.org/#/c/629018/"&gt;https://review.openstack.org/#/c/629018/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We merged Kubernetes and OpenShift support in Zuul.&lt;/li&gt;
&lt;li&gt;We …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added upstream testing for upload-to-pypi, and submitted a patch to improve this role's compatibility with devPI: &lt;a class="reference external" href="https://review.openstack.org/#/c/629018/"&gt;https://review.openstack.org/#/c/629018/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We merged Kubernetes and OpenShift support in Zuul.&lt;/li&gt;
&lt;li&gt;We merged a web-interface refactor to use React-redux store and implemented dispatch action to fetch job-output errors from the build page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on packaging the next version of zuul, lots of patches have been merged upstream.&lt;/li&gt;
&lt;li&gt;We investigated using buildah and podman to run software-factory in a box: &lt;a class="reference external" href="https://www.softwarefactory-project.io/software-factory-container-with-buildah-and-podman.html"&gt;https://www.softwarefactory-project.io/software-factory-container-with-buildah-and-podman.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We documented how to use Zuul with OpenShift: &lt;a class="reference external" href="https://www.softwarefactory-project.io/tech-preview-using-openshift-as-a-resource-provider.html"&gt;https://www.softwarefactory-project.io/tech-preview-using-openshift-as-a-resource-provider.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We reworked cauth logging to add transaction id and better report login success/failure.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Tech Preview: using OpenShift as a resource provider</title><link href="https://www.softwarefactory-project.io/tech-preview-using-openshift-as-a-resource-provider.html" rel="alternate"></link><published>2019-01-07T00:00:00+00:00</published><updated>2019-01-07T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2019-01-07:/tech-preview-using-openshift-as-a-resource-provider.html</id><summary type="html">&lt;p&gt;This post presents a new Tech Preview available in SF version 3.2.
This driver is experimental and shouldn't be used in production as it
is still being developped and reviewed upstream. It is an
&lt;a class="reference external" href="https://review.openstack.org/570667"&gt;implementation&lt;/a&gt;
of the &lt;a class="reference external" href="https://review.openstack.org/560136"&gt;container build resources spec&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="configure-an-openshift-provider"&gt;
&lt;h2&gt;Configure an OpenShift provider&lt;/h2&gt;
&lt;div class="section" id="deploy-a-standalone-service"&gt;
&lt;h3&gt;Deploy a standalone service …&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This post presents a new Tech Preview available in SF version 3.2.
This driver is experimental and shouldn't be used in production as it
is still being developped and reviewed upstream. It is an
&lt;a class="reference external" href="https://review.openstack.org/570667"&gt;implementation&lt;/a&gt;
of the &lt;a class="reference external" href="https://review.openstack.org/560136"&gt;container build resources spec&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="configure-an-openshift-provider"&gt;
&lt;h2&gt;Configure an OpenShift provider&lt;/h2&gt;
&lt;div class="section" id="deploy-a-standalone-service"&gt;
&lt;h3&gt;Deploy a standalone service&lt;/h3&gt;
&lt;p&gt;To deploy an OpenShift cluster locally, you can use the &lt;em&gt;hypervisor-openshift&lt;/em&gt;
component in the arch.yaml file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cluster01&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.0.3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;hypervisor-openshift&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The install-server needs to be able to connect as root and the port 8443 needs
to be available to the nodepool-launcher service.&lt;/p&gt;
&lt;p&gt;After running &lt;strong&gt;sfconfig&lt;/strong&gt;, a new Nodepool configuration file named &amp;quot;_local_hypervisor_openshift.yaml&amp;quot;
is added to the config project to automatically configure the new provider as well as two test
labels: &amp;quot;openshift-project&amp;quot; and &amp;quot;openshift-pod-fedora&amp;quot;.&lt;/p&gt;
&lt;p&gt;Use the &lt;em&gt;extra-labels&lt;/em&gt; option in the config project to add extra images:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /root/config/nodepool/openshift-labels.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-pod-centos&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;min-ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;extra-labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;managed-openshift-cluster01&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;zuul-ci&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-pod-centos&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker.io/centos&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use-an-existing-service"&gt;
&lt;h3&gt;Use an existing service&lt;/h3&gt;
&lt;p&gt;To use an existing OpenShift cluster, you need to install the kube config
file on the install-server at /etc/software-factory/kube.config and update
the sfconfig.yaml with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;nodepool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;kube_config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/software-factory/kube.config&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After running &lt;strong&gt;sfconfig&lt;/strong&gt;, the file is installed on every nodepool-launcher
instance, you can get the context name using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u nodepool oc config get-contexts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then configure a new nodepool provider in the config project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /root/config/nodepool/openshift.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;min-ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-pod-fedora&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;min-ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cluster-name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;nodepool/openshift-example-com:8443/self-provisioner&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;zuul-ci&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-pod-fedora&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker.io/fedora:28&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use the openshift driver, the context needs the self-provisioner role.
If the context doesn't have a self-provisioner role, use the &amp;quot;openshiftpod&amp;quot;
driver instead. This other driver doesn't support label types and only
provide pods to be deployed in the authorized projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="validate-the-new-provider"&gt;
&lt;h3&gt;Validate the new provider&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check the labels are available in the zuul dashboard &lt;em&gt;Labels&lt;/em&gt; page.&lt;/li&gt;
&lt;li&gt;Check the nodepool launcher log for errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="None" src="images/openshift-label.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-new-zuul-nodeset"&gt;
&lt;h2&gt;Create new Zuul nodeset&lt;/h2&gt;
&lt;p&gt;To simplify container job creation, you can define default nodesets, for
example in the sf-jobs project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /root/sf-jobs/zuul.d/nodeset.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;container-project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;container-fedora&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-pod-fedora&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use-a-pod-to-run-job"&gt;
&lt;h2&gt;Use a pod to run job&lt;/h2&gt;
&lt;p&gt;This first example demonstrates the &amp;quot;Containers That Behave Like a Machine&amp;quot;
use-case where a job run on a existing pod with the kubectl connection.
Use the base-openshift-job in a zuul.yaml file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base-openshift-pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;container-fedora&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pod.yaml playbook will run with the pod in the inventory and the
project is already copied to the workspace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python3 demo.py&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul.project.src_dir&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="None" src="images/openshift-job-pod.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="use-a-container-native-job"&gt;
&lt;h2&gt;Use a container native job&lt;/h2&gt;
&lt;p&gt;This second example demonstrates the &amp;quot;Native Container Workflow&amp;quot; use-case
where a job run with an empty project and build a container image with
the speculative git repos.&lt;/p&gt;
&lt;p&gt;Software Factory integrates a base job to create the ImageStream and
deploy a pod that is suitable for a single project. The base_image
job variable let you set the the Source Strategy stream tag to be used
in the Build Config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-native-py36&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base-openshift-native&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;native.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;base_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python:3.6&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The native.yaml playbook will run with a pod built using the speculative
git repos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ls&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python demo.py&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo_output&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;var=demo_output.stdout&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;when&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;not&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;demo_output.stdout&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="None" src="images/openshift-job-native.png" /&gt;
&lt;p&gt;A follow-up blog post will demonstrate more complex scenario using
a custom parent job to deploy custom definitions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Software Factory Container With Buildah And Podman</title><link href="https://www.softwarefactory-project.io/software-factory-container-with-buildah-and-podman.html" rel="alternate"></link><published>2019-01-02T00:00:00+00:00</published><updated>2019-01-02T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2019-01-02:/software-factory-container-with-buildah-and-podman.html</id><summary type="html">&lt;p&gt;This article explains how to run Software Factory in a container with
&lt;a class="reference external" href="https://buildah.io/"&gt;Buildah&lt;/a&gt; and &lt;a class="reference external" href="https://podman.io/"&gt;Podman&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="containerize-software-factory"&gt;
&lt;h2&gt;Containerize Software Factory&lt;/h2&gt;
&lt;p&gt;We are planning on supporting Software Factory deployment on &lt;a class="reference external" href="https://www.okd.io/"&gt;OKD&lt;/a&gt; in the
future, however, we are waiting for a proper cloud-native Zuul service to
mitigate the executor root privilege requirements discussed in …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This article explains how to run Software Factory in a container with
&lt;a class="reference external" href="https://buildah.io/"&gt;Buildah&lt;/a&gt; and &lt;a class="reference external" href="https://podman.io/"&gt;Podman&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="containerize-software-factory"&gt;
&lt;h2&gt;Containerize Software Factory&lt;/h2&gt;
&lt;p&gt;We are planning on supporting Software Factory deployment on &lt;a class="reference external" href="https://www.okd.io/"&gt;OKD&lt;/a&gt; in the
future, however, we are waiting for a proper cloud-native Zuul service to
mitigate the executor root privilege requirements discussed in this &lt;a class="reference external" href="http://lists.zuul-ci.org/pipermail/zuul-discuss/2018-July/000477.html"&gt;thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is about containerizing the current Software Factory architecture
&lt;strong&gt;as-is&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using the sfconfig Ansible playbook to install and configure the services,&lt;/li&gt;
&lt;li&gt;Managing the services with systemd, and&lt;/li&gt;
&lt;li&gt;Deploying all in one container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our goal is to enable the user to quickly prototype and easily deploy the
services on a personal computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-the-image-with-buildah"&gt;
&lt;h2&gt;Building The Image With Buildah&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://buildah.io/"&gt;Buildah&lt;/a&gt; is a tool that facilitates building &lt;a class="reference external" href="https://www.opencontainers.org"&gt;Open Container Initiative&lt;/a&gt; (OCI)
compliant images. Here is the bulk of the image building process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash -e&lt;/span&gt;
&lt;span class="nv"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;buildah from centos:latest&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;mountpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;buildah mount &lt;span class="nv"&gt;$container&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;set +e; buildah umount &lt;/span&gt;&lt;span class="nv"&gt;$container&lt;/span&gt;&lt;span class="s2"&gt;; buildah delete &lt;/span&gt;&lt;span class="nv"&gt;$container&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; EXIT

&lt;span class="c1"&gt;# Install sfconfig&lt;/span&gt;
buildah run &lt;span class="nv"&gt;$container&lt;/span&gt; -- yum install -y &lt;span class="se"&gt;\&lt;/span&gt;
  https://softwarefactory-project.io/repos/sf-release-master.rpm
buildah run &lt;span class="nv"&gt;$container&lt;/span&gt; -- yum install -y sf-config

&lt;span class="c1"&gt;# Run the install playbook&lt;/span&gt;
buildah run &lt;span class="nv"&gt;$container&lt;/span&gt; -- sfconfig --skip-setup

&lt;span class="c1"&gt;# Test that zuul is installed&lt;/span&gt;
buildah run &lt;span class="nv"&gt;$container&lt;/span&gt; -- scl &lt;span class="nb"&gt;enable&lt;/span&gt; rh-python35 -- zuul --version
&lt;span class="c1"&gt;# -&amp;gt; Zuul version: 3.3.1-1.el7&lt;/span&gt;

&lt;span class="c1"&gt;# Tag the image&lt;/span&gt;
buildah config --created-by &lt;span class="s2"&gt;&amp;quot;Software Factory&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$container&lt;/span&gt;
buildah config --author &lt;span class="s2"&gt;&amp;quot;release@softwarefactory-project.io&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$container&lt;/span&gt;

buildah commit &lt;span class="nv"&gt;$container&lt;/span&gt; sf-image
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main advantage of this method is its flexibility. The final &lt;strong&gt;commit&lt;/strong&gt;
command creates a single layer and the &lt;strong&gt;mountpath&lt;/strong&gt; variable enables
direct access to the image content.
Iterating quickly to fix the few issues found when using sf-config inside a
container image (such as fixing SELinux configuration which is not authorized
in a container) has been invaluable.&lt;/p&gt;
&lt;p&gt;Here are some useful buildah commands:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;List the containers used: &lt;em&gt;buildah containers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cleanup stalled build: &lt;em&gt;buildah delete --all&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cleanup images: &lt;em&gt;buildah rmi -a&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We now have an OCI image with all the Software Factory package installed but
they are not configured yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="starting-systemd-inside-a-container"&gt;
&lt;h2&gt;Starting Systemd Inside A Container&lt;/h2&gt;
&lt;p&gt;The recommended strategy is to run one service per container. However,
this requires an orchestration engine and adds some networking and
storage complexicity.&lt;/p&gt;
&lt;p&gt;To keep things as simple as possible, we are going to start systemd inside
the container.&lt;/p&gt;
&lt;p&gt;First we create a new minimal systemd target without multi-user services
such as agetty:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /etc/systemd/system/default.target
[Unit]
Description=Software Factory boot target
Requires=basic.target network.target network-online.target
Wants=sfconfig.service
After=basic.target
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we create a new sfconfig service to trigger the configuration playbook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /lib/systemd/system/sfconfig.service
[Unit]
Description=sfconfig configuration script
Requires=dbus.service sshd.service

[Service]
Type=simple
ExecStart=/usr/libexec/software-factory/sfinit
TimeoutSec=0
StandardOutput=tty
StandardError=tty
StandardInput=tty
TTYPath=/dev/pts/0
TTYReset=yes
TTYVHangup=yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally we create a &lt;strong&gt;sfinit&lt;/strong&gt; script to manage the services configuration
and execute a journalctl process so that services logs are forwarded to the
container logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash -i&lt;/span&gt;
&lt;span class="c1"&gt;# prettify env&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xterm
&lt;span class="nb"&gt;source&lt;/span&gt; /etc/profile

&lt;span class="c1"&gt;# fix hostname (hostnamectl doesn&amp;#39;t work in podman)&lt;/span&gt;
hostname managesf.sfpodman.local
sed -e &lt;span class="s1"&gt;&amp;#39;s/sftests.com/sfpodman.local/&amp;#39;&lt;/span&gt; -i /etc/software-factory/sfconfig.yaml
cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&amp;gt; /etc/software-factory/custom-vars.yaml&lt;/span&gt;
&lt;span class="s"&gt;provision_demo: true&lt;/span&gt;
&lt;span class="s"&gt;gateway_force_ssl_redirection: false&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="c1"&gt;# enable exec in /tmp (TODO: figure out what set it to noexec...)&lt;/span&gt;
mount -o remount,exec /tmp

&lt;span class="c1"&gt;# setup services&lt;/span&gt;
sfconfig --skip-install
journalctl -f &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above file needs to be added inside the &lt;em&gt;mountpath&lt;/em&gt; and sfinit needs to be
marked executable. We can now finalize the image creation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Run these before the commit command&lt;/span&gt;
buildah config --cmd /sbin/init &lt;span class="nv"&gt;$container&lt;/span&gt;
builadh config --port &lt;span class="m"&gt;80&lt;/span&gt;        &lt;span class="nv"&gt;$container&lt;/span&gt;
builadh config --port &lt;span class="m"&gt;443&lt;/span&gt;       &lt;span class="nv"&gt;$container&lt;/span&gt;
builadh config --port &lt;span class="m"&gt;29418&lt;/span&gt;     &lt;span class="nv"&gt;$container&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And test it using this command:&lt;/p&gt;
&lt;img alt="None" src="images/systemd-podman.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-the-image-with-podman"&gt;
&lt;h2&gt;Running The Image With Podman&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://podman.io/"&gt;Podman&lt;/a&gt; is a container runtime that does not implement a big fat daemon like
the Docker Engine. The advantage of the &lt;a class="reference external" href="https://podman.io/"&gt;Podman&lt;/a&gt; model is that cgroups or
security constraints still control the container processes.&lt;/p&gt;
&lt;p&gt;To start software factory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ podman run --privileged --interactive --tty --publish-all
             --systemd --name my-sf sf-image
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
PLAY RECAP ********************************************************************
managesf.sfpodman.local    : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;528&lt;/span&gt;  &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;252&lt;/span&gt;  &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

Friday &lt;span class="m"&gt;04&lt;/span&gt; January &lt;span class="m"&gt;2019&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;:15:29 +0000 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;:00:00.071&lt;span class="o"&gt;)&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;:03:07.513 ********
&lt;span class="o"&gt;===============================================================================&lt;/span&gt;
sf-mysql : Start mariadb ----------------------------------------------- &lt;span class="m"&gt;12&lt;/span&gt;.13s
sf-gerrit : Start service ----------------------------------------------- &lt;span class="m"&gt;9&lt;/span&gt;.37s
sf-gerrit : Reload gerrit service --------------------------------------- &lt;span class="m"&gt;8&lt;/span&gt;.70s
sf-gerrit : restart gerrit ---------------------------------------------- &lt;span class="m"&gt;8&lt;/span&gt;.64s
sf-gateway : Update dashboards ------------------------------------------ &lt;span class="m"&gt;6&lt;/span&gt;.14s
sf-zuul : Get service configuration via managesf/configurations --------- &lt;span class="m"&gt;5&lt;/span&gt;.98s
sf-repos : Check &lt;span class="k"&gt;if&lt;/span&gt; repository exists ----------------------------------- &lt;span class="m"&gt;5&lt;/span&gt;.16s
sf-repos : Check &lt;span class="k"&gt;if&lt;/span&gt; repository exists ----------------------------------- &lt;span class="m"&gt;5&lt;/span&gt;.12s
sf-zuul : Generate tenant-update secrets -------------------------------- &lt;span class="m"&gt;5&lt;/span&gt;.03s
sf-repos : Check &lt;span class="k"&gt;if&lt;/span&gt; repository exists ----------------------------------- &lt;span class="m"&gt;3&lt;/span&gt;.92s
sf-repos : Create initial resources ------------------------------------- &lt;span class="m"&gt;3&lt;/span&gt;.88s
sf-gerrit : Reindex gerrit when service is not running ------------------ &lt;span class="m"&gt;3&lt;/span&gt;.86s
sf-gerrit : Initialize/Upgrade gerrit when service is not running ------- &lt;span class="m"&gt;3&lt;/span&gt;.73s
sf-repos : Provision demo resources &lt;span class="k"&gt;in&lt;/span&gt; config repo ---------------------- &lt;span class="m"&gt;2&lt;/span&gt;.78s
sf-zuul : Wait &lt;span class="k"&gt;for&lt;/span&gt; gearman server --------------------------------------- &lt;span class="m"&gt;2&lt;/span&gt;.09s
sf-zuul : Manually create database to avoid concurrency issue ----------- &lt;span class="m"&gt;1&lt;/span&gt;.98s
sf-postfix : Generate virtual database ---------------------------------- &lt;span class="m"&gt;1&lt;/span&gt;.90s
sf-monit : restart monit ------------------------------------------------ &lt;span class="m"&gt;1&lt;/span&gt;.86s
sf-monit : restart monit ------------------------------------------------ &lt;span class="m"&gt;1&lt;/span&gt;.82s
sf-repos : Make a first admin connexion through SF SSO ------------------ &lt;span class="m"&gt;1&lt;/span&gt;.64s
sfpodman.local: SUCCESS

Access dashboard: https://sfpodman.local
Login with admin user, get the admin password by running:
  awk &lt;span class="s1"&gt;&amp;#39;/admin_password/ {print $2}&amp;#39;&lt;/span&gt; /etc/software-factory/sfconfig.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;em&gt;--privileged&lt;/em&gt; flag is required for the zuul-executor services.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;--interactive&lt;/em&gt; and &lt;em&gt;--tty&lt;/em&gt; (or simply &lt;em&gt;-ti&lt;/em&gt;) flags keep the process
in the foreground.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;--publish-all&lt;/em&gt; flag creates the network port mapping.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;--systemd&lt;/em&gt; flag take cares of special configurations needed by the
systemd init command.&lt;/li&gt;
&lt;li&gt;And the &lt;em&gt;--name&lt;/em&gt; flag is to name the container for easy reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the configuration is completed, you can set the ip address of the
instance to &lt;strong&gt;sfpodman.local&lt;/strong&gt; in your /etc/hosts file and use this
command to get the port mapping:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ podman port my-sf
&lt;span class="m"&gt;443&lt;/span&gt;/tcp -&amp;gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:33251
&lt;span class="m"&gt;80&lt;/span&gt;/tcp -&amp;gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:38087
&lt;span class="m"&gt;29418&lt;/span&gt;/tcp -&amp;gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:36167
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After using the services, you can save the state to restart the container with
your change using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ podman commit my-sf my-sf-image
// Then use my-sf-image instead of sf-image
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally you can publish the image to a remote registry using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ podman login docker.io
$ podman push sf-image docker://docker.io/my-org/sf-image
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are some other useful podman commands:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;List available images: &lt;em&gt;podman images&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;List processes: &lt;em&gt;podman ps -a&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Kill all the containers: &lt;em&gt;podman rm -af&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cleanup images: &lt;em&gt;podman rmi -a&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using &lt;a class="reference external" href="https://podman.io/"&gt;Podman&lt;/a&gt; and &lt;a class="reference external" href="https://buildah.io/"&gt;Buildah&lt;/a&gt;, we can build a Software Factory container image that is
surprisingly small, less than &lt;strong&gt;500 MB&lt;/strong&gt; and fast to deploy, about: &lt;strong&gt;5 minutes&lt;/strong&gt;.
Check it for yourself using this single command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ podman run --privileged --interactive --tty --publish-all --systemd softwarefactoryproject/sf-minimal:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, we can also build the other Software Factory architectures, for example
the sf-zuul-minimal which doesn't have the gerrit service and the sf-allinone
which features all the supported services such as InfluxDB, Grafana, ELK, lodgeit,
etherpad, mumble, code-search, repoxplorer and storyboard:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ podman run --privileged --interactive --tty --publish-all --systemd softwarefactoryproject/sf-allinone:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="None" src="images/podman-allinone.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It is worthy to mention that &lt;a class="reference external" href="https://podman.io/"&gt;Podman&lt;/a&gt;, &lt;a class="reference external" href="https://buildah.io/"&gt;Buildah&lt;/a&gt; and other tools like
&lt;a class="reference external" href="https://github.com/containers/skopeo"&gt;Skopeo&lt;/a&gt; or &lt;a class="reference external" href="https://cri-o.io/"&gt;CRI-O&lt;/a&gt; re-use common data libraries that support multiple
independent processes to interact with at the same time:
&lt;a class="reference external" href="https://github.com/containers/storage"&gt;containers/storage&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/containers/image"&gt;containers/image&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Altogether, this new toolchain offers an efficient method to work with
open containers without the hassle of frequent docker issues.&lt;/p&gt;
&lt;p&gt;Moreover, the maintainers are very re-active: when working on this story,
I encountered a bug with the commit command which got promptly fixed in
&lt;a class="reference external" href="https://github.com/containers/libpod/issues/2066"&gt;less that 4 hours&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018 29 Nov to 19 Dec summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-29-nov-to-19-dec-summary.html" rel="alternate"></link><published>2018-12-19T10:00:00+00:00</published><updated>2018-12-19T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-12-19:/sprint-2018-29-nov-to-19-dec-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've prepared a test of zuul-jobs' upload-to-pypi role using devPI (PyPi staging server standalone pypi deployment). What's left to  do is to add it to upstream's third party CI.&lt;/li&gt;
&lt;li&gt;We've answered comments …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've prepared a test of zuul-jobs' upload-to-pypi role using devPI (PyPi staging server standalone pypi deployment). What's left to  do is to add it to upstream's third party CI.&lt;/li&gt;
&lt;li&gt;We've answered comments to the JWT spec for Zuul. We need to clarify what is expected for the JWT's generation (delegated or handled  by Zuul)&lt;/li&gt;
&lt;li&gt;We started discussion about Zuul config introspection, Openshift support and Zookeeper replacement with etcd on zuul-discuss list.&lt;/li&gt;
&lt;li&gt;We updated the openapi definition and added a SwaggerUI component to the web interface.&lt;/li&gt;
&lt;li&gt;We have prepare a working pagure instance based on master to validate the Zuul Pagure driver. The driver has been updated an support  a single project check/gate/post workflow. An update blog post has been published &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-pagure-driver-update.html"&gt;https://www.softwarefactory-project.io/zuul-pagure-driver-update.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked to add RHEL support for Software Factory. The next Software Factory release will support both RHEL and CentOS.&lt;/li&gt;
&lt;li&gt;We released SF version 3.2.&lt;/li&gt;
&lt;li&gt;We worked on integrating Pagure in SF to test the new Zuul driver: packaged missing dependencies and added configuration roles.&lt;/li&gt;
&lt;li&gt;We gathered requirements for distro-jobs using DLRN, rpmreq and zuul.&lt;/li&gt;
&lt;li&gt;We added a resources project switch to deactivate code-search/cgit/repoxplorer indexation by project/repo&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Pagure Driver Update</title><link href="https://www.softwarefactory-project.io/zuul-pagure-driver-update.html" rel="alternate"></link><published>2018-12-18T00:00:00+00:00</published><updated>2018-12-18T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-12-18:/zuul-pagure-driver-update.html</id><summary type="html">&lt;p&gt;Zuul brings lots of advanced features for Continuous Integration and deserves to
be usable by more projects, I decided to start the implementation of a Pagure
driver for Zuul.&lt;/p&gt;
&lt;div class="section" id="zuul"&gt;
&lt;h2&gt;Zuul&lt;/h2&gt;
&lt;p&gt;Zuul is a powerful gating system that helps project maintainers to never break
development branches. Thanks to unique features such …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Zuul brings lots of advanced features for Continuous Integration and deserves to
be usable by more projects, I decided to start the implementation of a Pagure
driver for Zuul.&lt;/p&gt;
&lt;div class="section" id="zuul"&gt;
&lt;h2&gt;Zuul&lt;/h2&gt;
&lt;p&gt;Zuul is a powerful gating system that helps project maintainers to never break
development branches. Thanks to unique features such as speculative merging and
support for dependencies between repositories, Zuul leverages CI at scale. It also
provides out the box support for Ansible (Zuul jobs are Ansible playbooks).
Currently Zuul interfaces with Gerrit and Github as input sources. To learn more
about Zuul you can access &lt;a class="reference external" href="https://zuul-ci.org/"&gt;the Zuul website&lt;/a&gt; and
&lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-1-what-is-zuul.html"&gt;the Zuul Hands-on blog post series&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pagure"&gt;
&lt;h2&gt;Pagure&lt;/h2&gt;
&lt;p&gt;Pagure is a git-centered forge written in Python, mainly but not only
used by the Fedora project. The pagure API provides most of the features needed
by Zuul to gate Pull-Requests. You can see Pagure in action &lt;a class="reference external" href="https://pagure.io/browse/projects/"&gt;here&lt;/a&gt;
and learn more about it on &lt;a class="reference external" href="https://pagure.io/pagure"&gt;the project's page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pagure is quite similar to Github as it handles Pull-Requests, where a PR is a branch
composed of one or more commits. A PR can be commented, reviewed, updated,
CI flagged, and merged via the API. CI results for a PR are reported via the
flag mechanism (success/failure/pending). Code review is done via comments with
a :thumbsup: or a :thumbsdown: emoji. Pagure computes a score based on those emoji
and only permits a maintainer to merge a PR if &lt;em&gt;that score beats a minimum value set in
the repository's settings&lt;/em&gt;. Pagure publishes repository events via web hooks and provides
repository API tokens to perform authenticated calls like merging a PR or adding
a CI flag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-zuul-pagure-driver"&gt;
&lt;h2&gt;The Zuul Pagure driver&lt;/h2&gt;
&lt;p&gt;Here is a link to the patch on OpenStack's code review server: &lt;a class="reference external" href="https://review.openstack.org/#/c/604404/"&gt;https://review.openstack.org/#/c/604404/&lt;/a&gt;.
It provides, for a single repository, a check/gate/post workflow and has been validated
with Pagure's current master branch at the time of writing (future Pagure 5.2).&lt;/p&gt;
&lt;p&gt;The driver makes use of the web hooks to receive repository events such as
&lt;em&gt;Pull Request Opened&lt;/em&gt; or &lt;em&gt;Pull Request Commented&lt;/em&gt;. Events are received via Zuul
Web and sent to the Zuul scheduler. The driver is able to read Pull-Requests
status to get the Review score via the count of :thumbsup:/:thumbsdown:
emoji, the CI status (flags) and the merge state. It is also able to set CI status
and Pull-Request comments.&lt;/p&gt;
&lt;p&gt;The driver provides &lt;strong&gt;Triggers&lt;/strong&gt; and &lt;strong&gt;Requires&lt;/strong&gt; filter attributes that can be used
to define a Zuul pipeline. Below is an example of a Zuul pipeline for a Pagure
source called &lt;em&gt;pagure.sftests.com&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;independent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;False&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_pull_request&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;comment&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(?i)^\s*recheck\s*$&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_pull_request&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;opened&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;changed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pending&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;failure&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;gate&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;dependent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;precedence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;high&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;False&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;success&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_pull_request&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;status&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;success&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_pull_request_review&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;thumbsup&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pending&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;failure&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;post-review&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;independent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;precedence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;low&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_push&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;^refs/heads/.*$&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;sqlreporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Currently three type of events can be used as triggers in pipelines:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pg_pull_request: when a Pull-Request change&lt;/li&gt;
&lt;li&gt;pg_pull_request_review: when a comment is added to a Pull-Request&lt;/li&gt;
&lt;li&gt;pg_push: when a git branch is updated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following requirements are supported:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;merged: the Pull-Request merged status&lt;/li&gt;
&lt;li&gt;status: the CI flag success/failure/pending&lt;/li&gt;
&lt;li&gt;score: the score based on thumbsup/thumbsdown count&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="first-pr-gated-by-zuul-on-pagure-io"&gt;
&lt;h2&gt;First PR gated by Zuul on pagure.io&lt;/h2&gt;
&lt;img alt="None" src="images/zuul-pagure-1.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-a-pagure-repository-for-zuul"&gt;
&lt;h2&gt;Setting up a Pagure repository for Zuul&lt;/h2&gt;
&lt;p&gt;The API token ACLs must allow at least:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Comment on a pull-request&lt;/li&gt;
&lt;li&gt;Flag a pull-request&lt;/li&gt;
&lt;li&gt;Merge a pull-request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The web hook target must be (in repository settings):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http:/"&gt;http:/&lt;/a&gt;/&amp;lt;zuul-web&amp;gt;/zuul/api/connection/&amp;lt;conn-name&amp;gt;/payload&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The repository settings to be set:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Always merge (? better to match internal merge strategy of Zuul)&lt;/li&gt;
&lt;li&gt;Minimum score to merge Pull-Request&lt;/li&gt;
&lt;li&gt;Notify on Pull-Request flag&lt;/li&gt;
&lt;li&gt;Pull-Requests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The connection to define in /etc/zuul/zuul.conf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[connection pagure.sftests.com]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pagure&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;webhook_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;XXXXX&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pagure.sftests.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;baseurl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;https://pagure.sftests.com/pagure&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;cloneurl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;https://pagure.sftests.com/pagure/git&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;api_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;YYYYY&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rfe-merged-on-pagure-to-support-zuul"&gt;
&lt;h2&gt;RFE merged on Pagure to support Zuul&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/3857"&gt;https://pagure.io/pagure/pull-request/3857&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/3832"&gt;https://pagure.io/pagure/pull-request/3832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/3980"&gt;https://pagure.io/pagure/pull-request/3980&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/4024"&gt;https://pagure.io/pagure/pull-request/4024&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pagure.io/pagure/pull-request/4121"&gt;https://pagure.io/pagure/pull-request/4121&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="current-issues"&gt;
&lt;h2&gt;Current issues&lt;/h2&gt;
&lt;p&gt;Here is the list of the issues that currently prevent the driver to provide the
same capabilities as the Gerrit and Github drivers.&lt;/p&gt;
&lt;div class="section" id="blocking-issues"&gt;
&lt;h3&gt;Blocking issues&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;API token, webhook target and hook payload signature are set by repository.
This makes difficult to support multiple repositories like in Gerrit or Github.
An idea could be to group projects and set those settings at project's group
level. There is an open RFE for this: &lt;a class="reference external" href="https://pagure.io/pagure/issue/3948"&gt;https://pagure.io/pagure/issue/3948&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="non-blocking-issues"&gt;
&lt;h3&gt;Non blocking issues&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pagure does not send an event when a git tag is added/removed&lt;/li&gt;
&lt;li&gt;Pagure does not send an event when a branch is created&lt;/li&gt;
&lt;li&gt;Pagure does not send an event when a branch is deleted&lt;/li&gt;
&lt;li&gt;Repository API tokens seem to expire after 60 days&lt;/li&gt;
&lt;li&gt;The Git-receive hook payload does not contain the list of commits that are a part
of the merged PR with a detail of the files. An extra call to the merger is needed
to detect if a .zuul.yaml exists at the root of the reporitory file tree.&lt;/li&gt;
&lt;li&gt;Pagure does not reset the review score when a PR code is updated.
There is an open RFE for this: &lt;a class="reference external" href="https://pagure.io/pagure/issue/3985"&gt;https://pagure.io/pagure/issue/3985&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CI status flag's &lt;em&gt;updated&lt;/em&gt; field unit is the second, it'd be better to have
values to the millisecond, in order to avoid sorting issues when statuses are
changed in the span of a second.&lt;/li&gt;
&lt;li&gt;Zuul needs to be able to search commits that set a dependency (depends-on)
to a specific commit to reset jobs run when a dependency is changed. On
Gerrit and Github, searching through commit messages is possible and used by
Zuul. Pagure does not offer this feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="follow-up"&gt;
&lt;h2&gt;Follow up&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Showcase the driver to the Pagure folks&lt;/li&gt;
&lt;li&gt;Implement &lt;a class="reference external" href="https://pagure.io/pagure/issue/3948"&gt;https://pagure.io/pagure/issue/3948&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Write the driver's unit tests and documentation&lt;/li&gt;
&lt;li&gt;By Pagure 5.3, have a multi-repository (depends-on) workflow working&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any help welcome :)&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018 09 Nov to 29 Nov summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-09-nov-to-29-nov-summary.html" rel="alternate"></link><published>2018-11-28T10:00:00+00:00</published><updated>2018-11-28T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-11-28:/sprint-2018-09-nov-to-29-nov-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Progress on the Zuul/pagure driver &lt;a class="reference external" href="https://review.openstack.org/#/c/604404/"&gt;https://review.openstack.org/#/c/604404/&lt;/a&gt; RFE opened(fixed) for Pagure 5.2&lt;/li&gt;
&lt;li&gt;Nodepool fix when multiple floating IP pools in the tenant &lt;a class="reference external" href="https://review.openstack.org/#/c/619525/"&gt;https://review.openstack …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Progress on the Zuul/pagure driver &lt;a class="reference external" href="https://review.openstack.org/#/c/604404/"&gt;https://review.openstack.org/#/c/604404/&lt;/a&gt; RFE opened(fixed) for Pagure 5.2&lt;/li&gt;
&lt;li&gt;Nodepool fix when multiple floating IP pools in the tenant &lt;a class="reference external" href="https://review.openstack.org/#/c/619525/"&gt;https://review.openstack.org/#/c/619525/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added the --insecure to zuul-secrets.py &lt;a class="reference external" href="https://review.openstack.org/#/c/617281/"&gt;https://review.openstack.org/#/c/617281/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We attended the OpenStack summit in Berlin: &lt;a class="reference external" href="https://www.softwarefactory-project.io/openstack-summit-berlin-report.html"&gt;https://www.softwarefactory-project.io/openstack-summit-berlin-report.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We proposed a roadmap to integrate the Openshift driver in Nodepool.&lt;/li&gt;
&lt;li&gt;We worked on adding authentication support to the Zookeeper service: &lt;a class="reference external" href="https://review.openstack.org/619156"&gt;https://review.openstack.org/619156&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We published a blog-post about secrets usage in Zuul jobs &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-5-job-secrets.html"&gt;https://www.softwarefactory-project.io/zuul-hands-on-part-5-job-secrets.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated python requirements version packaged in SF for the upcoming 3.2 release&lt;/li&gt;
&lt;li&gt;We validated the 3.2-candidate package set&lt;/li&gt;
&lt;li&gt;We finished to migrate sf-ci jobs to use native centos cloud image. We've got issues in the past with packages installed by dib elements not present on centos, this change will help up to prevent this kind of issues.&lt;/li&gt;
&lt;li&gt;We refactored sf-ci playbooks to remove deprecated include ansible statement. The next step will be to convert sf-ci playbooks to roles. This future change will help use to re-use roles to validate multi tenant sf deployment on sf-ci.&lt;/li&gt;
&lt;li&gt;We added reno-notes and sphinx third party CI tests for zuul-jobs. We also clarified the overall epic - which system to run the jobs on.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Hands on - part 5 - Job Secrets</title><link href="https://www.softwarefactory-project.io/zuul-hands-on-part-5-job-secrets.html" rel="alternate"></link><published>2018-11-20T00:00:00+00:00</published><updated>2018-11-20T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2018-11-20:/zuul-hands-on-part-5-job-secrets.html</id><summary type="html">&lt;p&gt;In this article, we will explain how to use job secrets stored directly
in the git repositories of projects.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The examples and commands that follow are intended to be run on a Software Factory
sandbox where a &lt;strong&gt;demo-repo&lt;/strong&gt; repository exists. You …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, we will explain how to use job secrets stored directly
in the git repositories of projects.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The examples and commands that follow are intended to be run on a Software Factory
sandbox where a &lt;strong&gt;demo-repo&lt;/strong&gt; repository exists. You should have such an environment
after following the previous articles in this series:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To deploy a Software Factory sandbox please read the &lt;a class="reference external" href="https://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;first article of the series&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To create the &lt;strong&gt;demo-repo&lt;/strong&gt; repository, please follow the sections &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#clone-the-config-repository"&gt;Clone the config repository&lt;/a&gt;
and &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#define-the-demo-repo-repository"&gt;Define the demo-repo repository&lt;/a&gt; sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Incidentally, most of the links reference &lt;em&gt;sftests.com&lt;/em&gt; which is the default
domain of the sandbox. Make sure to adapt the links if necessary.&lt;/p&gt;
&lt;p&gt;If you have already deployed a Software Factory sandbox and created a snapshot as
suggested, you can restore this snapshot in order to follow this article on a clean environment.
In that case make sure the virtual machine's time is correct post
restoration. If not fix it by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl stop ntpd&lt;span class="p"&gt;;&lt;/span&gt; ntpd -gq&lt;span class="p"&gt;;&lt;/span&gt; systemctl start ntpd
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="projects-types-config-vs-untrusted"&gt;
&lt;h2&gt;Projects Types: config vs untrusted&lt;/h2&gt;
&lt;p&gt;Zuul defines two categories of projects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt; projects, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;untrusted&lt;/strong&gt; projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main difference is that config projects are &lt;strong&gt;protected&lt;/strong&gt; and changes to
their Zuul configuration &lt;strong&gt;are not tested speculatively&lt;/strong&gt;.
Untrusted projects' configuration changes are tested speculatively before
being merged, while config project configuration are only effective after
being merged.&lt;/p&gt;
&lt;p&gt;Let's vizualize the difference on some workflow diagrams:&lt;/p&gt;
&lt;div class="section" id="untrusted-projects"&gt;
&lt;h3&gt;Untrusted projects&lt;/h3&gt;
&lt;p&gt;Let's assume &lt;em&gt;A&lt;/em&gt; is an incoming patch to an &lt;strong&gt;untrusted&lt;/strong&gt; project. &lt;em&gt;A&lt;/em&gt;
modifies the &lt;em&gt;job-1&lt;/em&gt; being run in the &lt;strong&gt;check&lt;/strong&gt; gate (&lt;em&gt;job-1&lt;/em&gt;,
the modified job is pictured in orange below). Merging this change will look
like this in terms of workflow:&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part6-untrusted-project-workflow.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The change gets tested speculatively, therefore the change to &lt;em&gt;job-1&lt;/em&gt;
is used immediately in the &lt;strong&gt;check&lt;/strong&gt; and &lt;strong&gt;gate&lt;/strong&gt; pipeline, &lt;strong&gt;before&lt;/strong&gt; being
merged.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="config-projects"&gt;
&lt;h3&gt;Config projects&lt;/h3&gt;
&lt;p&gt;Let's assume now that &lt;em&gt;A&lt;/em&gt; is an incoming patch on a &lt;strong&gt;config&lt;/strong&gt; project.
Merging this change will look like this in terms of workflow:&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part6-config-project-workflow-A.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This time, the change to &lt;em&gt;job-1&lt;/em&gt; is not applied in the &lt;strong&gt;check&lt;/strong&gt; or &lt;strong&gt;gate&lt;/strong&gt;
pipeline. The rationale here is that changes to a config project are impactful
and need to be reviewed by humans before being run automatically. If they
were run as soon as the check pipeline, nothing would prevent a malicious user
from leaking passwords used in the jobs, for example.&lt;/p&gt;
&lt;p&gt;Once A is merged, subsequent patches get tested with the new changes:&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part6-config-project-workflow-B.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Regarding secrets, the main difference between &lt;strong&gt;untrusted&lt;/strong&gt; and &lt;strong&gt;config&lt;/strong&gt;
projects is that for security reasons, untrusted projects' secrets shall only
be used in &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul/latest/config/pipeline.html#attr-pipeline.post-review"&gt;post-review&lt;/a&gt; pipelines such as the pre-defined
&lt;strong&gt;&amp;quot;periodic&amp;quot;&lt;/strong&gt; or &lt;strong&gt;&amp;quot;post&amp;quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="using-a-secret-in-a-config-project"&gt;
&lt;h2&gt;Using a secret in a config project&lt;/h2&gt;
&lt;p&gt;A typical use case is a secret needed by a publishing or deployment job.
Actually, the &lt;strong&gt;base&lt;/strong&gt; job (built-in in Software Factory) is using a secret to
upload job logs to the log server defined in the config project's
&lt;strong&gt;zuul.d/_secret_sflogs.yaml&lt;/strong&gt; file, and used by the base job defined in
&lt;strong&gt;zuul.d/_jobs-base.yaml&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;To encrypt a custom secret, you can use the &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul-client/"&gt;zuul-client&lt;/a&gt; script
from the Zuul source repository. This script needs
the tenant name and project name to retrieve the project's public key and
properly encrypt the secret. We will use it to encrypt a custom secret
for the config project.&lt;/p&gt;
&lt;p&gt;You can install from source here &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul-client/"&gt;zuul-client&lt;/a&gt; , or through pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install zuul-client
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zuul-client -v --insecure --zuul-url https://sftests.com/zuul encrypt --project config --tenant &lt;span class="nb"&gt;local&lt;/span&gt;
&amp;lt;write your secrets here and &lt;span class="nb"&gt;exit&lt;/span&gt; with Ctrl+D&amp;gt;
...
DEBUG:urllib3.connectionpool:https://sftests.com:443 &lt;span class="s2"&gt;&amp;quot;GET /zuul/api/tenant/local/key/config.pub HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;800&lt;/span&gt;
DEBUG:zuul-client:Calling openssl
DEBUG:zuul-client:calling &lt;span class="s2"&gt;&amp;quot;openssl version&amp;quot;&lt;/span&gt;
DEBUG:zuul-client:calling &lt;span class="s2"&gt;&amp;quot;openssl rsa -text -pubin -in /tmp/tmpti0h47uu&amp;quot;&lt;/span&gt;
writing RSA key
INFO:zuul-client:Public key length: &lt;span class="m"&gt;4096&lt;/span&gt; bits &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
INFO:zuul-client:Max plaintext length per chunk: &lt;span class="m"&gt;470&lt;/span&gt; bytes
INFO:zuul-client:Input plaintext length: &lt;span class="m"&gt;10&lt;/span&gt; bytes
INFO:zuul-client:Number of chunks: &lt;span class="m"&gt;1&lt;/span&gt;
DEBUG:zuul-client:calling &lt;span class="s2"&gt;&amp;quot;openssl rsautl -encrypt -oaep -pubin -inkey /tmp/tmpti0h47uu&amp;quot;&lt;/span&gt; with each data chunk:
DEBUG:zuul-client:      chunk &lt;span class="m"&gt;1&lt;/span&gt;

- secret:
    name: &amp;lt;name&amp;gt;
    data:
      &amp;lt;fieldname&amp;gt;: !encrypted/pkcs1-oaep
        - joTrPXkIVs9mp9Kh88ly1HAE64Ygu5yRxlrPslb8vG7qNA2isRdvhwO5I5+4WhfjNK43q
          HjCdeIc9LmqZHi5cglYiHHjHZYNhDXatOUt+T7fotyb+VMkXrZj8EiHINgggbJH+/lHBU
          YFhyqjBojyTq1TQUl7FiexTfZS2KFU1st5GgPNcxJJQ2g4lcyXuWNFauC5C4PU08mn1mi

&lt;span class="c1"&gt;# You can also check and get the public key manually:&lt;/span&gt;
curl -k https://sftests.com/zuul/api/tenant/local/key/config.pub
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use the --infile option if the secret is a certificate file or a SSH key.
Write the output to a new zuul configuration file in the config
project like that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# config/zuul.d/my-secret.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-publication-secret&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Extra cleartext data can be added to a secret&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;publication-host.example.com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;!encrypted/pkcs1-oaep&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;joTrPXkIVs9mp9Kh88ly1HAE64Ygu5yRxlrPslb8vG7qNA2isRdvhwO5I5+4WhfjNK43q&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;HjCdeIc9LmqZHi5cglYiHHjHZYNhDXatOUt+T7fotyb+VMkXrZj8EiHINgggbJH+/lHBU&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;YFhyqjBojyTq1TQUl7FiexTfZS2KFU1st5GgPNcxJJQ2g4lcyXuWNFauC5C4PU08mn1mi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the secret can be attached to a job like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# config/zuul.d/my-job.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-publication-job&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/my-publication.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;publication_secret&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nt"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-publication-secret&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, when the playbook is executed, the secret content will be decrypted
and available as the secret name dictionary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# config/playbooks/my-publication.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Copy secret to a configuration file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install secret&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;publication_secret.password&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.publication-secret&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;no_log&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Uses as an environment variable&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run publication command&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;MY_SECRET&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;publication_secret.password&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;MY_HOST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;publication_secret.hostname&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Remove secret file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.publication-secret&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;absent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit the 3 files and merge them in the config project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git add -A&lt;/span&gt;
&lt;span class="go"&gt;git commit -m &amp;quot;Provide my publication job&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;git review&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;and approve the change on Gerrit and &lt;span class="nb"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; the change to be merged
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can test that the new job by adding it to the demo-repo's pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo-repo/.zuul.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-publication-job&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit this file in the demo-repo project and use git-review to trigger the
job execution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git add .zuul.yaml&lt;/span&gt;
&lt;span class="go"&gt;git commit -m &amp;quot;Configure project pipelines&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;git review&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="None" src="images/zuul-hands-on-part6-c1.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To open the same menu as the image above go to &lt;a class="reference external" href="https://sftests.com/zuul/t/local/builds"&gt;Zuul's Build page (sftests.com)&lt;/a&gt;. Here in the top lines of the table you can find the &lt;strong&gt;my-publication-job&lt;/strong&gt; in the job column, click on SUCCESS in the Result column. You will find below Artifacts, and under it &lt;strong&gt;ARA report&lt;/strong&gt; click on it.
On this page will be all playbook tasks. &lt;strong&gt;Expand Run publication command&lt;/strong&gt; task.&lt;/p&gt;
&lt;p&gt;As you can see, the job can be used by any project and the playbook is
executed with the secret decrypted. The &lt;strong&gt;env&lt;/strong&gt; command is leaking
the secret content, thus when writing job that uses secret,
it is recommended to make sure the secret is not exposed
during the job execution.&lt;/p&gt;
&lt;p&gt;Because the job is defined in a config project, a malicious user can
not submit a review with a new playbook task to dump the secret
content because the job's content is not evaluated speculatively.
Read below for more &lt;a class="reference internal" href="#security-considerations"&gt;Security Considerations&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-an-untrusted-project-secret"&gt;
&lt;h2&gt;Using an untrusted-project secret&lt;/h2&gt;
&lt;p&gt;Secrets don't have to be set exclusively in config projects. In this example
we are going to create a publish-to-pypi job for the demo-repo
project so that it is published to pypi on release. To do that we will
use the &lt;strong&gt;build-python-release&lt;/strong&gt; and &lt;strong&gt;upload-pypi&lt;/strong&gt; roles from &lt;a class="reference external" href="https://zuul-ci.org/docs/zuul-jobs/"&gt;zuul-jobs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Clone the &lt;strong&gt;demo-repo&lt;/strong&gt; and provision it with
&lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/hoz-4-demo-repo.tgz"&gt;this demo code&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The default release process uses wheel packaging, thus you will have
to update the setup.py to use setuptools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo-repo/setup.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt;

&lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also make sure the following packages are installed on the node running the job.
The sandbox is using the runC driver to run tests so install the packages
on the Software Factory instance directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y python-wheel python-twine
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go back to demo-repo project and encrypt a fake pypi account password (since we don't want to actually
publish this demo project) using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zuul-client -v --insecure --zuul-url https://sftests.com/zuul encrypt --tenant &lt;span class="nb"&gt;local&lt;/span&gt; --project demo-repo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create this demo-repo zuul configuration and replace the password payload with
the output of &lt;cite&gt;zuul-client&lt;/cite&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo-repo/.zuul.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-pypi-secret&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-pypi-account&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;!encrypted/pkcs1-oaep&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;vY1AfQZimyeFgKchVZYoF9hTcF511U6wS7PZFrzX/+po15a45Nt4mia/RNz/3+dRhi8ip&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;6xIBD8S7JzrwmfovGg1fDPtNwSFO+awZ5f/B6aH35X0nuC5OQ3Jeu641inhNonuSKJ6Sh&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-upload-pypi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Release wheel to pypi using my-pypi-account&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/publish/release.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;post-run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/publish/pypi.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pypi_info&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-pypi-secret&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-upload-pypi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create the run playbook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo-repo/playbooks/publish/release.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;build-python-release&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the post playbook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo-repo/playbooks/publish/pypi.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;upload-pypi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;when&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;zuul_success | bool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit the 3 files and merge them in the demo-repo project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git add -A&lt;/span&gt;
&lt;span class="go"&gt;git commit -m &amp;quot;Provide my upload-pypi job&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;git review&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;and approve the change on Gerrit and &lt;span class="nb"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; the change to be merged
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test the publication job, push a new tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; demo-repo
git tag -a -m &lt;span class="m"&gt;0&lt;/span&gt;.0.1 &lt;span class="m"&gt;0&lt;/span&gt;.0.1
git push gerrit &lt;span class="m"&gt;0&lt;/span&gt;.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resulting in:&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part6-c2.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="None" src="images/zuul-hands-on-part6-c3.png" /&gt;
&lt;p&gt;The error is expected because the password was incorrect.&lt;/p&gt;
&lt;p&gt;To restart the job, you can use the &lt;cite&gt;zuul reenqueue&lt;/cite&gt; command (on the Software
Factory instance):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zuul enqueue-ref --tenant &lt;span class="nb"&gt;local&lt;/span&gt; --trigger gerrit &lt;span class="se"&gt;\&lt;/span&gt;
     --pipeline release --project demo-repo &lt;span class="se"&gt;\&lt;/span&gt;
     --ref refs/tags/0.0.1 &lt;span class="se"&gt;\&lt;/span&gt;
     --newrev git-commit-sha1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To update the tag content, it's recommended to push a new tag
as Zuul doesn't handle reference deletion gracefully.&lt;/p&gt;
&lt;p&gt;The job can be used by any project, but only in a
&lt;strong&gt;post-review&lt;/strong&gt; pipeline (e.g. &lt;strong&gt;post&lt;/strong&gt; or &lt;strong&gt;release&lt;/strong&gt;). Attempting
to modify the release playbook and adding the job to
a check pipeline will result in a Zuul configuration
error to prevent malicious access to the secret.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-considerations-1"&gt;
&lt;span id="security-considerations"&gt;&lt;/span&gt;&lt;h2&gt;Security considerations&lt;/h2&gt;
&lt;p&gt;Here are some security considerations when using secrets
in Zuul jobs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Secrets may only be used by jobs defined within the same project.&lt;/li&gt;
&lt;li&gt;Config project secrets can be used in check pipelines, but
be careful to prevent unexpected usage. For example, secrets
shouldn't be written to disk in a pre run as a job's user may be
able to access them during the speculative run phase.&lt;/li&gt;
&lt;li&gt;Be wary when holding a node that have used a secret because the secret may be
recovered from the swap or the filesystem journal.&lt;/li&gt;
&lt;li&gt;Publication jobs can use the &lt;strong&gt;post-review&lt;/strong&gt; job attribute
to prevent usage in the check pipeline. Note that &lt;strong&gt;post-review&lt;/strong&gt; is
automatically set for untrusted projects' jobs using secrets.&lt;/li&gt;
&lt;li&gt;Jobs that have access to protected resources can be restricted
to specific projects using the &lt;strong&gt;allowed-projects&lt;/strong&gt; job attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>OpenStack Summit Berlin Report</title><link href="https://www.softwarefactory-project.io/openstack-summit-berlin-report.html" rel="alternate"></link><published>2018-11-16T06:00:00+00:00</published><updated>2018-11-16T06:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2018-11-16:/openstack-summit-berlin-report.html</id><summary type="html">&lt;p&gt;Here is my report on the 2018 OpenStack Summit in Berlin.&lt;/p&gt;
&lt;div class="section" id="day1-keynotes"&gt;
&lt;h2&gt;Day1 - Keynotes&lt;/h2&gt;
&lt;p&gt;Besides the many new developments in the OpenStack projects, my take away from
the first keynotes is that the summit is being renamed Open Infrastructure
to better represent the OpenStack Foundation's focus areas.
Nick Barcet announced[0 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Here is my report on the 2018 OpenStack Summit in Berlin.&lt;/p&gt;
&lt;div class="section" id="day1-keynotes"&gt;
&lt;h2&gt;Day1 - Keynotes&lt;/h2&gt;
&lt;p&gt;Besides the many new developments in the OpenStack projects, my take away from
the first keynotes is that the summit is being renamed Open Infrastructure
to better represent the OpenStack Foundation's focus areas.
Nick Barcet announced[0] the next OSP version 14 as well as a
new edge use case design named Virtual Central Office (VCO)
which looks very exciting.&lt;/p&gt;
&lt;p&gt;[0]: &lt;a class="reference external" href="https://www.youtube.com/watch?v=Tph2sXIVNhY"&gt;https://www.youtube.com/watch?v=Tph2sXIVNhY&lt;/a&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After the keynotes, I spent most of my time on the Forum floor.
This is where projects' communities gathered to discuss various topics
around an etherpad in the same fashion as the old design summit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cross-project-open-api-3-0-support"&gt;
&lt;h2&gt;Cross-project Open API 3.0 support&lt;/h2&gt;
&lt;p&gt;At the API session[1] we discussed improvements to the api-ref documentation
schema to be directly used by clients and servers.
The improvements are a challenge because the openstacksdk has complex logics
baked in to support different micro versions.
Moreover, we want to be able to test the new schema definitions and
perhaps be able to generate clients' and servers' code from the definitions.
I mentioned the GraphQL implementation[2] we have been working on
with Gilles Dubreuil since Vancouver, but this is a much bigger project that
was out of scope for this discussion.
I'm personally very interested in being able to use a more rigorous
schema for the restfuzz project testing purpose.
I'm looking forward new developments in this area.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="https://etherpad.openstack.org/p/api-berlin-forum-brainstorming"&gt;https://etherpad.openstack.org/p/api-berlin-forum-brainstorming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]: &lt;a class="reference external" href="https://review.openstack.org/575898"&gt;https://review.openstack.org/575898&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reusable-zuul-job-configurations"&gt;
&lt;h2&gt;Reusable Zuul Job Configurations&lt;/h2&gt;
&lt;p&gt;At the Zuul Job[3] we discussed improvements to share Zuul jobs.
I was able to suggest supporting tagged projects in the Zuul configuration
instead of being forced to use the master version of zuul-jobs.
This should simplify the current deprecation period and we would tag
zuul-jobs along with Zuul to ensure compatibility and better stability.
I also proposed that we document cross-project sibbling installations
and encourage contributions in zuul-jobs so that new languages such as
javascript or rust could benefit from the cross-project gating system
of Zuul.
We also discussed improvements to mitigate the issues we had in
RDO CI when trying to re-use the upstream devstack and triple-o jobs.
James Blair proposed to support foreign required projects which
would greatly improve usability.&lt;/p&gt;
&lt;p&gt;[3]: &lt;a class="reference external" href="https://etherpad.openstack.org/p/BER-reusable-zuul-job-configurations"&gt;https://etherpad.openstack.org/p/BER-reusable-zuul-job-configurations&lt;/a&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At the end of this first day I was too jetlagged to attend the Red Hat
party and went straight to my hotel to get a good night sleep. :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-2-keynotes"&gt;
&lt;h2&gt;Day 2 - Keynotes&lt;/h2&gt;
&lt;p&gt;At the second day's keynotes, Monty Taylor presented Zuul's project update[4]
and I was pleasantly surprised that two of the four new features were based
on Software Factory contributions: the React web interface and the Kubernetes
driver. Then Tobias Henkel gave a great presentation[5] on the CI needs of
BMW automotive software development and how they leverage
Zuul to accelerate and ensure a high quality standard. Besides the
compute resource scaling, for Tobias, the key feature of Zuul is the project
gating system which enables scaling development team.&lt;/p&gt;
&lt;p&gt;[4]: &lt;a class="reference external" href="https://www.youtube.com/watch?v=pqlTUZnS3Wg"&gt;https://www.youtube.com/watch?v=pqlTUZnS3Wg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5]: &lt;a class="reference external" href="https://www.youtube.com/watch?v=5yXvEleGgFE"&gt;https://www.youtube.com/watch?v=5yXvEleGgFE&lt;/a&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After the keynote I went back to the Forum floor and had some interesting
walk-alley discussions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="walk-alley-discussions"&gt;
&lt;h2&gt;Walk-Alley Discussions&lt;/h2&gt;
&lt;p&gt;We found a solution to improve multi-tenant labels by designing an
'allowed-labels' option in the Zuul tenant configuration, and I went ahead
and proposed an implementation[6]. This enabled further discussion about
another solution on the Nodepool side.&lt;/p&gt;
&lt;p&gt;As a follow-up I asked to merge the Nodepool code in Zuul to simplify this
kind of new feature and reduce code duplication. However, the Zuul core team
had a compeling argument for CI setup and how both projects are
effectively tested differently. In the end, we agreed that merging the
Zookeeper modules into a new nodepoollib repository would be a good compromise.&lt;/p&gt;
&lt;p&gt;We also discussed how it can be difficult to debug complex issues such as
NODE_FAILURE errors which requires lots of hop. Tobias suggested that we could
attach a transaction-id to log message for tracing all the events related
to a single connection trigger event. Incidentally, Matthieu Huin has been
working on a very similar feature in Cauth recently.&lt;/p&gt;
&lt;p&gt;Finally, we discussed how to improve Zuul's metric interface to enable native
Prometheus backend[7]. Different implementations have been proposed and the next
step is to collect all the existing metrics and find the best fit to refactor
the code.&lt;/p&gt;
&lt;p&gt;[6]: &lt;a class="reference external" href="https://review.openstack.org/617740"&gt;https://review.openstack.org/617740&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7]: &lt;a class="reference external" href="https://review.openstack.org/#/c/617220/"&gt;https://review.openstack.org/#/c/617220/&lt;/a&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then I gave a talk about log-classify and attended three more forum sessions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reduce-your-log-noise-using-machine-learning"&gt;
&lt;h2&gt;Reduce your log noise using machine learning&lt;/h2&gt;
&lt;p&gt;The presentation[8] went very well, more people than expected attended the talk.
We got some great feedback and it seems like many operators do not have
efficient log analysis in place.
One of the key requests is to support streaming
logs. We need a good internal interface to properly modelize such streams.
Another interesting feedback was about GDPR compliance and that log-classify
models is a good approach since the vectors are anonymised by design.&lt;/p&gt;
&lt;p&gt;[8]: &lt;a class="reference external" href="https://dirkmueller.github.io/presentation-berlin-log-classify/"&gt;https://dirkmueller.github.io/presentation-berlin-log-classify/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-marketplace-for-sharing-zuul-jobs-and-roles"&gt;
&lt;h2&gt;A marketplace for sharing Zuul jobs and roles&lt;/h2&gt;
&lt;p&gt;The BMW team presented[9] a new service[10] to provide a search interface and
jobs and roles usage metrics. This lead to a discussion about further
Zuul REST API improvements to better support such a use-case, and eventually
integrate the service directly into Zuul.&lt;/p&gt;
&lt;p&gt;[9]:  &lt;a class="reference external" href="https://etherpad.openstack.org/p/BER-zuul-jobs-marketplace"&gt;https://etherpad.openstack.org/p/BER-zuul-jobs-marketplace&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[10]: &lt;a class="reference external" href="https://github.com/bmwcarit/zubbi"&gt;https://github.com/bmwcarit/zubbi&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="opendev-feedback-and-missing-features"&gt;
&lt;h2&gt;OpenDev feedback and missing features&lt;/h2&gt;
&lt;p&gt;The former openstack-infra team discussed[11] the OpenDev upcoming rename
and how review.openstack.org namespaces are going to be moved to the new
system. Source code replication to external systems is going to be improved
so that it can be managed on a per-project basis.&lt;/p&gt;
&lt;p&gt;[11]: &lt;a class="reference external" href="https://etherpad.openstack.org/p/BER-opendev-feedback-and-missing-features"&gt;https://etherpad.openstack.org/p/BER-opendev-feedback-and-missing-features&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-project-onboarding"&gt;
&lt;h2&gt;Zuul - Project Onboarding&lt;/h2&gt;
&lt;p&gt;In the Zuul Project Onboarding, James Blair presented the new Zuul
QuickStart and how it can be used to quickly setup a test environment using
docker-compose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rdo-ceph-community-event"&gt;
&lt;h2&gt;RDO/Ceph community event&lt;/h2&gt;
&lt;p&gt;At the end of the second day, I went to the RDO/Ceph community event.
It had a more relaxed atmosphere than the main venue and it was great to
meet the community in this setting with good music and German beer.
It was also a good opportunity to meet with the new community manager
Rain Leander who took over Rich Bowen's role recently.&lt;/p&gt;
&lt;p&gt;I didn't attend the third day of the summit because it was already time
for me to go home. Once again, we have made great progress and I'm looking
forward to further developments.
Thanks you all for the great summit.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018 19 Oct to 8 Nov summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-19-oct-to-8-nov-summary.html" rel="alternate"></link><published>2018-11-08T10:00:00+00:00</published><updated>2018-11-08T10:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-11-08:/sprint-2018-19-oct-to-8-nov-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated zuul, nodepool packages and their dependencies to the latest release versions.&lt;/li&gt;
&lt;li&gt;We worked on a new Hands On Zuul blog post about using Secrets in jobs &lt;a class="reference external" href="https://softwarefactory-project.io/logs/78/14178/1/check/build-pages/1089650/pages/zuul-hands-on-part-5-job-secrets.html"&gt;https://softwarefactory-project.io/logs/78/14178/1/check …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated zuul, nodepool packages and their dependencies to the latest release versions.&lt;/li&gt;
&lt;li&gt;We worked on a new Hands On Zuul blog post about using Secrets in jobs &lt;a class="reference external" href="https://softwarefactory-project.io/logs/78/14178/1/check/build-pages/1089650/pages/zuul-hands-on-part-5-job-secrets.html"&gt;https://softwarefactory-project.io/logs/78/14178/1/check/build-pages/1089650/pages/zuul-hands-on-part-5-job-secrets.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on a preprod environment to validate the next SF 3.2 release upgrade (4 nodes with an external SF tenant with a dedicated gerrit)&lt;/li&gt;
&lt;li&gt;We are working to use vanilla CentOS image to run sf ci jobs&lt;/li&gt;
&lt;li&gt;We have refactored and re-enabled our CI test for ELK - previous tests were not stable enough&lt;/li&gt;
&lt;li&gt;We merged the username collision strategy handling. Operators can now decide whether to deny or differentiate users from different IdPs with the same username.&lt;/li&gt;
&lt;li&gt;We started work on adding a SSH key to manageSF, in order to expose SSH-related features in the API.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on a Zuul's Pagure driver WIP - Some new RFE opened on Pagure &lt;a class="reference external" href="https://review.openstack.org/#/c/604404/"&gt;https://review.openstack.org/#/c/604404/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated the JWT spec. It should be reviewed after the Berlin summit&lt;/li&gt;
&lt;li&gt;We submitted talks to CentOS Dojo, FOSDEM19&lt;/li&gt;
&lt;li&gt;We sorted zuul-jobs per &amp;quot;value&amp;quot; to us as consumers, next sprint we will start adding testing of these selected jobs as a 3rd party CI for upstream.&lt;/li&gt;
&lt;li&gt;We merged the kubernetes driver in Nodepool.&lt;/li&gt;
&lt;li&gt;We fixed small issues with the new Zuul React web interface.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-40 summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-40-summary.html" rel="alternate"></link><published>2018-10-04T17:21:00+00:00</published><updated>2018-10-04T17:21:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-10-04:/sprint-2018-40-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have fixed Gerrit replication issues for a couple projects in softwarefactory-project.io&lt;/li&gt;
&lt;li&gt;We have cleaned up the old nodepool configuration from review.rdoproject.org&lt;/li&gt;
&lt;li&gt;We updated the zuul packaging to accomodate the new React interface …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have fixed Gerrit replication issues for a couple projects in softwarefactory-project.io&lt;/li&gt;
&lt;li&gt;We have cleaned up the old nodepool configuration from review.rdoproject.org&lt;/li&gt;
&lt;li&gt;We updated the zuul packaging to accomodate the new React interface.&lt;/li&gt;
&lt;li&gt;We published a blog post about using Kubernetes as a Zuul resource provider with the Nodepool driver: &lt;a class="reference external" href="https://www.softwarefactory-project.io/kubernetes-nodepool-driver-tech-preview.html"&gt;https://www.softwarefactory-project.io/kubernetes-nodepool-driver-tech-preview.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We wrote a zookeeper housekeeping script to help recover from rdo-cloud outage.&lt;/li&gt;
&lt;li&gt;We worked on upgrade procedure to reduce services downtime.&lt;/li&gt;
&lt;li&gt;managesf - code cleaning&lt;/li&gt;
&lt;li&gt;managesf - refactoring resources call to remove shell script and fix potential issue with gunicorn timeout at apply. We now have a managesf-resources CLI.&lt;/li&gt;
&lt;li&gt;Zuul Hands-On gate pipelines article published &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-4-the-gate-pipeline.html"&gt;https://www.softwarefactory-project.io/zuul-hands-on-part-4-the-gate-pipeline.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We continue to validate vexxhost to run tripleo-ci jobs. We have deployment issue, probably because we use ceph on vexxhost and local storage on rdocloud. Vexxhost will provide flavors with local storage today for testing.&lt;/li&gt;
&lt;li&gt;We have a small PoC for integration of the tenant-scoped zuul API&lt;/li&gt;
&lt;li&gt;We have added new official centos cloud image (CentOS-7-x86_64-GenericCloud-1808) to sf-prod glance, integration with Zuul jobs in progress&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Started to investigate a Pagure driver for Zuul &lt;a class="reference external" href="https://review.openstack.org/#/c/604404/"&gt;https://review.openstack.org/#/c/604404/&lt;/a&gt; - Some issues open on Pagure to improve the API (Already scheduled for next Pagure release)&lt;/li&gt;
&lt;li&gt;we've submitted a &amp;quot;final&amp;quot; draft of the tenant scoped web API spec: &lt;a class="reference external" href="https://review.openstack.org/#/c/562321/"&gt;https://review.openstack.org/#/c/562321/&lt;/a&gt; but due to Ansible Fest, feedback has been low.&lt;/li&gt;
&lt;li&gt;Fixed zuul React interface publication jobs, it should land in zuul.openstack.org soon.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Hands on - part 4 - The gate pipeline</title><link href="https://www.softwarefactory-project.io/zuul-hands-on-part-4-the-gate-pipeline.html" rel="alternate"></link><published>2018-10-02T00:00:00+00:00</published><updated>2018-10-02T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-10-02:/zuul-hands-on-part-4-the-gate-pipeline.html</id><summary type="html">&lt;p&gt;In this article, we will explain one of the most important features of Zuul:
the &lt;strong&gt;dependent pipeline&lt;/strong&gt;, also known as the &lt;strong&gt;gate pipeline&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The examples and commands that follow are intended to be run on a Software Factory
sandbox where a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, we will explain one of the most important features of Zuul:
the &lt;strong&gt;dependent pipeline&lt;/strong&gt;, also known as the &lt;strong&gt;gate pipeline&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The examples and commands that follow are intended to be run on a Software Factory
sandbox where a &lt;strong&gt;demo-repo&lt;/strong&gt; repository exists. You should have such an environment
after following the previous articles in this series:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To deploy a Software Factory sandbox please read the &lt;a class="reference external" href="https://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;first article of the series&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To create the &lt;strong&gt;demo-repo&lt;/strong&gt; repository, please follow the sections &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#clone-the-config-repository"&gt;Clone the config repository&lt;/a&gt;
and &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#define-the-demo-repo-repository"&gt;Define the demo-repo repository&lt;/a&gt; sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Incidentally, most of the links reference &lt;em&gt;sftests.com&lt;/em&gt; which is the default
domain of the sandbox. Make sure to adapt the links if necessary.&lt;/p&gt;
&lt;p&gt;If you have already deployed a Software Factory sandbox and created a snapshot as
suggested, you can restore this snapshot in order to follow this article on a clean environment.
In that case make sure the virtual machine's time is correct post
restoration. If not fix it by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl stop ntpd&lt;span class="p"&gt;;&lt;/span&gt; ntpd -gq&lt;span class="p"&gt;;&lt;/span&gt; systemctl start ntpd
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-broken-master-phenomenon"&gt;
&lt;h2&gt;The broken master phenomenon&lt;/h2&gt;
&lt;p&gt;Keeping the master branch sane can be difficult when:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;validating a patch takes a long time (eg. complex test suite)&lt;/li&gt;
&lt;li&gt;the amount of patches proposals submitted to a project is quite high&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Until now, the best practices to mitigate these problems were to enforce the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;run continuous builds and test suites on master after each commit or as often
as possible&lt;/li&gt;
&lt;li&gt;have several maintainers granted with the power to reject or accept patches
into the project's master branch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These best practices, however, do &lt;strong&gt;not&lt;/strong&gt; guarantee the health of the master branch
&lt;em&gt;at any given time&lt;/em&gt;. Let's consider this very common scenario on a project with
two maintainers, &lt;strong&gt;M1&lt;/strong&gt; and &lt;strong&gt;M2&lt;/strong&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;M1&lt;/strong&gt; reviews change &lt;strong&gt;A&lt;/strong&gt; before integration: s.he applies &lt;strong&gt;A&lt;/strong&gt; to the current tip of the
master branch (&lt;strong&gt;HEAD+A&lt;/strong&gt;) and tests the code. After testing succeeds, &lt;strong&gt;M1&lt;/strong&gt; refreshes the
master branch, commits and pushes &lt;strong&gt;A&lt;/strong&gt; to the remote central repository.&lt;/li&gt;
&lt;li&gt;In the time it took &lt;strong&gt;M1&lt;/strong&gt; to test and push &lt;strong&gt;A&lt;/strong&gt;, &lt;strong&gt;M2&lt;/strong&gt; had approved change &lt;strong&gt;B&lt;/strong&gt; and pushed
it to the remote repository. This means the master branch history is actually &lt;strong&gt;HEAD+B+A&lt;/strong&gt;,
instead of &lt;strong&gt;HEAD+A&lt;/strong&gt; as it was validated by &lt;strong&gt;M1&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Unfortunately, &lt;strong&gt;B&lt;/strong&gt; has side effects on &lt;strong&gt;A&lt;/strong&gt; and the master branch is no longer building or
passing tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other words the master branch is &lt;strong&gt;broken&lt;/strong&gt;, and everybody working on the project
is impacted in some way, either because their own code won't build, or because they
have to figure out the problem and fix it.&lt;/p&gt;
&lt;p&gt;Sure, continuous builds help catch the problem as soon as possible, but if
building and running tests are costly operations in time and/or resources, and
therefore aren't performed after every commit, how many patches might have landed
since the breakage, making it even more difficult to pinpoint the change that caused
the issue?&lt;/p&gt;
&lt;p&gt;One could also object that maintainers just have to always make sure to
validate patches on the latest version of the master branch, but it might just
be too hard to enforce manually in projects where commits can occur faster than
testing or building. One would have to implement some form of &amp;quot;merging semaphore&amp;quot;,
meaning that maintainers would have to wait on each other, beating the purpose of
having several of them in the first place.&lt;/p&gt;
&lt;p&gt;But what if we could avoid that trouble altogether and &lt;strong&gt;guarantee&lt;/strong&gt; by design
of the integration pipeline that the master branch can pass tests and build &lt;em&gt;at all times&lt;/em&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-the-gate-keeper"&gt;
&lt;h2&gt;Zuul, the gate keeper&lt;/h2&gt;
&lt;p&gt;The trick is to deport the merging powers of the maintainers to a &lt;strong&gt;single, automated
&amp;quot;gate keeper&amp;quot;&lt;/strong&gt;. Maintainers approve patches for merging, and the gate keeper makes
sure they can land without breaking the master branch.&lt;/p&gt;
&lt;p&gt;Enter &lt;strong&gt;Zuul&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Thanks to its gate pipeline, Zuul decides whether a patch can be merged
into the master branch or not, by ensuring the patch is always tested over the
latest version of master prior to merging. This pipeline is designed to avoid
breaking the master branch.&lt;/p&gt;
&lt;p&gt;The gate pipeline takes care of the git rebases in order
to run CI job(s) on the expected state of the master at the time the patch will
be merged. This is called &lt;strong&gt;speculative testing&lt;/strong&gt;. Let's see how it changes the
previous scenario, this time in chronological order:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Maintainer &lt;strong&gt;M2&lt;/strong&gt; approves change &lt;strong&gt;B&lt;/strong&gt; for merging. Zuul gates it by running the acceptance
tests on &lt;strong&gt;HEAD+B&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Maintainer &lt;strong&gt;M1&lt;/strong&gt; approves change &lt;strong&gt;A&lt;/strong&gt; for merging as Zuul is still in the process of
gating &lt;strong&gt;B&lt;/strong&gt;. Zuul gates it by running the acceptance tests on &lt;strong&gt;HEAD+B+A&lt;/strong&gt;. This is where the
speculation bit occurs, since &lt;strong&gt;B&lt;/strong&gt; isn't in master yet but is &lt;em&gt;expected&lt;/em&gt; to land before &lt;strong&gt;A&lt;/strong&gt;,
&lt;em&gt;assuming its gating ends with success&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Testing on &lt;strong&gt;HEAD+B&lt;/strong&gt; succeeds, &lt;strong&gt;B&lt;/strong&gt; is merged into the master branch.&lt;/li&gt;
&lt;li&gt;Testing on &lt;strong&gt;HEAD+B+A&lt;/strong&gt; fails, &lt;strong&gt;A&lt;/strong&gt; is rejected. The maintainer or &lt;strong&gt;A&lt;/strong&gt;'s author must
rework it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(for simplicity's sake, we'll call acceptance tests, builds, and generally any kind
of automation used to validate a patch &lt;em&gt;&amp;quot;jobs&amp;quot;&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;The gate pipeline ensures that the merging order of patches
is the same as their approval order. If jobs for change &lt;strong&gt;B&lt;/strong&gt;, that is on top
of the gate pipeline, are still running when all jobs for change &lt;strong&gt;A&lt;/strong&gt; have
succeeded, then zuul will wait for &lt;strong&gt;B&lt;/strong&gt;'s jobs to finish to merge &lt;strong&gt;B&lt;/strong&gt;
then &lt;strong&gt;A&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What happens if &lt;strong&gt;B&lt;/strong&gt; is rejected, though? The gate pipeline is able to discard
failing patches and rebase subsequent changes in order to optimize testing time.
For example, let's imagine changes &lt;strong&gt;A&lt;/strong&gt;, &lt;strong&gt;B&lt;/strong&gt; and &lt;strong&gt;C&lt;/strong&gt; have entered the gate
pipeline in that order, and that a job fails when &lt;strong&gt;B&lt;/strong&gt; is on top of &lt;strong&gt;A&lt;/strong&gt;. The
pipeline will evolve like so:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;HEAD + A&lt;/li&gt;
&lt;li&gt;HEAD + A + B&lt;/li&gt;
&lt;li&gt;HEAD + A + B + C&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;HEAD + A&lt;/li&gt;
&lt;li&gt;HEAD + A + B &lt;strong&gt;FAIL&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;HEAD + A + B + C &lt;strong&gt;CANCELED&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;HEAD + A&lt;/li&gt;
&lt;li&gt;HEAD + A + C &lt;strong&gt;REBASED AND RESTARTED&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead of waiting for &lt;strong&gt;C&lt;/strong&gt;'s jobs that will propably fail as &lt;strong&gt;B&lt;/strong&gt; introduced
an issue, Zuul immediately cancels &lt;strong&gt;C&lt;/strong&gt;'s jobs, rebases &lt;strong&gt;C&lt;/strong&gt; on &lt;strong&gt;A&lt;/strong&gt; and restarts &lt;strong&gt;C&lt;/strong&gt;'s
jobs. Zuul reports the issue for &lt;strong&gt;B&lt;/strong&gt; on the code review system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-test-it"&gt;
&lt;h2&gt;Let's test it&lt;/h2&gt;
&lt;p&gt;Clone the &lt;strong&gt;demo-repo&lt;/strong&gt; and provision it with
&lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/hoz-4-demo-repo.tgz"&gt;this demo code&lt;/a&gt; .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/demo-repo
&lt;span class="nb"&gt;cd&lt;/span&gt; demo-repo
git review -s &lt;span class="c1"&gt;# Enter admin as username&lt;/span&gt;
tar -xzf /tmp/hoz-4-demo-repo.tgz -C .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, we are going to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;define the &lt;strong&gt;demo-repo&lt;/strong&gt; project's pipelines&lt;/li&gt;
&lt;li&gt;modify the project's tox configuration to add some delaying in the CI process&lt;/li&gt;
&lt;li&gt;submit and approve three patches to simulate how Zuul detects a future broken
master and discards the broken patch.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="setup-ci-jobs"&gt;
&lt;h3&gt;Setup CI jobs&lt;/h3&gt;
&lt;p&gt;First, in &lt;strong&gt;.zuul.yaml&lt;/strong&gt;, define the project's pipelines. We use the virtual job
&lt;strong&gt;noop&lt;/strong&gt; in the check pipeline to force Zuul to return a positive CI note
&lt;strong&gt;+1 Verified&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;noop&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, create the script &lt;strong&gt;trigger.sh&lt;/strong&gt; in order to better highlight the
gate pipeline's specificities in the status page. It adds some delay in the job's
execution time based on the existence of some files at the root of the project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f c3 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    sleep &lt;span class="m"&gt;20&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f c2 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f c1 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    sleep &lt;span class="m"&gt;90&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We make sure this script runs prior to unit testing by modifying the
&lt;strong&gt;tox.ini&lt;/strong&gt; file as indicated below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;pep8,py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[testenv]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;whitelist_externals&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;nose&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;./trigger.sh&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;nosetests -v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;[testenv:pep8]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;flake8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;flake8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, submit the change on Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x trigger.sh
git add -A .
git commit -m&lt;span class="s2"&gt;&amp;quot;Init demo-repo pipelines&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do not forget to approve the patch to let it land.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="run-the-scenario"&gt;
&lt;h3&gt;Run the scenario&lt;/h3&gt;
&lt;p&gt;In this scenario we propose three changes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first change (&lt;strong&gt;A&lt;/strong&gt;) changes the value returned by the run method.&lt;/li&gt;
&lt;li&gt;The second change (&lt;strong&gt;B&lt;/strong&gt;) adds a test to verify the length of the string returned
by the run method is less than ten characters. This change simulates a
situation where the unit tests pass when based on the tip of master
but fail when rebased on (&lt;strong&gt;A&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;The third patch (&lt;strong&gt;C&lt;/strong&gt;) adds a README.md file to the project. Its purpose
is to see how Zuul rebases it on (&lt;strong&gt;A&lt;/strong&gt;), once the issue with (&lt;strong&gt;B&lt;/strong&gt;) is
detected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Patches are available in &lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/hoz-5-patches.tgz"&gt;this archive&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Reset local copy to the base commit&lt;/span&gt;
git reset --hard &lt;span class="k"&gt;$(&lt;/span&gt;git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;Init demo-repo pipelines&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;print $1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="k"&gt;)&lt;/span&gt;
git am ../A.patch &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git review -i

&lt;span class="c1"&gt;# Reset local copy to the base commit&lt;/span&gt;
git reset --hard HEAD^1
git am ../B.patch &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git review -i

&lt;span class="c1"&gt;# Reset local copy to the base commit&lt;/span&gt;
git reset --hard HEAD^1
git am ../C.patch &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git review -i
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the gate pipeline, before merging the changes, Zuul will test them speculatively.&lt;/p&gt;
&lt;p&gt;Let's approve all of them in the right order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;cmsgs&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Change run payload&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Add payload size test&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Add project readme file&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; msg &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$cmsgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nv"&gt;rn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;import sys,json,requests;&lt;/span&gt;
&lt;span class="s2"&gt;from requests.packages.urllib3.exceptions import InsecureRequestWarning;requests.packages.urllib3.disable_warnings(InsecureRequestWarning);&lt;/span&gt;
&lt;span class="s2"&gt;changes=json.loads(requests.get(&amp;#39;https://sftests.com/r/changes/&amp;#39;, verify=False).text[5:]);&lt;/span&gt;
&lt;span class="s2"&gt;m=[c for c in changes if c[&amp;#39;subject&amp;#39;] == sys.argv[1]][0];&lt;/span&gt;
&lt;span class="s2"&gt;print ( m[&amp;#39;_number&amp;#39;] )&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$msg&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Set change approval (CR+2 and W+1) on change &lt;/span&gt;&lt;span class="nv"&gt;$rn&lt;/span&gt;&lt;span class="s2"&gt;,1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
ssh -p &lt;span class="m"&gt;29418&lt;/span&gt; admin@sftests.com gerrit review &lt;span class="nv"&gt;$rn&lt;/span&gt;,1 --code-review +2 --workflow +1&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then have a look at &lt;a class="reference external" href="https://sftests.com/zuul/t/local/status"&gt;Zuul's status page (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part5-c1.png" /&gt;
&lt;p&gt;You should soon observe that Zuul has canceled the running job for &lt;strong&gt;C&lt;/strong&gt;, and rebased
it on change &lt;strong&gt;A&lt;/strong&gt; as &lt;strong&gt;B&lt;/strong&gt; introduces an issue when rebased on &lt;strong&gt;A&lt;/strong&gt;. Zuul won't
merge &lt;strong&gt;B&lt;/strong&gt; but will report the failure on Gerrit; &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;C&lt;/strong&gt; will build successfully
and be merged.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part5-c2.png" /&gt;
&lt;img alt="None" src="images/zuul-hands-on-part5-c3.png" /&gt;
&lt;p&gt;Let's have a look at the Zuul Scheduler's logs (&lt;em&gt;/var/log/zuul/scheduler.log&lt;/em&gt;), try ssh to sftests.com virtual machine:&lt;/p&gt;
&lt;p&gt;The executor is told to start the tox-py27 job for change 25 (rebased on 24)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2018-09-04 10:25:44,795 INFO zuul.ExecutorClient: Execute job tox-py27 (uuid: 93dd828f3e62481e88f329f2eeed2608) on nodes &amp;lt;NodeSet OrderedDict([((&amp;#39;container&amp;#39;,), &amp;lt;Node 0000000030 (&amp;#39;container&amp;#39;,):runc-centos&amp;gt;)])OrderedDict()&amp;gt; for change &amp;lt;Change 0x7f53140ffd30 25,1&amp;gt; with dependent changes [{&amp;#39;change&amp;#39;: &amp;#39;24&amp;#39;, &amp;#39;branch&amp;#39;: &amp;#39;master&amp;#39;, &amp;#39;change_url&amp;#39;: &amp;#39;https://sftests.com/r/24&amp;#39;, &amp;#39;project&amp;#39;: {&amp;#39;short_name&amp;#39;: &amp;#39;demo-repo&amp;#39;, &amp;#39;canonical_hostname&amp;#39;: &amp;#39;sftests.com&amp;#39;, &amp;#39;canonical_name&amp;#39;: &amp;#39;sftests.com/demo-repo&amp;#39;, &amp;#39;src_dir&amp;#39;: &amp;#39;src/sftests.com/demo-repo&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;demo-repo&amp;#39;}, &amp;#39;patchset&amp;#39;: &amp;#39;1&amp;#39;}, {&amp;#39;change&amp;#39;: &amp;#39;25&amp;#39;, &amp;#39;branch&amp;#39;: &amp;#39;master&amp;#39;, &amp;#39;change_url&amp;#39;: &amp;#39;https://sftests.com/r/25&amp;#39;, &amp;#39;project&amp;#39;: {&amp;#39;short_name&amp;#39;: &amp;#39;demo-repo&amp;#39;, &amp;#39;canonical_hostname&amp;#39;: &amp;#39;sftests.com&amp;#39;, &amp;#39;canonical_name&amp;#39;: &amp;#39;sftests.com/demo-repo&amp;#39;, &amp;#39;src_dir&amp;#39;: &amp;#39;src/sftests.com/demo-repo&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;demo-repo&amp;#39;}, &amp;#39;patchset&amp;#39;: &amp;#39;1&amp;#39;}]
# job started
2018-09-04 10:25:50,533 INFO zuul.ExecutorClient: Build &amp;lt;gear.Job 0x7f5314138080 handle: b&amp;#39;H:10.0.2.15:17&amp;#39; name: executor:execute unique: 93dd828f3e62481e88f329f2eeed2608&amp;gt; started
[...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The executor process reports the issue to the scheduler&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2018-09-04 10:27:25,748 INFO zuul.ExecutorClient: Build &amp;lt;gear.Job 0x7f5314138080 handle: b&amp;#39;H:10.0.2.15:17&amp;#39; name: executor:execute unique: 93dd828f3e62481e88f329f2eeed2608&amp;gt; complete, result FAILURE
# the scheduler detects the nearest change in the queue is a failure so 26 is rebased on 24
2018-09-04 10:27:25,769 INFO zuul.Pipeline.local.gate: Resetting builds for change &amp;lt;Change 0x7f5319341e10 26,1&amp;gt; because the item ahead, &amp;lt;QueueItem 0x7f5318208400 for &amp;lt;Change 0x7f53140ffd30 25,1&amp;gt; in gate&amp;gt;, is not the nearest non-failing item, &amp;lt;QueueItem 0x7f53140934a8 for &amp;lt;Change 0x7f5314096390 24,1&amp;gt; in gate&amp;gt;
[...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart the &lt;em&gt;tox-py27&lt;/em&gt; job with the updated context&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2018-09-04 10:27:35,513 INFO zuul.ExecutorClient: Execute job tox-py27 (uuid: adfe76dd347e4b0fba56395a319ac67a) on nodes &amp;lt;NodeSet OrderedDict([((&amp;#39;container&amp;#39;,), &amp;lt;Node 0000000033 (&amp;#39;container&amp;#39;,):runc-centos&amp;gt;)])OrderedDict()&amp;gt; for change &amp;lt;Change 0x7f5319341e10 26,1&amp;gt; with dependent changes [{&amp;#39;change&amp;#39;: &amp;#39;24&amp;#39;, &amp;#39;branch&amp;#39;: &amp;#39;master&amp;#39;, &amp;#39;change_url&amp;#39;: &amp;#39;https://sftests.com/r/24&amp;#39;, &amp;#39;project&amp;#39;: {&amp;#39;short_name&amp;#39;: &amp;#39;demo-repo&amp;#39;, &amp;#39;canonical_hostname&amp;#39;: &amp;#39;sftests.com&amp;#39;, &amp;#39;canonical_name&amp;#39;: &amp;#39;sftests.com/demo-repo&amp;#39;, &amp;#39;src_dir&amp;#39;: &amp;#39;src/sftests.com/demo-repo&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;demo-repo&amp;#39;}, &amp;#39;patchset&amp;#39;: &amp;#39;1&amp;#39;}, {&amp;#39;change&amp;#39;: &amp;#39;26&amp;#39;, &amp;#39;branch&amp;#39;: &amp;#39;master&amp;#39;, &amp;#39;change_url&amp;#39;: &amp;#39;https://sftests.com/r/26&amp;#39;, &amp;#39;project&amp;#39;: {&amp;#39;short_name&amp;#39;: &amp;#39;demo-repo&amp;#39;, &amp;#39;canonical_hostname&amp;#39;: &amp;#39;sftests.com&amp;#39;, &amp;#39;canonical_name&amp;#39;: &amp;#39;sftests.com/demo-repo&amp;#39;, &amp;#39;src_dir&amp;#39;: &amp;#39;src/sftests.com/demo-repo&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;demo-repo&amp;#39;}, &amp;#39;patchset&amp;#39;: &amp;#39;1&amp;#39;}]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Zuul's &lt;strong&gt;dependent pipeline&lt;/strong&gt; is an elegant way to ensure the health of code
repositories at all times, allowing developers to focus on more important things like
new features, and expanding and automating test coverage.&lt;/p&gt;
&lt;p&gt;In this article, we showcased a simple use case but the features of the
&lt;strong&gt;dependent pipeline&lt;/strong&gt; also apply to complex project testing scenarios
(supported by Zuul) like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;multiple, parallelized jobs&lt;/li&gt;
&lt;li&gt;cross projects testing&lt;/li&gt;
&lt;li&gt;multi nodes jobs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This concludes this article about the &lt;strong&gt;gate pipeline&lt;/strong&gt;. Stay tuned for the
next article about Zuul secrets usage.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>Kubernetes Nodepool Driver Tech-Preview</title><link href="https://www.softwarefactory-project.io/kubernetes-nodepool-driver-tech-preview.html" rel="alternate"></link><published>2018-09-24T00:00:00+00:00</published><updated>2018-09-24T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2018-09-24:/kubernetes-nodepool-driver-tech-preview.html</id><summary type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The Kubernetes Driver is a tech-preview whose implementation
is still under review &lt;a class="reference external" href="https://review.openstack.org/535557"&gt;upstream&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This article demonstrates how to use Kubernetes as a Nodepool resource provider.&lt;/p&gt;
&lt;div class="section" id="setup-kube-config"&gt;
&lt;h2&gt;Setup kube/config&lt;/h2&gt;
&lt;p&gt;The driver requires cluster admin access to a Kubernetes service. For example,
on Openshift the cluster admin can be created using …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The Kubernetes Driver is a tech-preview whose implementation
is still under review &lt;a class="reference external" href="https://review.openstack.org/535557"&gt;upstream&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This article demonstrates how to use Kubernetes as a Nodepool resource provider.&lt;/p&gt;
&lt;div class="section" id="setup-kube-config"&gt;
&lt;h2&gt;Setup kube/config&lt;/h2&gt;
&lt;p&gt;The driver requires cluster admin access to a Kubernetes service. For example,
on Openshift the cluster admin can be created using these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc login -u system:admin
oc create sa nodepool-k8s
oc adm policy add-cluster-role-to-user cluster-admin --serviceaccount&lt;span class="o"&gt;=&lt;/span&gt;nodepool-k8s
oc policy add-role-to-user admin --serviceaccount&lt;span class="o"&gt;=&lt;/span&gt;nodepool-k8s
oc sa get-token nodepool-k8s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the cluster admin user needs to be configured for the nodepool service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u nodepool oc login CLUSTER_URL --token SA_TOKEN
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, the new provider could be configured in
/etc/software-factory/sfconfig.yaml nodepool provider section.
In this case, the sfconfig playbook would install
the token to the nodepool .kube/config automatically.&lt;/p&gt;
&lt;p&gt;Once the token is installed, use this command to get the context name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u nodepool oc config get-contexts
CURRENT   NAME               CLUSTER                     AUTHINFO  NAMESPACE
*         ...:nodepool-k8s   managesf-sftests-com:8443   ...       myproject
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-provider"&gt;
&lt;h2&gt;Setup provider&lt;/h2&gt;
&lt;p&gt;Add this nodepool configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /root/config/nodepool/k8s.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;linter-pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;min-ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-k8s&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kubernetes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;CONTEXT_NAME&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;nodepool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;linter-pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker.io/fedora:29&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Merge this file, wait for the config-update job and
check the nodepool launcher.log for any issues.
If there are no exceptions, then Nodepool has automatically
created a new namespace and a pod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nodepool list
+------------+----------+------------+---------------------+-------+-------------+--------+
&lt;span class="p"&gt;|&lt;/span&gt; ID         &lt;span class="p"&gt;|&lt;/span&gt; Provider &lt;span class="p"&gt;|&lt;/span&gt; Label      &lt;span class="p"&gt;|&lt;/span&gt; Server ID           &lt;span class="p"&gt;|&lt;/span&gt; State &lt;span class="p"&gt;|&lt;/span&gt; Age         &lt;span class="p"&gt;|&lt;/span&gt; Locked &lt;span class="p"&gt;|&lt;/span&gt;
+------------+----------+------------+---------------------+-------+-------------+--------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0000000000&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; my-k8s   &lt;span class="p"&gt;|&lt;/span&gt; linter-pod &lt;span class="p"&gt;|&lt;/span&gt; nodepool-0000000000 &lt;span class="p"&gt;|&lt;/span&gt; ready &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:00:00:05 &lt;span class="p"&gt;|&lt;/span&gt; locked &lt;span class="p"&gt;|&lt;/span&gt;
+------------+----------+------------+---------------------+-------+-------------+--------+

sudo -u nodepool oc --namespace&lt;span class="o"&gt;=&lt;/span&gt;nodepool-0000000000 get pods
NAME         READY     STATUS    RESTARTS   AGE
linter-pod   &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          1m
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After a job used that namespace, Nodepool automatically
destroys it and re-creates one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-job"&gt;
&lt;h2&gt;Setup job&lt;/h2&gt;
&lt;p&gt;Kubernetes pod doesn't work with &lt;em&gt;synchronize&lt;/em&gt; task.
Jobs that use a Kubernetes pod based nodeset need a
a special parent job to push the test project source on the pod
(in SF, the &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/sf-config/tree/ansible/roles/sf-repos/templates/config/zuul.d/_jobs-openshift.yaml.j2#n29"&gt;job&lt;/a&gt; is already configured and it is named: &lt;a class="reference external" href="https://softwarefactory-project.io/cgit/software-factory/sf-config/tree/ansible/roles/sf-repos/templates/config/playbooks/openshift/unprivileged-machine.yaml.j2"&gt;base-openshift-pod&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo-project/.zuul.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;linter-job&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base-openshift-pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;linter-pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the linter test playbook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo-project/pod.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ls -la&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul.project.src_dir&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python3 demo.py&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul.project.src_dir&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here is the running job status:&lt;/p&gt;
&lt;img alt="None" src="images/k8s-job/job-status.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here is the job review:&lt;/p&gt;
&lt;img alt="None" src="images/k8s-job/job-review.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And here is the job result:&lt;/p&gt;
&lt;img alt="None" src="images/k8s-job/job-result.png" /&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Kubectl task execution output is not reported in the console-output because
the zuul_stream callback requires a direct TCP connection to the test
instance. However, the task output is available in the A.R.A. report.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-38 summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-38-summary.html" rel="alternate"></link><published>2018-09-20T17:15:00+00:00</published><updated>2018-09-20T17:15:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-09-20:/sprint-2018-38-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have added cron/playbook to backup koji.softwarefactory-project.io  (incremental) + publication on backup.rdoproject.org of SF repos: &lt;a class="reference external" href="https://backup.rdoproject.org/sfkoji/repos/"&gt;https://backup.rdoproject.org/sfkoji/repos/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have bumped ze0[1-4] settings  in order to optimize executor …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have added cron/playbook to backup koji.softwarefactory-project.io  (incremental) + publication on backup.rdoproject.org of SF repos: &lt;a class="reference external" href="https://backup.rdoproject.org/sfkoji/repos/"&gt;https://backup.rdoproject.org/sfkoji/repos/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have bumped ze0[1-4] settings  in order to optimize executor resources usage, we handle a bit more  jobs on the executor w/o disk POST_FAILURE.&lt;/li&gt;
&lt;li&gt;Helped on prod with issues as eng-on-duty&lt;/li&gt;
&lt;li&gt;We wrote a script to clean-up a nodepool tenant when many instances are in ERROR state: &lt;a class="reference external" href="https://softwarefactory-project.io/r/13649"&gt;https://softwarefactory-project.io/r/13649&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated doing CI for OpenShift operators and AWX deployment: &lt;a class="reference external" href="https://www.softwarefactory-project.io/openshift-integration-testing-with-zuul.html"&gt;https://www.softwarefactory-project.io/openshift-integration-testing-with-zuul.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed a couple of display issues with Gerrit.&lt;/li&gt;
&lt;li&gt;We updated nodepool and zuul version to latest master in SF distgit.&lt;/li&gt;
&lt;li&gt;We have published two Zuul Hands-on Blog posts: &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We generated SF gerrit usage stats including team graphs using gerritstats: &lt;a class="reference external" href="https://jruzicka.fedorapeople.org/sf-gerrit-stats-2018-09/"&gt;https://jruzicka.fedorapeople.org/sf-gerrit-stats-2018-09/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reported an issue where Zuul can't dequeue GitHub event: &lt;a class="reference external" href="https://storyboard.openstack.org/#!/story/2003747"&gt;https://storyboard.openstack.org/#!/story/2003747&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our patch on nodepool solving a launch bug hitting OVB from time to time has been merged upstream&lt;/li&gt;
&lt;li&gt;we improved the scoping of the web admin API to the project level. There was some feedback on our (rather obsolete) spec for the web admin API, so we're reworking it before submitting for comments.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>OpenShift Integration Testing with Zuul</title><link href="https://www.softwarefactory-project.io/openshift-integration-testing-with-zuul.html" rel="alternate"></link><published>2018-09-20T00:00:00+00:00</published><updated>2018-09-20T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2018-09-20:/openshift-integration-testing-with-zuul.html</id><summary type="html">&lt;p&gt;This article demonstrates how Zuul can be used to run integration tests on
OpenShift.
It presents a couple of jobs to test Operator and CRD templates as well
as regular application deployment on OpenShift.
Note that this is different from the Nodepool OpenShift driver as these jobs
use a local …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article demonstrates how Zuul can be used to run integration tests on
OpenShift.
It presents a couple of jobs to test Operator and CRD templates as well
as regular application deployment on OpenShift.
Note that this is different from the Nodepool OpenShift driver as these jobs
use a local OpenShift cluster.&lt;/p&gt;
&lt;div class="section" id="base-job-and-roles"&gt;
&lt;h2&gt;Base Job and Roles&lt;/h2&gt;
&lt;p&gt;First, I wrote a job to install the requirements.
It uses an origin_version variable to test different versions of OpenShift:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# zuul.d/openshift-job.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;An abstract that installs requirements and pulls origin images.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pre-run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/openshift/requirements.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;abstract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;controller&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;centos-7&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;origin_repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;centos-release-openshift-origin310&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;origin_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.10&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the requirements.yaml pre-run playbook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# playbooks/openshift/requirements.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;controller&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install origin repository&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;yum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;origin_repo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install requirements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;yum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;item&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;with_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;maven&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fix docker start options&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;lineinfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/sysconfig/docker&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^OPTIONS=&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OPTIONS=&amp;#39;--selinux-enabled&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--log-driver=journald&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--signature-verification=false&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--insecure-registry&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;172.30.0.0/16&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# See: https://github.com/openshift/origin/issues/15038&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fix rhel secret issue&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/usr/share/rhel/secrets&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;absent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Start docker service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;started&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Pull origin images&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;docker&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pull&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;docker.io/openshift/{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;item&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}:{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;origin_version&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;with_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin-web-console&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin-docker-registry&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin-haproxy-router&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin-deployer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin-sti-builder&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin-pod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the default deploy-openshift role's tasks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# roles/openshift-deploy/tasks/main.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy local openshift cluster&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc cluster up --insecure-skip-tls-verify=true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create zuul user .kube directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/.kube&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup zuul user kube config&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/root/.kube/config&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/.kube/config&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.USER&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0600&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;remote_src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Login as system:admin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc login -u system:admin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Who am i&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc whoami -c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this job and role, it is relatively simple to do integration tests with
OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="radanalytics-operator-and-tutorial-integration-tests"&gt;
&lt;h2&gt;Radanalytics Operator and Tutorial Integration Tests&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://radanalytics.io/"&gt;Radanalytics&lt;/a&gt; provides Operators and Tutorial application. In this example,
I wanted to test the &lt;a class="reference external" href="https://github.com/radanalyticsio/spark-operator/"&gt;spark operator&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/radanalyticsio/tutorial-sparkpi-java-vertx"&gt;tutorial-sparkpi-java-vertx&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="openshift-operator-integration-test"&gt;
&lt;h3&gt;OpenShift Operator Integration test&lt;/h3&gt;
&lt;p&gt;I wrote a first job to build, deploy and test the operator standalone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# zuul.d/openshift-job.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration-operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/openshift/operator.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;A job that builds and deploys an operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Commented as the project is not configured in zuul&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# required-projects:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;#   - radanalyticsio/spark-operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;operator_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/radanalyticsio/spark-operator/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift39-integration-operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration-operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;origin_repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;centos-release-openshift-origin39&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;origin_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.9&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that Zuul isn't configured for this project, so I wrote a shim to
fetch the source code as if Zuul prepared the workspace. Here is the test
playbook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# playbooks/openshift/operator.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;controller&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;operator_src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/src/github.com/radanalyticsio/spark-operator&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pre_tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Shim to manually fetch operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_url&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;refspec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_ref&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(omit)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_version&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(omit)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# End of shim&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;import_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=operator-build&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;import_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=openshift-deploy&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;import_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=operator-deploy&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Verify operator is deployed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kubectl get pods&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run operator tests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make test&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy example cluster&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kubectl create -f examples/cluster.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Wait for example to be running&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc get pods --field-selector=status.phase=Running   -o &amp;quot;jsonpath={.items[?(@.metadata.labels.radanalytics\.io/podType==&amp;#39;master&amp;#39;)].metadata.name}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main_pod_name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;600&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;until&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;spark-cluster&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;main_pod_name.stdout&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get example cluster logs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;oc&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;logs&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;main_pod_name.stdout&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first task of this job is to build the operator locally so that the job
can test Pull Requests speculatively.
Here are the &lt;em&gt;operator-build&lt;/em&gt; and &lt;em&gt;operator-deploy&lt;/em&gt; roles:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# roles/operator-build/tasks/main.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build the operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make package&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build the operator image&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make image-build-slim&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Tag image&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker tag radanalyticsio/spark-operator:slim radanalyticsio/spark-operator:latest&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# roles/operator-deploy/tasks/main.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install the operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kubectl create -f manifest/operator.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Wait for operator pod to be running&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc get pods --field-selector=status.phase=Running -o &amp;quot;jsonpath={.items[?(@.metadata.labels.app\.kubernetes\.io/name==&amp;#39;spark-operator&amp;#39;)].metadata.name}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;operator_pod_name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;600&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;until&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;spark-operator&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_pod_name.stdout&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get operator logs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;oc&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;logs&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_pod_name.stdout&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I wrote these generic tasks as roles so that they can be easily re-used by
the tutorial integration job.&lt;/p&gt;
&lt;p&gt;Here is the &lt;a class="reference external" href="https://getara.org/"&gt;ARA&lt;/a&gt; report of the openshift-integration-operator job:&lt;/p&gt;
&lt;img alt="None" src="images/openshift-integration/operator-playbook.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And here is the last task output that displays a deployed spark
cluster's logs using the operator:&lt;/p&gt;
&lt;img alt="None" src="images/openshift-integration/operator-logs.png" /&gt;
&lt;p&gt;With that first job in place, it's simple to do integration
testing with the other Radanalytics projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="openshift-operator-application-integration-test"&gt;
&lt;h3&gt;OpenShift Operator Application Integration test&lt;/h3&gt;
&lt;p&gt;The second job I wrote tests the &lt;a class="reference external" href="https://github.com/radanalyticsio/tutorial-sparkpi-java-vertx"&gt;tutorial-sparkpi-java-vertx&lt;/a&gt;
demo application:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# zuul.d/openshift-job.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration-operator-tutorial&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/openshift/tutorial.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;A job that deploys an operator and tests the tutorial&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Commented as the projects are not configured in zuul&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# required-projects:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;#   - radanalyticsio/spark-operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;#   - radanalyticsio/tutorial-sparkpi-java-vertx&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;operator_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/radanalyticsio/spark-operator/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;tutorial_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/radanalyticsio/tutorial-sparkpi-java-vertx&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the test playbook pre-tasks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# playbooks/openshift/tutorial.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;controller&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;operator_src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/src/github.com/radanalyticsio/spark-operator&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;tutorial_src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/src/github.com/radanalyticsio/tutorial-sparkpi-java-vertx&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pre_tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Shim to manually fetch operator and tutorial&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Create&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;source&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;clone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;directory&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Clone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_url&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;refspec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_ref&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(omit)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;operator_version&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(omit)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Create&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;source&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;clone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;directory&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Clone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial_url&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;refspec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial_ref&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(omit)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial_version&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;default(omit)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Merge&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;PR&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;master&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;git&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;item&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;with_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;show --raw&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;branch pr&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;checkout master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;merge pr&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;show --raw&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;when&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tutorial_version != &amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# End of shim&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;import_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=operator-build&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;import_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=openshift-deploy&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;import_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=operator-deploy&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The challenge here is that the tutorial uses a BuildConfig to build an image of
the tutorial code before deployment. To do speculative tests, we need to serve
the source code locally. Here are the tutorial build tasks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Serve the tutorial from speculative git ref&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Bare clone the tutorial to serve build config&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;git&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;clone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--bare&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/tmp/repo&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update git server info to enable dump http clone&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;git&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;update-server-info&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup a fake git server service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;[Unit]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;Description=Git service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;After=syslog.target&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;[Service]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;WorkingDirectory=/tmp/repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;ExecStart=/usr/bin/env python -m SimpleHTTPServer 8000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/systemd/system/gitserver.service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Start service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;systemd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;gitserver&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;started&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;daemon-reload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy tutorial template&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;oc new-app --template oshinko-java-spark-build-dc&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-p APPLICATION_NAME=vertx-sparkpi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-p GIT_URI=&amp;quot;http://{{ ansible_default_ipv4.address }}:8000&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-p APP_FILE=sparkpi-app-1.0-SNAPSHOT-vertx.jar&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-p SPARK_OPTIONS=&amp;#39;--driver-java-options=&amp;quot;-Dvertx.cacheDirBase=/tmp/vertx-cache&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These tasks ensure that the application deployed is using the source prepared
by Zuul. Next I wrote a few test tasks to verify that the application
was working as expected.
In this example, it makes sure the PI calculation is correct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Wait for build to complete&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc get builds -o &amp;quot;jsonpath={.items[?(@.metadata.labels.buildconfig==&amp;#39;vertx-sparkpi&amp;#39;)].status.phase}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;_project_build&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;600&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;until&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;Complete&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;_project_build.stdout&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get build name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc get builds -o &amp;quot;jsonpath={.items[?(@.metadata.labels.buildconfig==&amp;#39;vertx-sparkpi&amp;#39;)].metadata.name}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;build_name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Grab build logs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;oc&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;logs&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;build/{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;build_name.stdout&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Wait for project to be running&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc get pods --field-selector=status.phase=Running  -o &amp;quot;jsonpath={.items[?(@.metadata.labels.app==&amp;#39;vertx-sparkpi&amp;#39;)].metadata.name}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tutorial_pod_name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;600&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;until&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;vertx-sparkpi&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial_pod_name.stdout&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Grab pod logs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;oc&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;logs&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tutorial_pod_name.stdout&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Expose an external route&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc expose svc/vertx-sparkpi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get route name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc get routes/vertx-sparkpi &amp;quot;--template={{&amp;#39;{{&amp;#39;}}.spec.host {{&amp;#39;}}&amp;#39;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec_host&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Wait for service to be running&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;spec_host.stdout&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;return_content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;webpage&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;600&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;until&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;Java&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Vert.x&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SparkPi&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;server&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;running&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;webpage.content&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get PI result&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;spec_host.stdout&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/sparkpi&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;return_content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check PI is correct&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Couldn&amp;#39;t&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;compute&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;PI&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;when&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;not pi.content.startswith(&amp;quot;Pi is rouuuughly 3.1&amp;quot;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the &lt;a class="reference external" href="https://getara.org/"&gt;ARA&lt;/a&gt; report of the openshift-integration-operator-tutorial job:&lt;/p&gt;
&lt;img alt="None" src="images/openshift-integration/tutorial-playbook.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="project-configuration"&gt;
&lt;h3&gt;Project Configuration&lt;/h3&gt;
&lt;p&gt;Using these two jobs, we can make sure operator changes don't break the
tutorial, and that the tutorial changes are working as expected.
More importantly, we can test cross dependency changes.
For example, Zuul can validate that the tutorial works with a new operator
feature Pull Request. Here is an example configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# zuul.d/project-config.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;radanalyticsio/spark-operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration-operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration-operator-tutorial&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift39-integration-operator&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;radanalyticsio/tutorial-sparkpi-java-vertx&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration-operator-tutorial&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because Zuul isn't actually configured for the radanalytics projects, I had
to use shims to setup the sources, here is a demonstration that manually tests
a Pull Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# zuul.d/project-config.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;openshift-integration-operator-tutorial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nt"&gt;tutorial_ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;refs/pull/8/head&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nt"&gt;tutorial_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;FETCH_HEAD&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &lt;a class="reference external" href="https://github.com/radanalyticsio/tutorial-sparkpi-java-vertx/pull/8"&gt;Pull Request&lt;/a&gt;
introduces an error in PI calculation by doubling the result,
and the job failed as expected:&lt;/p&gt;
&lt;img alt="None" src="images/openshift-integration/tutorial-logs.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ansible-tower-deployment-on-openshift"&gt;
&lt;h2&gt;Ansible Tower deployment on OpenShift&lt;/h2&gt;
&lt;p&gt;Similar to the Radanalytics integration jobs, here is a job that tests
Ansible Tower deployment on OpenShift:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# zuul.d/jobs.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-awx-install&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift-integration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;A job that tests awx install on openshift&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/awx/install-openshift.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;required-projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible/awx&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;override-checkout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;devel&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the test playbook pre-tasks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# playbooks/awx/install-openshift.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;controller&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;awx_src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/src/github.com/ansible/awx&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pre_tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;import_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=awx-build-image&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;import_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=openshift-deploy&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;import_role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=awx-install-openshift&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The challenge again is to use speculative images of Tower by the deployment
playbook. Here are the &lt;em&gt;awx-build-image&lt;/em&gt; and &lt;em&gt;awx-install-openshift&lt;/em&gt; roles:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# roles/awx-build-image/tasks/main.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build the image&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible-playbook -i inventory build.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;awx_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/installer&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# We need a more recent git to correctly discover awx_version&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# The default git doesn&amp;#39;t support --first-parent argument&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;PATH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/opt/rh/rh-git29/root/bin/:{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.PATH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# roles/awx-install-openshift/tasks/main.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Remove dockerhub_base variable&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;lineinfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;awx_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/installer/inventory&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;^dockerhub_base=&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;#dockerhub_base=&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Remove privileged command&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;lineinfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;awx_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/installer/roles/kubernetes/tasks/openshift.yml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.*adm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;policy.*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;    &lt;/span&gt;&lt;span class="s"&gt;true&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Fix: Failed to pull image &amp;quot;registry.access.redhat.com/rhscl/postgresql-96-rhel7&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fix postgres image location&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;awx_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/installer/roles/kubernetes/templates/postgresql-persistent.yml.j2&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;registry.access.redhat.com.rhscl.postgresql-96-rhel7&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;centos/postgresql-96-centos7&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set privileged context&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;oc --context &amp;quot;default/127-0-0-1:8443/system:admin&amp;quot; \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;adm policy add-scc-to-user privileged system:serviceaccount:myproject:awx&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Login with developer account&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc login -u developer -p developer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Grab openshift token&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc whoami -t&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift_token&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install awx on openshift&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;ansible-playbook -i inventory \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e openshift_host=127.0.0.1:8443 \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e openshift_skip_tls_verify=True \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e openshift_user=developer \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e openshift_password=developer \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e openshift_project=myproject \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e kubernetes_task_image=172.30.1.1:5000/myproject/awx_task \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e kubernetes_web_image=172.30.1.1:5000/myproject/awx_web \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e openshift_pg_emptydir=yes \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e docker_registry=172.30.1.1:5000 \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e docker_registry_repository=myproject \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e docker_registry_username=developer \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;-e docker_registry_password={{ openshift_token.stdout }} \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;install.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;awx_src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/installer&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# We need a more recent git to correctly discover awx_version&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# The default git doesn&amp;#39;t support --first-parent argument&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;PATH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/opt/rh/rh-git29/root/bin/:{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.PATH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These tasks ensure that the application deployed is using the source prepared
by Zuul. Here are the rest of the openshift-awx-install test tasks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Verify pods are running&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc status&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get route name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;oc get routes/awx-web-svc &amp;quot;--template={{&amp;#39;{{&amp;#39;}}.spec.host {{&amp;#39;}}&amp;#39;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec_host&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check web is working&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;spec_host.stdout&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;return_content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;webpage&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;600&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;until&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;working...&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;webpage.content&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install tower-cli&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install --user ansible-tower-cli&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Configure host&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/.local/bin/tower-cli&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;config&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;host&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;spec_host.stdout&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Login&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/.local/bin/tower-cli&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;login&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--password&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;password&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;admin&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Display versions&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/.local/bin/tower-cli&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;version&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Display roles&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_env.HOME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/.local/bin/tower-cli&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;role&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;list&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the &lt;a class="reference external" href="https://getara.org/"&gt;ARA&lt;/a&gt; report of the openshift-awx-install job:&lt;/p&gt;
&lt;img alt="None" src="images/openshift-integration/awx-playbook.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And here is a test task output:&lt;/p&gt;
&lt;img alt="None" src="images/openshift-integration/awx-logs.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Zuul can easily be used to run integration tests on OpenShift. Here are the
Pull Requests containing the demonstration jobs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/r/13584"&gt;Operator job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ansible/zuul-jobs/pull/6"&gt;AWX install job&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Hands on - part 3 - Use the Zuul jobs library</title><link href="https://www.softwarefactory-project.io/zuul-hands-on-part-3-use-the-zuul-jobs-library.html" rel="alternate"></link><published>2018-09-20T00:00:00+00:00</published><updated>2018-09-20T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-09-20:/zuul-hands-on-part-3-use-the-zuul-jobs-library.html</id><summary type="html">&lt;p&gt;In this article, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;provision a python project with a test suite based on tox&lt;/li&gt;
&lt;li&gt;explain how to use the &lt;a class="reference external" href="https://github.com/openstack-infra/zuul-jobs"&gt;zuul-jobs library&lt;/a&gt; in
order to benefit from jobs maintained by the Zuul community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that most of the links reference …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;provision a python project with a test suite based on tox&lt;/li&gt;
&lt;li&gt;explain how to use the &lt;a class="reference external" href="https://github.com/openstack-infra/zuul-jobs"&gt;zuul-jobs library&lt;/a&gt; in
order to benefit from jobs maintained by the Zuul community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that most of the links reference &lt;em&gt;sftests.com&lt;/em&gt; which is the default domain of the sandbox
documented in the &lt;em&gt;How to setup a Software Factory sandbox&lt;/em&gt; blog post. Make sure to adapt the
links if necessary.&lt;/p&gt;
&lt;p&gt;The examples and commands are intended to be run on a Software Factory
sandbox where a &lt;strong&gt;demo-repo&lt;/strong&gt; repository exists. You should have such an environment
after following the previous articles in this series:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To deploy a Software Factory sandbox please read the &lt;a class="reference external" href="https://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;first article of the series&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To create the &lt;strong&gt;demo-repo&lt;/strong&gt; repository, please follow the sections &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#clone-the-config-repository"&gt;Clone the config repository&lt;/a&gt;
and &lt;a class="reference external" href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html#define-the-demo-repo-repository"&gt;Define the demo-repo repository&lt;/a&gt; sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have already deployed a Software Factory sandbox and created a snapshot as
suggested, you can restore this snapshot to follow this article on a clean environment.
In that case make sure the system date of your virtual machine is correct post
restoration. If not fix it by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl stop ntpd&lt;span class="p"&gt;;&lt;/span&gt; ntpd -gq&lt;span class="p"&gt;;&lt;/span&gt; systemctl start ntpd
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-zuul-jobs-library"&gt;
&lt;h2&gt;The Zuul Jobs Library&lt;/h2&gt;
&lt;p&gt;By design Zuul promotes reusability in its approach to jobs. In that spirit, a
public jobs library is available at &lt;a class="reference external" href="https://git.zuul-ci.org"&gt;git.zuul-ci.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The library contains jobs that can be used directly as is, and more elementary
roles that can be included into your own playbooks.&lt;/p&gt;
&lt;p&gt;As of now the &lt;strong&gt;zuul-jobs&lt;/strong&gt; library covers mainly typical CI or
CD needs for Python and Javascript projects, for example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;publishing a package to PyPI&lt;/li&gt;
&lt;li&gt;tox tests&lt;/li&gt;
&lt;li&gt;npm commands&lt;/li&gt;
&lt;li&gt;documentation building with Sphinx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zuul however can support CI and CD for any language, and the library is a good
source of examples to start from when writing your own jobs. And if your jobs
are generic enough, do not hesitate to
&lt;a class="reference external" href="http://git.zuul-ci.org/cgit/zuul-jobs/"&gt;contribute upstream&lt;/a&gt; to enrich the library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="provision-the-demo-repo-source-code"&gt;
&lt;h2&gt;Provision the demo-repo source code&lt;/h2&gt;
&lt;p&gt;Clone &lt;strong&gt;demo-repo&lt;/strong&gt; and provision it with &lt;a class="reference external" href="https://www.softwarefactory-project.io/demo-codes/hoz-4-demo-repo.tgz"&gt;this demo code&lt;/a&gt; .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/demo-repo
&lt;span class="nb"&gt;cd&lt;/span&gt; demo-repo
git review -s &lt;span class="c1"&gt;# Enter admin as username&lt;/span&gt;
tar -xzf /tmp/hoz-4-demo-repo.tgz -C .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will add a &lt;strong&gt;tox ini file&lt;/strong&gt; to the repository, so unittests can be started
by running tox (obviously, make sure you have tox installed on your system first).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you went through the third article of the series to the end, remove also
the previous jobs and pipelines definitions, and the now useless hello.py file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm -r playbooks .zuul.yaml hello.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Push the code to the &lt;strong&gt;demo-repo&lt;/strong&gt; repository. Note that we don't use &lt;strong&gt;git review&lt;/strong&gt;
here to bypass the review process of Gerrit. We will reconfigure the CI later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Initialize demo-repo project&amp;quot;&lt;/span&gt;
git push gerrit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use-zuul-jobs-tox-jobs"&gt;
&lt;h2&gt;Use zuul-jobs tox jobs&lt;/h2&gt;
&lt;p&gt;Software Factory bundles a copy of the upstream zuul-jobs library. You can
browse zuul-jobs's &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=zuul-jobs.git;a=tree"&gt;source code (sftests.com)&lt;/a&gt; and
its &lt;a class="reference external" href="https://sftests.com/docs/zuul-jobs/"&gt;documentation (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As the &lt;strong&gt;demo-repo&lt;/strong&gt; source code comes with a tox file we can benefit from
the &lt;strong&gt;tox-py27&lt;/strong&gt; and &lt;strong&gt;tox-pep8&lt;/strong&gt; jobs defined in &lt;strong&gt;zuul-jobs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;demo-repo&lt;/strong&gt;, create the file &lt;strong&gt;.zuul.yaml&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-py27&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox-pep8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then submit the change on Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .zuul.yaml
git commit -m&lt;span class="s2"&gt;&amp;quot;Init demo-repo pipelines&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both jobs will be started in parallel by Zuul, as can be seen in the
&lt;a class="reference external" href="https://sftests.com/zuul/t/local/status"&gt;status (sftests.com)&lt;/a&gt; page.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part4-c1.png" /&gt;
&lt;p&gt;When the jobs are completed, the produced artifacts will be stored on the log
server as usual. Along with the expected console log, inventory file and ARA report,
you will also find the logs of the execution stages of tox in the &lt;strong&gt;tox&lt;/strong&gt;
directory.&lt;/p&gt;
&lt;p&gt;This concludes this article on how to use the zuul jobs library with your projects.&lt;/p&gt;
&lt;p&gt;To use the upstream version of the Zuul jobs library instead of
the one embedded in Software Factory, you can do so by following the steps described in this
&lt;a class="reference external" href="https://sftests.com/docs/operator/zuul_operator.html#use-openstack-infra-zuul-jobs"&gt;configuration section (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Stay tuned for the next article.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>Zuul Hands on - part 2 - Your first gated patch with Zuul</title><link href="https://www.softwarefactory-project.io/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html" rel="alternate"></link><published>2018-09-17T00:00:00+00:00</published><updated>2018-09-17T00:00:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-09-17:/zuul-hands-on-part-2-your-first-gated-patch-with-zuul.html</id><summary type="html">&lt;p&gt;In this article, we will create a project and explain how to configure a basic
CI workflow in order to gate your first patch with Zuul. The instructions and
examples below are given for a sandbox deployment but are easy to adapt to any
deployment of Software Factory.&lt;/p&gt;
&lt;p&gt;To deploy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, we will create a project and explain how to configure a basic
CI workflow in order to gate your first patch with Zuul. The instructions and
examples below are given for a sandbox deployment but are easy to adapt to any
deployment of Software Factory.&lt;/p&gt;
&lt;p&gt;To deploy a Software Factory sandbox please read this &lt;a class="reference external" href="https://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;article (How to setup a Software Factory sandbox)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that most of the links reference &lt;em&gt;sftests.com&lt;/em&gt; which is the default domain of the sandbox
documented in the &lt;em&gt;How to setup a Software Factory sandbox&lt;/em&gt; blog post. Make sure to adapt the
links if necessary.&lt;/p&gt;
&lt;div class="section" id="projects-in-software-factory"&gt;
&lt;h2&gt;Projects in Software Factory&lt;/h2&gt;
&lt;p&gt;A project is simply an umbrella entity that consists of one or several code
repositories, akin to a Github organization for example. It is a handy way to
regroup repositories by themes or purpose. A repository must belong to a
project. Don't be confused, in the Zuul terminology, a project is a git
repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-and-initialize-a-demo-project"&gt;
&lt;h2&gt;Create and initialize a demo project&lt;/h2&gt;
&lt;p&gt;We need to create a patch on the &lt;strong&gt;config&lt;/strong&gt; repository. This patch will consist in a
YAML file that describes the new repository.&lt;/p&gt;
&lt;p&gt;For the following example you will need to install git review package on your local machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dnf install git-review
or
yum install git-review
or
pip install git-review
or
python -m pip install git-review
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="clone-the-config-repository"&gt;
&lt;h3&gt;Clone the config repository&lt;/h3&gt;
&lt;p&gt;From your host, clone the config repository and configure &lt;strong&gt;git review&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/config
&lt;span class="nb"&gt;cd&lt;/span&gt; config
git review -s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted for your username on SF, use the &lt;strong&gt;admin&lt;/strong&gt; username.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="define-the-demo-repo-repository"&gt;
&lt;h3&gt;Define the demo-repo repository&lt;/h3&gt;
&lt;p&gt;Repositories are defined in the &lt;strong&gt;resources&lt;/strong&gt; folder of the config repository.
Each YAML file in this folder can define one or several Software Factory's
resources like a project or a Gerrit repository. You can read more about
the resources definition in &lt;a class="reference external" href="https://sftests.com/docs/user/resources_user.html"&gt;this documentation (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create the &lt;strong&gt;resources/demo-project.yaml&lt;/strong&gt; file and add the following into it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Demo project&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;source-repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;A demo repository&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;acl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;demo-acl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;acls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;demo-acl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[access &amp;quot;refs/*&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;owner = group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[access &amp;quot;refs/heads/*&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Code-Review = -2..+2 group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Code-Review = -2..+2 group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Verified = -2..+2 group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Workflow = -1..+1 group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Workflow = -1..+1 group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;label-Workflow = -1..+0 group Registered Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;submit = group config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group Registered Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[access &amp;quot;refs/meta/config&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;read = group Registered Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[receive]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;requireChangeId = true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;[submit]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;mergeContent = false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;action = merge if necessary&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;config-ptl&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;config-core&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;strong&gt;git review&lt;/strong&gt; to send the patch on Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add resources/demo-project.yaml
git commit -m&lt;span class="s2"&gt;&amp;quot;Add demo repo&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two Zuul jobs are attached to the &lt;strong&gt;config&lt;/strong&gt; repository. The following
workflow applies to patches on this repository:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;strong&gt;config-check&lt;/strong&gt; job validates incoming config patches (linting, syntax, etc).
This job is run at &lt;strong&gt;check&lt;/strong&gt; time (when a new patch or a new revision of a
patch is pushed on Gerrit) and at &lt;strong&gt;gating&lt;/strong&gt; time (after the patch is approved
and just before it is merged).&lt;/li&gt;
&lt;li&gt;Once merged, the &lt;strong&gt;config-update&lt;/strong&gt; job is executed, in the &lt;em&gt;post*&lt;/em&gt; pipeline to
apply the new configuration to Software Factory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, Zuul ensures the &lt;strong&gt;Configuration as Code&lt;/strong&gt; workflow of
Software Factory.&lt;/p&gt;
&lt;p&gt;To confirm the repository creation, connect to the &lt;a class="reference external" href="http://sftests.com/r/"&gt;Gerrit interface (sftests.com)&lt;/a&gt;
as the admin user, then find the &lt;strong&gt;Add demo repo&lt;/strong&gt; patch. Make sure &lt;strong&gt;Zuul CI&lt;/strong&gt;
has voted &lt;strong&gt;+1 Verified&lt;/strong&gt;, then approve and schedule for merging by giving the patch
a &lt;strong&gt;+2 Code-Review&lt;/strong&gt; and a &lt;strong&gt;+1 Workflow&lt;/strong&gt;.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c1.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Wait a couple of minutes until the &lt;strong&gt;demo-repo&lt;/strong&gt; appears in the
&lt;a class="reference external" href="https://sftests.com/r/#/admin/projects/"&gt;Gerrit projects list page (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="provision-the-demo-repo-source-code"&gt;
&lt;h3&gt;Provision the demo-repo source code&lt;/h3&gt;
&lt;p&gt;We can now clone &lt;strong&gt;demo-repo&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/demo-repo
&lt;span class="nb"&gt;cd&lt;/span&gt; demo-repo
git review -s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted for your username on SF, use the &lt;strong&gt;admin&lt;/strong&gt; username.&lt;/p&gt;
&lt;p&gt;Let's add some basic code in &lt;strong&gt;demo-repo&lt;/strong&gt;; create the following &lt;strong&gt;hello.py&lt;/strong&gt; file
in the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello Zuul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello Zuul&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Push the code to the &lt;strong&gt;demo-repo&lt;/strong&gt; repository. Note that we don't use &lt;strong&gt;git review&lt;/strong&gt;
here; we simply bypass the review process of Gerrit since no CI testing is configured
for this repository yet. We can do that because of the ACLs we set earlier on
the repository. Note also that the remote is called &lt;strong&gt;gerrit&lt;/strong&gt; (which has been
set by &lt;em&gt;git review -s&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add hello.py
git commit -m&lt;span class="s2"&gt;&amp;quot;Initialize demo-repo project&amp;quot;&lt;/span&gt;
git push gerrit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-a-zuul-job-for-demo-repo"&gt;
&lt;h2&gt;Configure a Zuul job for demo-repo&lt;/h2&gt;
&lt;p&gt;We will now create a job and configure the &lt;strong&gt;demo-repo&lt;/strong&gt; project's Zuul pipelines,
so that this job is run at checking and gating times to ensure the quality of a
patch.&lt;/p&gt;
&lt;p&gt;Zuul allows jobs and pipelines to be defined in an external repository (this is useful if you
have several repositories that share the same testing needs, for example setting up a
common testing environment), but also to be defined within a code repository itself.
This is the approach we're going to use here.&lt;/p&gt;
&lt;p&gt;First, we define a job playbook in &lt;strong&gt;demo-repo&lt;/strong&gt;. To do so, create the
&lt;strong&gt;playbook&lt;/strong&gt; directory then the file &lt;strong&gt;playbooks/unittests.yaml&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run unittests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sleep&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;60;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;python&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-m&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;unittest&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-v&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;hello&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul.project.src_dir&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we are using the &lt;strong&gt;zuul.project.src_dir&lt;/strong&gt; variable to set the task's working
directory to the repository's root. Zuul defines a fair amount of variables that
can be used when writing jobs; the full list and descriptions are available
&lt;a class="reference external" href="https://sftests.com/docs/zuul/reference/jobs.html#variables"&gt;in the Zuul's documentation (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the second step, we define the &lt;strong&gt;unit-tests&lt;/strong&gt; Zuul job and attach it to the
project's Zuul pipelines. Zuul looks for a file named &lt;strong&gt;.zuul.yaml&lt;/strong&gt; within the
repository; this file defines jobs and pipelines for this repository.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;demo-repo&lt;/strong&gt;, create the file &lt;strong&gt;.zuul.yaml&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;unit-tests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run unittest&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;playbooks/unittests.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;unit-tests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;unit-tests&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Submit the change to Gerrit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -A
git commit -m&lt;span class="s2"&gt;&amp;quot;Init demo-repo pipelines&amp;quot;&lt;/span&gt;
git review
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this time, we don't push directly the change to the repository but we
go through the code review system. This is because Zuul automatically detects
changes to the configuration files within a patch on the repository, and evaluates
them speculatively. In other words, the jobs we added to the check pipeline will
be run to validate the patch, even though this configuration change hasn't been merged yet.&lt;/p&gt;
&lt;p&gt;This lets you make sure that your changes to the CI do what you expect before applying
them globally, instead of potentially wrecking the CI for all contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gating-made-easy"&gt;
&lt;h2&gt;Gating made easy&lt;/h2&gt;
&lt;p&gt;With this rather simple patch, we tell Zuul to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;run the &lt;strong&gt;unit-tests&lt;/strong&gt; job in the &lt;strong&gt;check&lt;/strong&gt; pipeline, ie whenever a new
patch or a change to an existing patch is submitted to Gerrit.&lt;/li&gt;
&lt;li&gt;run the &lt;strong&gt;unit-tests&lt;/strong&gt; job in the &lt;strong&gt;gate&lt;/strong&gt; pipeline, ie right after a patch has
been approved but before it is merged. This is to acknowledge any discrepancies
between the state of the repository when the change was last tested and its
current state (several patches might have landed in between, with possible
interferences). We will dive into the details of the gate pipeline in a
follow-up article.&lt;/li&gt;
&lt;li&gt;call the Gerrit API to merge the patch if the job execution in the &lt;strong&gt;gate&lt;/strong&gt;
pipeline succeeded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;unit-tests&lt;/strong&gt; job is simple, it tells Zuul to execute the Ansible
playbook &lt;strong&gt;unittests.yaml&lt;/strong&gt;, which contains a single task, ie run python's
unittest module on the hello.py file.&lt;/p&gt;
&lt;p&gt;The job can be kept simple because it &amp;quot;inherits&amp;quot; automatically from the default
&lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=zuul.d/_jobs-base.yaml"&gt;base job (sftests.com)&lt;/a&gt;
which handles all of the grisly details like setting up the test environment and
exporting logs. The &lt;strong&gt;base&lt;/strong&gt; job, rather than being inherited, more accurately
encapsulates the unit-tests job, by running a &lt;strong&gt;pre&lt;/strong&gt; playbook before unit-tests,
and a &lt;strong&gt;post&lt;/strong&gt; playbook after &lt;strong&gt;unit-tests&lt;/strong&gt;, regardless of whether the latter
ended in success or failure.&lt;/p&gt;
&lt;p&gt;Because we haven't specified an inventory (also called &lt;em&gt;nodeset&lt;/em&gt;, due to Zuul's
multi-node capabilities), the &lt;strong&gt;unit-tests&lt;/strong&gt; job will be run on the default nodeset
defined in the &lt;strong&gt;base&lt;/strong&gt; job. By default in Software Factory it consists of a
single OCI container provided by the RunC driver of Nodepool.&lt;/p&gt;
&lt;p&gt;Software Factory's &lt;strong&gt;base&lt;/strong&gt; job's &lt;strong&gt;post&lt;/strong&gt; playbook exports the jobs' logs to the Software
Factory logs server.&lt;/p&gt;
&lt;p&gt;Now, check that Zuul has run the job in the check pipeline and has reported a
&lt;strong&gt;+1&lt;/strong&gt; in the &lt;em&gt;Verified Label&lt;/em&gt;, on the patch's Gerrit page.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c2.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To access a given job's run's logs, simply click on the job name. By default the
&lt;strong&gt;console logs&lt;/strong&gt; are saved in &lt;strong&gt;job-output.txt.gz&lt;/strong&gt;. The &lt;a class="reference external" href="https://ara.readthedocs.io"&gt;ARA report&lt;/a&gt;
gives a more condensed view of the playbook's execution. Also have a look at
&lt;strong&gt;zuul-info/inventory.yaml&lt;/strong&gt; which contains all Ansible variables available at
playbook runtime.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c3.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Just as we did before for the config project, use the Gerrit web interface to approve the
change and let Zuul run the gate job and merge the change.&lt;/p&gt;
&lt;p&gt;You should soon see the gate job appear on the &lt;a class="reference external" href="https://sftests.com/zuul/t/local/status"&gt;Zuul status page (sftests.com)&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c4.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Clicking on the job's name brings you to the Zuul job console. The &lt;strong&gt;unittests&lt;/strong&gt; playbook
should wait for 60 seconds before starting the &lt;strong&gt;python -m unittests&lt;/strong&gt; command
so we should have time to witness the execution of the job in real time in the console.&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c5.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As soon as the &lt;strong&gt;gate&lt;/strong&gt; job finishes successfully, Zuul merges the patch
in the &lt;strong&gt;demo-repo&lt;/strong&gt; repository.&lt;/p&gt;
&lt;p&gt;If you reached that point, congratulations, you successfully configured
Zuul to gate patches on &lt;strong&gt;demo-repo&lt;/strong&gt; !&lt;/p&gt;
&lt;img alt="None" src="images/zuul-hands-on-part3-c6.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, any new patch submitted to the &lt;strong&gt;demo-repo&lt;/strong&gt; repository will trigger automatically
this same CI workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exercises-left-to-the-reader"&gt;
&lt;h2&gt;Exercises left to the reader&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Send a new patch on demo-project that fails to pass the check pipeline. Then
fix it by amending it.&lt;/li&gt;
&lt;li&gt;Read the default &lt;strong&gt;base job&lt;/strong&gt; in the config repository in &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=zuul.d/_jobs-base.yaml;hb=refs/heads/master"&gt;_jobs-base.yaml (sftests.com)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read the &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=playbooks/base/pre.yaml;hb=refs/heads/master"&gt;pre.yaml (sftests.com)&lt;/a&gt; and &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=playbooks/base/post.yaml;hb=refs/heads/master"&gt;post.yaml&lt;/a&gt; playbooks that the &lt;strong&gt;base job&lt;/strong&gt; run prior and
after every job.&lt;/li&gt;
&lt;li&gt;Look at the &lt;a class="reference external" href="https://sftests.com/r/gitweb?p=config.git;a=blob;f=zuul.d/_pipelines.yaml;hb=refs/heads/master"&gt;default pipelines definitions (sftests.com)&lt;/a&gt;. Pipelines define strategies
to trigger jobs, and report job results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These files are part of how Zuul is integrated into Software Factory, they are
self managed but knowing their existence is quite important for mastering
Zuul.&lt;/p&gt;
&lt;p&gt;You can refer to Zuul's &lt;a class="reference external" href="https://zuul-ci.org/docs/"&gt;latest documentation&lt;/a&gt; or refer to &lt;a class="reference external" href="http://sftests.com/docs/zuul"&gt;the version&lt;/a&gt;
included with any Software Factory deployment.&lt;/p&gt;
&lt;p&gt;Stay tuned for the next article, where we will use Zuul's jobs library
to take advantage of pre-defined Ansible roles to ease job creation.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>Sprint 2018-36 summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-36-summary.html" rel="alternate"></link><published>2018-09-10T10:52:00+00:00</published><updated>2018-09-10T10:52:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-09-10:/sprint-2018-36-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continue to work on the Zuul Hands-on series, 3 new blog posts are almost ready to be merged (Gate a first patch, Use zuul-job library, The gate pipeline): &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/q/topic:hoz-series+(status:open+OR+status:merged"&gt;https://softwarefactory-project.io/r/#/q/topic:hoz-series …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continue to work on the Zuul Hands-on series, 3 new blog posts are almost ready to be merged (Gate a first patch, Use zuul-job library, The gate pipeline): &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/q/topic:hoz-series+(status:open+OR+status:merged"&gt;https://softwarefactory-project.io/r/#/q/topic:hoz-series+(status:open+OR+status:merged&lt;/a&gt;) &lt;a class="reference external" href="https://softwarefactory-project.io/logs/62/13562/6/check/build-pages/081eb1e/pages/tag/zuul-hands-on-series.html"&gt;https://softwarefactory-project.io/logs/62/13562/6/check/build-pages/081eb1e/pages/tag/zuul-hands-on-series.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Discussed commenting system to the SF blog, decided to investigate ISSO instead of using disqus: &lt;a class="reference external" href="https://tree.taiga.io/project/morucci-software-factory/us/1669"&gt;https://tree.taiga.io/project/morucci-software-factory/us/1669&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We split the ansible-network tenant and deployed a proper tenant instance for ansible with a config-repos hosted on github: &lt;a class="reference external" href="https://github.com/ansible/zuul-config/blob/master/resources/ansible.yaml"&gt;https://github.com/ansible/zuul-config/blob/master/resources/ansible.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We published a couple of blog post about using gertty to do review and a React presentation from a python developer point of view: &lt;a class="reference external" href="https://www.softwarefactory-project.io/reviewing-change-with-gertty.html"&gt;https://www.softwarefactory-project.io/reviewing-change-with-gertty.html&lt;/a&gt; and &lt;a class="reference external" href="https://www.softwarefactory-project.io/react-for-python-developers.html"&gt;https://www.softwarefactory-project.io/react-for-python-developers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on improved TLS settings to support different vhosts.&lt;/li&gt;
&lt;li&gt;We investigated a tool named npmfed to automate npm dependencies packaging: &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/13571/"&gt;https://softwarefactory-project.io/r/#/c/13571/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've updated the fix to nodepool that allows the node launch process to continue if a newly spawned node ends up in failing state but cannot be removed. The fix is now ready for review: &lt;a class="reference external" href="https://review.openstack.org/#/c/589854/"&gt;https://review.openstack.org/#/c/589854/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We continued working on react-zuul web interface using a better redux store design. We added follow-up page for jobs, build and config-errors notification drawer.&lt;/li&gt;
&lt;li&gt;We investigated using prometheus to monitor zuul metrics and trigger alert when queue gets too long: &lt;a class="reference external" href="https://review.openstack.org/#/c/599209/"&gt;https://review.openstack.org/#/c/599209/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We contributed a patch to zuul-jobs for fixing sphinx job to run w/o root access &lt;a class="reference external" href="https://review.openstack.org/#/c/599028"&gt;https://review.openstack.org/#/c/599028&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bridge.o.o is online and running only ansible, part of our cfg-mgmt-update topic. As well, base playbooks are all ansible, no more puppet.&lt;/li&gt;
&lt;li&gt;Coming week at PTG is to focus on removing more puppet in favor of ansible.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>React for python developers</title><link href="https://www.softwarefactory-project.io/react-for-python-developers.html" rel="alternate"></link><published>2018-09-01T00:00:00+00:00</published><updated>2018-09-01T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2018-09-01:/react-for-python-developers.html</id><summary type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Please be advised that this article is based on personal experimentation
without any prior knowledge of React. The information may be incorrect.
Please use at your own discretion.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this article I will present what I learned about React
from a Python developer point of view.&lt;/p&gt;
&lt;div class="section" id="package-manager"&gt;
&lt;h2&gt;Package Manager&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python …&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Please be advised that this article is based on personal experimentation
without any prior knowledge of React. The information may be incorrect.
Please use at your own discretion.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this article I will present what I learned about React
from a Python developer point of view.&lt;/p&gt;
&lt;div class="section" id="package-manager"&gt;
&lt;h2&gt;Package Manager&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;setup.py / setup.cfg&lt;/td&gt;
&lt;td&gt;package.json&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;requirements.txt&lt;/td&gt;
&lt;td&gt;package.json / yarn.lock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pip&lt;/td&gt;
&lt;td&gt;yarn&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Yarn is the pip of JavaScript. The differences are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It uses a virtualenv by default named node_modules.&lt;/li&gt;
&lt;li&gt;It installs command line tools in node_modules/.bin/.&lt;/li&gt;
&lt;li&gt;It generates a lock file to pin dependencies' version at install time.&lt;/li&gt;
&lt;li&gt;It can execute &amp;quot;scripts&amp;quot; defined in the package.json, similar to tox.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Applications can be bootstraped using &lt;a class="reference external" href="https://github.com/facebook/create-react-app#yarn"&gt;create-react-app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This sets up a &lt;em&gt;package.json&lt;/em&gt; file with commands to develop and distribute the
application. This also generates a README.md file with 'get-started'
information.&lt;/p&gt;
&lt;p&gt;Create a new project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh -e&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt; -p yarn &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Install yarn: https://yarnpkg.com/en/docs/install#centos-stable&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
yarn create react-app my-app
&lt;span class="nb"&gt;cd&lt;/span&gt; my-app
&lt;span class="c1"&gt;# Check README.md for project structure details&lt;/span&gt;

&lt;span class="c1"&gt;# Start a hot-reload development server&lt;/span&gt;
yarn start
&lt;span class="c1"&gt;# Run test&lt;/span&gt;
yarn &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="c1"&gt;# Build production files&lt;/span&gt;
yarn build

&lt;span class="c1"&gt;# Add dependencies&lt;/span&gt;
yarn add patternfly-react react-router react-router-dom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://yarnpkg.com/en/docs/usage"&gt;Yarn&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/facebook/create-react-app#yarn"&gt;create-react-app&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md"&gt;Use react-scripts&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linter"&gt;
&lt;h2&gt;Linter&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;flake8&lt;/td&gt;
&lt;td&gt;eslint&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Example configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# .eslintrc&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;babel-eslint&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;standard&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;jest&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;no-console&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;off&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;semi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;never&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;single&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;lines-between-class-members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;space-before-function-paren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;react/prop-types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;react/jsx-key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;react/no-did-mount-set-state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;react/no-did-update-set-state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;react/no-deprecated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Replace recommened by all or strict for pedantic code style.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;eslint:recommended&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;plugin:react/recommended&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;react&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;16.4&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;jest/globals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notes: add a linter command to the package.json:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn add --dev eslint-plugin-react eslint-plugin-standard eslint-plugin-jest

// Add a new script &lt;span class="k"&gt;in&lt;/span&gt; the package.json file:
//   &lt;span class="s2"&gt;&amp;quot;lint&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;eslint --ext .js --ext .jsx src&amp;quot;&lt;/span&gt;

// Run lint
yarn lint
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://eslint.org/docs/rules/"&gt;ESLint&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/yannickcr/eslint-plugin-react#list-of-supported-rules"&gt;React lint&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="language"&gt;
&lt;h2&gt;Language&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;ECMAScript 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Jinja&lt;/td&gt;
&lt;td&gt;JSX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;React applications are written in ECMAScript 6 (ES6) and the JSX syntax
extension.
ES6 is the new version of JavaScript (ES5), and JSX enables
UI using HTML elements inline.&lt;/p&gt;
&lt;div class="section" id="es6"&gt;
&lt;h3&gt;ES6&lt;/h3&gt;
&lt;p&gt;This python function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// or using implicit return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This python object's variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// or using destructuring assignment syntax&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This python import statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This python array/string manipulation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# array is now [1, 3, 4]&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello Python&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# return &amp;quot;Pyth&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// splice(starting index, number of elem) removed the 2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// array is now [1, 3, 4]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello Python&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// return &amp;quot;Pyth&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// slice(a, b) is similary to python [a:b]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://www.w3schools.com/jsref/jsref_obj_array.asp"&gt;Array reference&lt;/a&gt; and &lt;a class="reference external" href="https://www.w3schools.com/jsref/jsref_obj_string.asp"&gt;String reference&lt;/a&gt;.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This python exception handling code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Oops&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ne"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Oops&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Convenient iterators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// output a, b, c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// output 1 a, 2 b, 3 c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// return [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// return [&amp;quot;A&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// return [&amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: use web console to try code snippets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jsx"&gt;
&lt;h3&gt;JSX&lt;/h3&gt;
&lt;p&gt;This pseudo python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello Python&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const title = &amp;#39;Hello React&amp;#39;
return &amp;lt;h1&amp;gt;{title}&amp;lt;/h1&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To embed dynamic content in UI elements, use {} delimiter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const list = [{name: &amp;#39;a&amp;#39;}, {name: &amp;#39;b&amp;#39;}, {name: &amp;#39;c&amp;#39;}]
return (
  &amp;lt;ul&amp;gt;
    {list.map(item =&amp;gt; (&amp;lt;li&amp;gt;item.name&amp;lt;/li&amp;gt;))}
  &amp;lt;/ul&amp;gt;
)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://reactjs.org/docs/introducing-jsx.html"&gt;JSX&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="component"&gt;
&lt;h2&gt;Component&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;Component&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;self&lt;/td&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;React components are similar to Python class,
and they can be used as UI elements.&lt;/p&gt;
&lt;p&gt;This pseudo python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Title extends React.Component {
  render () {
    const { name } = this.props
    return (&amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;)
  }
}
const title = &amp;lt;Title name=&amp;#39;Hello React&amp;#39; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notes about components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Properties are static attributes given by the parent component:&lt;ul&gt;
&lt;li&gt;They are set as HTML properties.&lt;/li&gt;
&lt;li&gt;They are accessed through this.props.&lt;/li&gt;
&lt;li&gt;They can't be changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variables are stored in state:&lt;ul&gt;
&lt;li&gt;They can be initialized as component constructor or class member.&lt;/li&gt;
&lt;li&gt;They are set using this.setState({variableName: variableValue}).&lt;/li&gt;
&lt;li&gt;They are accessed through this.state.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Component lifecycle methods are:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;constructor()&lt;/strong&gt;: invoked once when the component is created.
State can be initialized during construction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;render()&lt;/strong&gt;: invoked each time the states or property are updated.
State &lt;strong&gt;can't&lt;/strong&gt; be changed during render.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;componentDidMount()&lt;/strong&gt;: invoked immediately after a component is
inserted into the DOM tree. State can be changed during componentDidMount.
Network operations are usualy done here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;componentDidUpdate(prevProps, prevState)&lt;/strong&gt;: invoked immediately
after updating occurs. This method is not called for the initial render.
Network operations can be done here too. Be careful when updating the state;
check prevState before to avoid a rendering loop.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;componentWillUnmount()&lt;/strong&gt;: invoked immediately after a component is
removed from the DOM tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any other component's function is static and &lt;em&gt;this&lt;/em&gt; (self) reference is not
available.
To bind a function to the instance, you need to use oneline syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Counter extends React.Component {
  constructor () {
    super()
    this.state = {value: 0}
  }
  // This clicked method doesn&amp;#39;t work, it is not binded
  clicked () {
    this.setState({value: this.state.value + 1})
  }
  // This clicked method works
  clicked = () =&amp;gt; {
    this.setState({value: this.state.value + 1})
  }
  render () {
    return (
      &amp;lt;Button onClick={this.clicked}&amp;gt;
        {this.state.value}
      &amp;lt;/Button&amp;gt;
    )
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://reactjs.org/docs/react-component.html#overview"&gt;Component&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="immutability"&gt;
&lt;h2&gt;Immutability&lt;/h2&gt;
&lt;p&gt;React manages component rendering through state update.
Be carreful to not modify the state directly&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;state = {
  items: []
  object: {}
}
// This doesn&amp;#39;t work. This will not re-render a component:
this.state.items.push(&amp;#39;New item&amp;#39;)
this.state.object.name = &amp;#39;New name&amp;#39;

// This works but it&amp;#39;s not recommended. use setState() method
const { items, object } = this.state;
items.push(&amp;#39;New item&amp;#39;);
object.name =  &amp;#39;New name&amp;#39;;
this.setState({
  items: items,
  object: object
});

// Better is to treat this.state as if it were immutable and use setState callback
// ... operator is the javascript spread syntax
this.setState(prevState =&amp;gt; ({
  items: [...prevState.items, &amp;#39;New item&amp;#39;],
  object: {
    ...prevState.object,
    name: &amp;#39;New name&amp;#39;
  }
}))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The spread syntax used to create a new element doesn't works with nested array or object.
So React provides immutability helpers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import update from &amp;#39;react-addons-update&amp;#39;

newItems = update(items, {$push: [&amp;#39;New item&amp;#39;]});
newObject = update(object, {$merge: {name: &amp;#39;New name&amp;#39;}})

// To remove item, splice can be used:
const items = [1, 2, 3, 4, 5]
update(items, {$splice: [[1, 1]]})         // Removes 2
update(items, {$splice: [[1, 1, 0]]})      // Replaces 2 by 0
update(items, {$splice: [[4, 1], [0, 1]]}) // Removes 5 and 1
// NOTE: $splice parameter order matter, always go from highest index to lowest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://reactjs.org/docs/update.html"&gt;Immutability Helpers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="routing"&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="55%" /&gt;
&lt;col width="45%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;argparse/click&lt;/td&gt;
&lt;td&gt;react-router&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To load different components based on users' actions, use react-router:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the App component needs to be inside a &amp;lt;Router&amp;gt; object.&lt;/li&gt;
&lt;li&gt;the App component uses &amp;lt;Switch&amp;gt; and &amp;lt;Route&amp;gt; to load needed component.&lt;/li&gt;
&lt;li&gt;Navigation is performed with &amp;lt;Link&amp;gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import React from &amp;#39;react&amp;#39;
import ReactDOM from &amp;#39;react-dom&amp;#39;
import { BrowserRouter as Router } from &amp;#39;react-router-dom&amp;#39;
import { withRouter, Link, Redirect, Route, Switch } from &amp;#39;react-router-dom&amp;#39;

class PageWelcome extends React.Component {
  render () { return (&amp;lt;h1&amp;gt;Page Welcome&amp;lt;/h1&amp;gt;) }
}
class PageAbout extends React.Component {
  render () { return (&amp;lt;h1&amp;gt;Page About&amp;lt;/h1&amp;gt;) }
}
class PageView extends React.Component {
  render () { return (&amp;lt;h1&amp;gt;Show {this.props.match.params.itemName}&amp;lt;/h1&amp;gt;) }
}

class App extends React.Component {
  render () {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;Link to=&amp;#39;/about&amp;#39;&amp;gt;About&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;Link to=&amp;#39;/view/item1&amp;#39;&amp;gt;Show item 1&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;Link to=&amp;#39;/view/item42&amp;#39;&amp;gt;Show item 42&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
        // React router will render the route component based on url
        &amp;lt;Switch&amp;gt;
          &amp;lt;Route path=&amp;#39;/welcome&amp;#39; component={PageWelcome} /&amp;gt;
          &amp;lt;Route path=&amp;#39;/about&amp;#39; component={PageAbout} /&amp;gt;
          &amp;lt;Route path=&amp;#39;/view/:itemName&amp;#39; component={PageView} /&amp;gt;
          &amp;lt;Redirect from=&amp;#39;*&amp;#39; to=&amp;#39;/welcome&amp;#39; key=&amp;#39;default-route&amp;#39; /&amp;gt;
        &amp;lt;/Switch&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
// withRouter enables react router and adds location and history props
export default withRouter(App)

// Router top-level component needs to be used
ReactDOM.render(&amp;lt;Router&amp;gt;&amp;lt;App /&amp;gt;&amp;lt;/Router&amp;gt;,
                document.getElementById(&amp;#39;root&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notes about router:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;BrowserRouter&lt;/em&gt; uses HTML5 URL, &lt;em&gt;HashRouter&lt;/em&gt; uses '#/' anchor URL.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Switch&lt;/em&gt; selects which page to render based on the URL.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Route&lt;/em&gt; path property can include parameters that are automatically set to
the props.match.params property.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://reacttraining.com/react-router/web/guides/basic-components"&gt;Router&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To serve a BrowserRouter build installed in /usr/share/app,
use this apache configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Directory /usr/share/app&amp;gt;
  Require all granted
&amp;lt;/Directory&amp;gt;
Alias / /usr/share/app/
&amp;lt;Location /&amp;gt;
  RewriteEngine on
  RewriteBase /
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_FILENAME} !-l
  # Any request that isn&amp;#39;t a local file is served with index.html
  RewriteRule . /index.html [L]
&amp;lt;/Location&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: to publish build with a sub-directory, change the 'homepage' setting
in package.json to set a custom location for the static files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="http-access"&gt;
&lt;h2&gt;HTTP Access&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;requests&lt;/td&gt;
&lt;td&gt;axios&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Axios library uses &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise&lt;/a&gt;, here is a demo that fetches the
Software Factory zuul version number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import React from &amp;#39;react&amp;#39;
import Axios from &amp;#39;axios&amp;#39;

const url = &amp;#39;https://softwarefactory-project.io/zuul/api/tenant/local/status&amp;#39;

class StatusPage extends React.Component {
  state = {
    status: null
  }

  componentDidMount () {
    Axios.get(url)
      .then(response =&amp;gt; {
        this.setState({status: response.data})
      })
      .catch(error =&amp;gt; {
        console.log(&amp;#39;Oops...&amp;#39;)
      })
  }

  render () {
    const { status } = this.state
    if (!status) {
      return &amp;lt;p&amp;gt;Loading...&amp;lt;/p&amp;gt;
    }
    return &amp;lt;p&amp;gt;Zuul version: {status.zuul_version}&amp;lt;/p&amp;gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notes about Axios:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;HTTP Verbs are function name:&lt;ul&gt;
&lt;li&gt;Axios.post(url, data)&lt;/li&gt;
&lt;li&gt;Axios.put(url, data)&lt;/li&gt;
&lt;li&gt;Axios.delete(url)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Axios takes care of json codec and it is compatible with older browsers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://github.com/axios/axios#example"&gt;Axios&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="patternfly"&gt;
&lt;h2&gt;PatternFly&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://rawgit.com/patternfly/patternfly-react/gh-pages/"&gt;Patternfly-react&lt;/a&gt; module enables React binding.&lt;/p&gt;
&lt;p&gt;List view example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import { ListView } from &amp;#39;patternfly-react&amp;#39;
import &amp;#39;patternfly/dist/css/patternfly.min.css&amp;#39;
import &amp;#39;patternfly/dist/css/patternfly-additions.min.css&amp;#39;

const itemList = [{&amp;#39;title&amp;#39;: &amp;#39;An item&amp;#39;, &amp;#39;content&amp;#39;: &amp;#39;Item content&amp;#39;}]
const listView = (
  &amp;lt;ListView&amp;gt;
    {itemList.map((item, idx) =&amp;gt; (
      &amp;lt;ListView.Item
        heading={item.title}
        hideCloseIcon={true}
        key={idx}
        expanded
        &amp;gt;
        {item.content}
      &amp;lt;/ListView.Item&amp;gt;
   ))}
  &amp;lt;/ListView&amp;gt;
)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Table example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import { Table } from &amp;#39;patternfly-react&amp;#39;

const headFormat = value =&amp;gt; &amp;lt;Table.Heading&amp;gt;{value}&amp;lt;/Table.Heading&amp;gt;
const cellFormat = (value) =&amp;gt; &amp;lt;Table.Cell&amp;gt;{value}&amp;lt;/Table.Cell&amp;gt;
const columns = [{
  header: {label: &amp;#39;Title&amp;#39;, formatters: [headFormat]},
  property: &amp;#39;title&amp;#39;,
  cell: {formatters: [cellFormat]}
}, {
  header: {label: &amp;#39;Content&amp;#39;, formatters: [headFormat]},
  property: &amp;#39;content&amp;#39;,
  cell: {formatters: [cellFormat]}
}]
const table = (
  &amp;lt;Table.PfProvider
     striped
     bordered
     hover
     columns={columns}
     &amp;gt;
     &amp;lt;Table.Header/&amp;gt;
     &amp;lt;Table.Body
        rows={itemList}
        rowKey=&amp;quot;title&amp;quot;
        /&amp;gt;
  &amp;lt;/Table.PfProvider&amp;gt;
)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Application framework example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import React from &amp;#39;react&amp;#39;
import { withRouter } from &amp;#39;react-router&amp;#39;
import { Link, Redirect, Route, Switch } from &amp;#39;react-router-dom&amp;#39;
import { Masthead } from &amp;#39;patternfly-react&amp;#39;
import &amp;#39;patternfly/dist/css/patternfly.min.css&amp;#39;
import &amp;#39;patternfly/dist/css/patternfly-additions.min.css&amp;#39;

import logo from &amp;#39;./images/logo.png&amp;#39;
// Routes can be defined using custom array, store it in a dedicated module.
import { routes } from &amp;#39;./routes&amp;#39;

class App extends React.Component {
  constructor () {
    super()
    this.menu = routes()
  }

  // Automatically render a menu with buttons for route with a title.
  renderMenu = () =&amp;gt; {
    const { location } = this.props
    const activeItem = this.menu.find(
      item =&amp;gt; location.pathname === item.to
    )
    return (
      &amp;lt;ul className=&amp;quot;nav navbar-nav navbar-primary&amp;quot;&amp;gt;
        {this.menu.filter(item =&amp;gt; item.title).map(item =&amp;gt; (
          &amp;lt;li key={item.to} className={item === activeItem ? &amp;#39;active&amp;#39; : &amp;#39;&amp;#39;}&amp;gt;
            &amp;lt;Link to={item.to}&amp;gt;{item.title}&amp;lt;/Link&amp;gt;
          &amp;lt;/li&amp;gt;
        ))}
      &amp;lt;/ul&amp;gt;
    )
  }

  // Automatically render the Switch and Route from the routes custom array.
  renderContent = () =&amp;gt; {
    const allRoutes = []
    this.menu.map((item, index) =&amp;gt; {
      allRoutes.push(
        &amp;lt;Route key={index} exact
               path={item.to}
               component={item.component} /&amp;gt;
      )
      return allRoutes
    })
    return (
      &amp;lt;Switch&amp;gt;
        {allRoutes}
        &amp;lt;Redirect from=&amp;quot;*&amp;quot; to=&amp;quot;/&amp;quot; key=&amp;quot;default-route&amp;quot; /&amp;gt;
      &amp;lt;/Switch&amp;gt;
    )
  }

  // Render the body of the application.
  render () {
    return (
      &amp;lt;React.Fragment&amp;gt;
        &amp;lt;Masthead
          iconImg={logo}
          navToggle
          thin
          &amp;gt;
          &amp;lt;div className=&amp;quot;collapse navbar-collapse&amp;quot;&amp;gt;
            {this.renderMenu()}
            &amp;lt;ul className=&amp;quot;nav navbar-nav navbar-utility&amp;quot;&amp;gt;
              &amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;https://docs.example.com/&amp;quot;
                   rel=&amp;quot;noopener noreferrer&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;
                  Documentation
                &amp;lt;/a&amp;gt;
              &amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/Masthead&amp;gt;
        &amp;lt;div className=&amp;quot;container-fluid container-cards-pf&amp;quot;&amp;gt;
          {this.renderContent()}
        &amp;lt;/div&amp;gt;
      &amp;lt;/React.Fragment&amp;gt;
    )
  }
}
export default withRouter(App)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// routes.js
// A custom routing structure that is easy to maintain.
import Welcome from &amp;#39;./pages/Welcome&amp;#39;
const routes = () =&amp;gt; [
  {
    title: &amp;#39;Welcome&amp;#39;,
    to: &amp;#39;/&amp;#39;,
    component: Welcome
  },
]
export { routes }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://www.patternfly.org/styles/icons/"&gt;Icon lists&lt;/a&gt;, &lt;a class="reference external" href="https://www.patternfly.org/pattern-library/"&gt;Patterns&lt;/a&gt;, &lt;a class="reference external" href="https://rawgit.com/patternfly/patternfly-react/gh-pages/"&gt;Patternfly-react&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="store"&gt;
&lt;h2&gt;Store&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;global&lt;/td&gt;
&lt;td&gt;redux&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To share a global context with any component, use a store with Redux and Thunk.&lt;/p&gt;
&lt;p&gt;Redux lets you &lt;strong&gt;dispatch&lt;/strong&gt; action and &lt;strong&gt;connect&lt;/strong&gt; store to component's properties.
This enables you to access global variable from nested components without having
to pass the property all the way down. This also handles state transition
and it provides powerful management.&lt;/p&gt;
&lt;p&gt;Similarly to the react-router &lt;em&gt;Browser&lt;/em&gt;, the App component needs to be inside
a &lt;em&gt;Provider&lt;/em&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// index.js | the main entry point
import React from &amp;#39;react&amp;#39;
import ReactDOM from &amp;#39;react-dom&amp;#39;
import { BrowserRouter as Router } from &amp;#39;react-router-dom&amp;#39;
import { Provider } from &amp;#39;react-redux&amp;#39;

import { createMyStore } from &amp;#39;./reducers&amp;#39;
import App from &amp;#39;./App&amp;#39;

const store = createMyStore()
ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;Router&amp;gt;&amp;lt;App /&amp;gt;&amp;lt;/Router&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&amp;#39;root&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a reducer for the &amp;quot;Zuul status fetch&amp;quot; demoed previously:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// api.js | keep the network code in a dedicated module
import Axios from &amp;#39;axios&amp;#39;
const api = &amp;#39;https://softwarefactory-project.io/zuul/api/tenant/local/&amp;#39;
function fetchStatus () {
   return Axios.get(api + &amp;#39;status&amp;#39;)
}
export { fetchStatus }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// reducers.js | store management
import { createStore, applyMiddleware, combineReducers } from &amp;#39;redux&amp;#39;
import thunk from &amp;#39;redux-thunk&amp;#39;
import { fetchStatus } from &amp;#39;./api&amp;#39;

// Reducers process action and update state accordingly.
const statusReducer = (state = null, action) =&amp;gt; {
  // state = null is the default state
  switch (action.type) {
    case &amp;#39;FETCH_STATUS_SUCCESS&amp;#39;:
      // when success action is dispatched, state becomes status
      return action.status
    default:
      return state
  }
}
function createMyStore () {
  // We can have multiple reducers for each context variable.
  return createStore(combineReducers({
    status: statusReducer,
  }), applyMiddleware(thunk))
}

// Actions to be dispatched.
function fetchStatusAction () {
  return (dispatch) =&amp;gt; {
    return fetchStatus ()
      .then(response =&amp;gt; {
        dispatch({type: &amp;#39;FETCH_STATUS_SUCCESS&amp;#39;, status: response.data})
      })
      .catch(error =&amp;gt; {
        throw (error)
      })
  }
}
export {
  createMyStore,
  fetchStatusAction,
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can connect the store to the Status page and a Refresh button:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Status.jsx
import React from &amp;#39;react&amp;#39;
import { connect } from &amp;#39;react-redux&amp;#39;

class Status extends React.Component {
  render () {
    // This property is automatically set by redux
    const { status } = this.props
    if (!status) {
      return &amp;lt;p&amp;gt;Loading...&amp;lt;/p&amp;gt;
    }
    return (
      &amp;lt;p&amp;gt;Zuul version: {status.zuul_version}&amp;lt;/p&amp;gt;
    )
  }
}

// The connect method binds the store status state to
// the component status property.
// When the status changes, the component is automatically updated.
export default connect(
  state =&amp;gt; ({
    status: state.status
  })
)(Status)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// App.jsx
import React from &amp;#39;react&amp;#39;
import { withRouter } from &amp;#39;react-router&amp;#39;
import { connect } from &amp;#39;react-redux&amp;#39;

import Status from &amp;#39;./Status&amp;#39;
import { fetchStatusAction } from &amp;#39;./reducers&amp;#39;

class App extends React.Component {
  render () {
    return (
      &amp;lt;div&amp;gt;
        {/* Clicking the button dispatch the fetchStatusAction and redux
            will update the Status component. */}
        &amp;lt;button onClick={() =&amp;gt; {this.props.dispatch(fetchStatusAction())}}&amp;gt;
          Fetch status
        &amp;lt;/button&amp;gt;
        &amp;lt;Status /&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
// Connect also adds a dispatch function property to dispatch action.
export default withRouter(connect()(App))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://redux.js.org/basics/actions"&gt;Redux basics&lt;/a&gt; and &lt;a class="reference external" href="https://redux.js.org/advanced/middleware"&gt;Thunk&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="tests"&gt;
&lt;h3&gt;Tests&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Python&lt;/th&gt;
&lt;th class="head"&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;unittest&lt;/td&gt;
&lt;td&gt;jest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tox&lt;/td&gt;
&lt;td&gt;yarn&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Jest is configured by the create-react-app command. The &lt;em&gt;test&lt;/em&gt;
script automatically load every file ending with &amp;quot;.test.jsx&amp;quot;.&lt;/p&gt;
&lt;p&gt;Tests scenario are defined using the &lt;em&gt;it()&lt;/em&gt; function and assertion are using
&lt;em&gt;expect&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;it(&amp;#39;demo expect&amp;#39;, () =&amp;gt; {
  expect(null).toBeNull()
  expect(42).toBe(42)
  expect(&amp;#39;test&amp;#39;).toMatch(&amp;#39;test&amp;#39;)
  expect([1, 2]).toContain(2)
  expect(() =&amp;gt; {throw Error()}).toThrow(Error)
  // Add not for negation
  expect(42).not.toBe(43)
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are a couple of tests for the Status store demoed previously:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Status.test.jsx
import React from &amp;#39;react&amp;#39;
import ReactTestUtils from &amp;#39;react-dom/test-utils&amp;#39;
import { Provider } from &amp;#39;react-redux&amp;#39;

import Status from &amp;#39;./Status&amp;#39;
import { createMyStore } from &amp;#39;./reducers&amp;#39;

it(&amp;#39;status render zuul version&amp;#39;, () =&amp;gt; {
  const store = createMyStore()
  // Dispatch a custom action to shortcut the Axios function.
  store.dispatch({type: &amp;#39;FETCH_STATUS_SUCCESS&amp;#39;, status: {zuul_version: 42}})
  const component = ReactTestUtils.renderIntoDocument(
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;Status /&amp;gt;
    &amp;lt;/Provider&amp;gt;
  )
  // Check that the status is properly updated.
  const statusDom = ReactTestUtils.findRenderedDOMComponentWithTag(
    component, &amp;#39;p&amp;#39;)
  expect(statusDom.textContent).toEqual(&amp;#39;Zuul version: 42&amp;#39;)
})
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// App.test.jsx
import React from &amp;#39;react&amp;#39;
import ReactTestUtils from &amp;#39;react-dom/test-utils&amp;#39;
import { Provider } from &amp;#39;react-redux&amp;#39;
import { BrowserRouter as Router } from &amp;#39;react-router-dom&amp;#39;

import App from &amp;#39;./App&amp;#39;
import * as api from &amp;#39;./api&amp;#39;

// Mock the fetchStatus Promise
api.fetchStatus = jest.fn().mockImplementation(
  () =&amp;gt; {
    return Promise.resolve({data: {zuul_version: 43}})
  }
)
it(&amp;#39;clicking the button fetch the status&amp;#39;, () =&amp;gt; {
  const store = createMyStore()
  const component = ReactTestUtils.renderIntoDocument(
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;Router&amp;gt;
        &amp;lt;App /&amp;gt;
      &amp;lt;/Router&amp;gt;
    &amp;lt;/Provider&amp;gt;
  )
  const buttonDom = ReactTestUtils.findRenderedDOMComponentWithTag(
    component, &amp;#39;button&amp;#39;)
  ReactTestUtils.Simulate.click(buttonDom)
  expect(api.fetchStatus.mock.calls.length).toBe(1);
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &amp;quot;CI=true&amp;quot; environment to make tests exit after execution.&lt;/p&gt;
&lt;p&gt;More information about: &lt;a class="reference external" href="https://jestjs.io/docs/en/getting-started"&gt;Jest&lt;/a&gt; and &lt;a class="reference external" href="https://reactjs.org/docs/test-utils.html"&gt;ReactTestUtils&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="all-the-references"&gt;
&lt;h2&gt;All the references&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Package management&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://yarnpkg.com/en/docs/usage"&gt;Yarn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/facebook/create-react-app#yarn"&gt;create-react-app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md"&gt;Use react-scripts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Language&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.w3schools.com/jsref/jsref_obj_array.asp"&gt;Array reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.w3schools.com/jsref/jsref_obj_string.asp"&gt;String reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;React&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://reactjs.org/docs/hello-world.html"&gt;Main concepts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://reactjs.org/docs/introducing-jsx.html"&gt;JSX&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://reactjs.org/docs/react-component.html#overview"&gt;Component&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://reactjs.org/docs/update.html"&gt;Immutability Helpers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://reacttraining.com/react-router/web/guides/basic-components"&gt;Router&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/axios/axios#example"&gt;Axios&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://reactjs.org/docs/test-utils.html"&gt;ReactTestUtils&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://reactkungfu.com/2015/07/approaches-to-testing-react-components-an-overview/"&gt;Testing React Component&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redux&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://redux.js.org/basics/actions"&gt;Redux basics&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://redux.js.org/advanced/middleware"&gt;Thunk&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PatternFly&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.patternfly.org/styles/icons/"&gt;Icon lists&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.patternfly.org/pattern-library/"&gt;Patterns&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://react-bootstrap.github.io/components/forms/"&gt;React bootstrap&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://rawgit.com/patternfly/patternfly-react/gh-pages/"&gt;Patternfly-react&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/patternfly/patternfly-react"&gt;Patternfly react sources&lt;/a&gt;
are sometime needed to search for actual mock example.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;My demo applications&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/591604"&gt;Zuul web interface&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/cgit/logreduce/tree/web"&gt;LogClassify web interface&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/#/c/591604/24/web/src/App.test.jsx"&gt;Zuul tenant tests&lt;/a&gt;.
and &lt;a class="reference external" href="https://review.openstack.org/#/c/591604/24/web/src/containers/status/ChangePanel.test.jsx"&gt;Zuul change panel test&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/cgit/logreduce/tree/web/src/pages/UserReport.jsx"&gt;Anomaly report form&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you find this application stack as interesting as I do.
That's it folks!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Reviewing change with gertty</title><link href="https://www.softwarefactory-project.io/reviewing-change-with-gertty.html" rel="alternate"></link><published>2018-08-30T00:00:00+00:00</published><updated>2018-08-30T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2018-08-30:/reviewing-change-with-gertty.html</id><summary type="html">&lt;p&gt;This article presents how to use gertty to review Software Factory changes.
The goal is to improve the review workflow and overcome the query limit of
Gerrit REST to create dashboard for the many projects of Software Factory.&lt;/p&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Documentation: &lt;a class="reference external" href="https://pypi.org/project/gertty/"&gt;https://pypi.org/project/gertty/&lt;/a&gt;
Reference configuration: &lt;a class="reference external" href="https://git.openstack.org/cgit/openstack/gertty/tree/examples/reference-gertty.yaml"&gt;https://git.openstack …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This article presents how to use gertty to review Software Factory changes.
The goal is to improve the review workflow and overcome the query limit of
Gerrit REST to create dashboard for the many projects of Software Factory.&lt;/p&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Documentation: &lt;a class="reference external" href="https://pypi.org/project/gertty/"&gt;https://pypi.org/project/gertty/&lt;/a&gt;
Reference configuration: &lt;a class="reference external" href="https://git.openstack.org/cgit/openstack/gertty/tree/examples/reference-gertty.yaml"&gt;https://git.openstack.org/cgit/openstack/gertty/tree/examples/reference-gertty.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dnf install y python-gertty &lt;span class="o"&gt;||&lt;/span&gt; pip install --user gertty
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-1"&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;This is my configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ~/.gertty.yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# replace APIKEY with the one from:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# https://softwarefactory-project.io/sf/user_settings.html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# replace USERNAME with your Github username&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# replace RDO_APIKEY with the one from:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# https://review.rdoproject.org/sf/user_settings.html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# replace OPENSTACK_USERNAME with your openstack username&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# replace OPENSTACK_PASSWORD with the one from:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# https://review.openstack.org/#/settings/http-password&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# replace GERTTY_HOME with an absolute path to store gertty data&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;servers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sf&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://softwarefactory-project.io/r/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;git-url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssh://${USERNAME}@softwarefactory-project.io:29418&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;auth-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;basic&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${USERNAME}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${APIKEY}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;git-root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${GERTTY_HOME}/sf/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;log-file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${GERTTY_HOME}/sf.log&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${GERTTY_HOME}/sf.sock&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;dburi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sqlite:///${GERTTY_HOME}/sf.db&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rdo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://review.rdoproject.org/r/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;git-url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssh://${USERNAME}@review.rdoproject.org:29418&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;auth-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;basic&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${USERNAME}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${RDO_APIKEY}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;git-root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${GERTTY_HOME}/rdo/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;log-file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${GERTTY_HOME}/rdo.log&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${GERTTY_HOME}/rdo.sock&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;dburi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sqlite:///${GERTTY_HOME}/rdo.db&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openstack&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://review.openstack.org/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;git-url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssh://${OPENSTACK_USERNAME}@review.openstack.org:29418&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${OPENSTACK_USERNAME}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${OPENSTACK_PASSWORD}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;git-root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${GERTTY_HOME}/openstack/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;log-file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${GERTTY_HOME}/openstack.log&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${GERTTY_HOME}/openstack.sock&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;dburi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sqlite:///${GERTTY_HOME}/openstack.db&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;hide-comments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^(.*CI|Jenkins)$&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Comment to use the default side-by-side&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;diff-view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;unified&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Gertty handles mouse input by default.  Don&amp;#39;t mess with my terminal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# mouse handling:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;handle-mouse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;dashboards&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Needs&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;review&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status:open&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;owner:self&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;label:Verified&amp;gt;=1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;label:Code-Review&amp;gt;=1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;f2&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Patches&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status:open&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;owner:self&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;f3&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;am&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;reviewer,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;but&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;haven&amp;#39;t&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;voted&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;current&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;revision&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status:open&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;label:Code-Review&amp;lt;=-1,self&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;label:Code-Review&amp;gt;=1,self&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;reviewer:self&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;f4&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Passed&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CI,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;No&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Negative&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Feedback&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status:open&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;label:Code-Review&amp;gt;=0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;label:Verified&amp;lt;=-1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;owner:self&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;reviewer:self&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;f5&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Maybe&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Review?&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status:open&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;owner:self&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;reviewer:self&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;limit:25&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;f6&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;All&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;patches&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status:open&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;label:Workflow&amp;lt;=-1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;f7&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &amp;quot;gertty&amp;quot; for sf's gerrit, &amp;quot;gertty rdo&amp;quot; for review.rdoproject.org and
&amp;quot;gertty openstack&amp;quot; for review.openstack.org&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="auto-subscribe-to-sf-projects"&gt;
&lt;h3&gt;Auto subscribe to SF projects&lt;/h3&gt;
&lt;p&gt;Start gertty once, wait for &lt;em&gt;sync&lt;/em&gt; on top right to reach 0,
press 'Ctrl-q' to close it and use this command to mass subscribe:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sqlite3 &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GERTTY_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/sf.db &lt;span class="s1"&gt;'update project set subscribed = true where name like &amp;quot;%software%factory%&amp;quot; or name like &amp;quot;scl/%&amp;quot;'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When gertty starts again, it will takes sometime to sync and clone all the
projects. Wait for &lt;em&gt;sync&lt;/em&gt; to reach 0 before continuing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Here are some note to get started.&lt;/p&gt;
&lt;div class="section" id="help"&gt;
&lt;h3&gt;Help&lt;/h3&gt;
&lt;p&gt;On any page, use '?' or 'F1' to display the local keybindings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sync"&gt;
&lt;h3&gt;Sync&lt;/h3&gt;
&lt;p&gt;Gertty maintains a local cache and synchronize it periodically, look for the
&lt;em&gt;Sync&lt;/em&gt; number on the top right and wait until it reach 0.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Press 'Ctrl-r' to force a resync.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="project-subscription"&gt;
&lt;h3&gt;Project subscription&lt;/h3&gt;
&lt;p&gt;Check the projects you are subscribed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Press 'ESC' many times or 'META-HOME' to go to the project list.&lt;/li&gt;
&lt;li&gt;Press 'L' to load the list of all projects.&lt;/li&gt;
&lt;li&gt;Press 's' on a project to subscribe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dashboards"&gt;
&lt;h3&gt;Dashboards&lt;/h3&gt;
&lt;p&gt;The main page shows the open changes per subscribed project.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Press 'f2', 'f3', ... to load the custom dashboard defined in the conf.&lt;/li&gt;
&lt;li&gt;Press 'Su' to sort by update date and 'Sr' to reverse the sort.&lt;/li&gt;
&lt;li&gt;Press '?' to see available action from changes list.&lt;/li&gt;
&lt;li&gt;Press 'ENTER' to review a change.&lt;/li&gt;
&lt;li&gt;Press 'ESC' to close a dashboard (or any windows).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Changes visibility is defined by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Un-reviewed changes are visible.&lt;/li&gt;
&lt;li&gt;Press 'k' to &lt;em&gt;kill&lt;/em&gt; a review. This is useful for DO-NOT-MERGE changes.&lt;/li&gt;
&lt;li&gt;Press 'v' to mark a change reviewed. This is useful when you left a comment
without a review.&lt;/li&gt;
&lt;li&gt;Press 'l' to toggle hidden changes display.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="change-review"&gt;
&lt;h3&gt;Change review&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Press 'ARROWS' to move the cursor&lt;/li&gt;
&lt;li&gt;Select '&amp;lt; Diff &amp;gt;' to show the diff&lt;ul&gt;
&lt;li&gt;Press 'p' to change base patchset diff&lt;/li&gt;
&lt;li&gt;Press 'Enter' to leave a comment&lt;/li&gt;
&lt;li&gt;Press 'ESC' to close the diff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select '&amp;lt; Review &amp;gt;' to submit a review&lt;/li&gt;
&lt;li&gt;Press 't' to see Zuul comments&lt;/li&gt;
&lt;li&gt;Press 'ESC' to close a review&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Gertty has a little learning curves, especially if you are not used to ncurse
interface, but it pays off.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-34 summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-34-summary.html" rel="alternate"></link><published>2018-08-27T06:35:00+00:00</published><updated>2018-08-27T06:35:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-08-27:/sprint-2018-34-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated cgit to fix a security vulnerability.&lt;/li&gt;
&lt;li&gt;We started a Zuul Case study interview: &lt;a class="reference external" href="https://softwarefactory-project.io/etherpad/p/zuul-case-study"&gt;https://softwarefactory-project.io/etherpad/p/zuul-case-study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started to add a new provider (vexxhost) on our nodepool deployement to validate we …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated cgit to fix a security vulnerability.&lt;/li&gt;
&lt;li&gt;We started a Zuul Case study interview: &lt;a class="reference external" href="https://softwarefactory-project.io/etherpad/p/zuul-case-study"&gt;https://softwarefactory-project.io/etherpad/p/zuul-case-study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We started to add a new provider (vexxhost) on our nodepool deployement to validate we can run tripleo-ci jobs on this provider.&lt;/li&gt;
&lt;li&gt;We validated ovb is functional on vexxhost following explanations provided by bnemec (blog.nemebean.com/content/openstack-virtual-baremetal-public-cloud)&lt;/li&gt;
&lt;li&gt;We added an afs-mirror and a te-broker node on vexxhost project.&lt;/li&gt;
&lt;li&gt;We have to finalize to integration by adding the provider on our nodepool configuration to run jobs and get metrics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued working on adding Openshift support to Zuul/Nodepool: &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:container-build-resources"&gt;https://review.openstack.org/#/q/topic:container-build-resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed the AWS Nodepool driver.&lt;/li&gt;
&lt;li&gt;We proposed to rewrite Zuul web interface in React: &lt;a class="reference external" href="http://lists.zuul-ci.org/pipermail/zuul-discuss/2018-August/000528.html"&gt;http://lists.zuul-ci.org/pipermail/zuul-discuss/2018-August/000528.html&lt;/a&gt; , DEMO: &lt;a class="reference external" href="http://38.145.32.112/zuul/"&gt;http://38.145.32.112/zuul/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We continued working on the log-classify infra spec: &lt;a class="reference external" href="https://review.openstack.org/581214"&gt;https://review.openstack.org/581214&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;retire legacy nodesets upstream, legacy-opensuse-423 and legacy-fedora-27&lt;/li&gt;
&lt;li&gt;Clean up bifrost legacy jobs&lt;/li&gt;
&lt;li&gt;Restart zuul executors to pick up 0777 fix for executor-git folders.&lt;/li&gt;
&lt;li&gt;Zuul: Allow run to be list of playbooks: &lt;a class="reference external" href="https://review.openstack.org/592160/"&gt;https://review.openstack.org/592160/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-32 summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-32-summary.html" rel="alternate"></link><published>2018-08-13T12:05:00+00:00</published><updated>2018-08-13T12:05:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-08-13:/sprint-2018-32-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We released the version 3.1: &lt;a class="reference external" href="http://www.softwarefactory-project.io/releases/3.1/"&gt;http://www.softwarefactory-project.io/releases/3.1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We found an issue with the openshift integration when oc login token expires after 24H and worked on another implementation using service account …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We released the version 3.1: &lt;a class="reference external" href="http://www.softwarefactory-project.io/releases/3.1/"&gt;http://www.softwarefactory-project.io/releases/3.1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We found an issue with the openshift integration when oc login token expires after 24H and worked on another implementation using service account token.&lt;/li&gt;
&lt;li&gt;We started to update the log-classify API to support periodic jobs analysis.&lt;/li&gt;
&lt;li&gt;We started to publish a series of blog post to explain how to use software factory to gate CI jobs. The firsts blog posts explain how to setup a software factory sandbox and describe zuul services and config files:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;http://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.softwarefactory-project.io/zuul-hands-on-part-1-what-is-zuul.html"&gt;http://www.softwarefactory-project.io/zuul-hands-on-part-1-what-is-zuul.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No work on RepoXplorer this sprint.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on the Zuul container build resources and proposed both kubernetes and openshift implementation: &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:container-build-resources"&gt;https://review.openstack.org/#/q/topic:container-build-resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed an issue in Zuul periodic job not being triggered by project template: &lt;a class="reference external" href="https://review.openstack.org/589836"&gt;https://review.openstack.org/589836&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated the new Zuul web routes and got +2: &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:zuul-web-routes"&gt;https://review.openstack.org/#/q/topic:zuul-web-routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dequeue CLI got merged, updated web api patch to support the command as well&lt;/li&gt;
&lt;li&gt;zuul 3.2.0 released&lt;/li&gt;
&lt;li&gt;nodepool 3.2.0 released&lt;/li&gt;
&lt;li&gt;openstacksdk bug affected upstream and sf.io&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Zuul Hands on - part 1 - What is Zuul ?</title><link href="https://www.softwarefactory-project.io/zuul-hands-on-part-1-what-is-zuul.html" rel="alternate"></link><published>2018-08-08T00:00:00+00:00</published><updated>2018-08-08T00:00:00+00:00</updated><author><name>Nicolas Hicher</name></author><id>tag:www.softwarefactory-project.io,2018-08-08:/zuul-hands-on-part-1-what-is-zuul.html</id><summary type="html">&lt;p&gt;This article is the first in a series about learning Zuul by usage. This series
will start with simple use cases then will cover more complex jobs
configurations.&lt;/p&gt;
&lt;p&gt;In this first article, we will quickly introduce Zuul's components and give some
details about how Zuul is integrated within Software Factory …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is the first in a series about learning Zuul by usage. This series
will start with simple use cases then will cover more complex jobs
configurations.&lt;/p&gt;
&lt;p&gt;In this first article, we will quickly introduce Zuul's components and give some
details about how Zuul is integrated within Software Factory.&lt;/p&gt;
&lt;p&gt;You can deploy a Zuul sandbox by using Software Factory. To do so, please read
this &lt;a class="reference external" href="http://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html"&gt;article&lt;/a&gt;,
that explains how to setup a SF sandbox. This article and upcoming ones are based
on a Software Factory deployment, so we highly recommend to deploy this sandbox
to successfully experiment with Zuul.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="zuul-project"&gt;
&lt;h2&gt;Zuul project&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.openstack.org/infra/zuul/"&gt;Zuul&lt;/a&gt; is an application created by
OpenStack's Infra team to be the gating system for OpenStack projects. The main
role of Zuul is to gate all of OpenStack projects’ source code. Zuul ensures
changes are merged on their respective git repositories only if they pass
predefined tests jobs. Zuul jobs consist of a combination of Ansible playbooks and
roles.&lt;/p&gt;
&lt;p&gt;You can see live instances of Zuul at the following URLs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zuul.openstack.org"&gt;OpenStack CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://softwarefactory-project.io/zuul/"&gt;Software Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.rdoproject.org/zuul/status.html"&gt;RDO CI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key features of Zuul are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gating on git branches: Zuul guarantees that no merged patch will break the code (as covered by testing, of course).&lt;/li&gt;
&lt;li&gt;Speculative testing: tests jobs are executed on the expected states of repositories at merging time.
This is particularly useful when several, potentially conflicting patches are landing roughly at the same time.&lt;/li&gt;
&lt;li&gt;Scaling: Zuul relies on Nodepool to leverage a pool of test nodes. This can be controlled with quotas on spawning test nodes.&lt;/li&gt;
&lt;li&gt;Pipelines: the lifecycle of Pull Requests/Gerrit changes is defined through pipelines.&lt;/li&gt;
&lt;li&gt;Multi-repository: Zuul can gate projects spread across multiple repositories.
It is even possible to test changes depending on patches that aren't merged yet in other repositories,
as Zuul can prepare testing environments that respect code dependencies.&lt;/li&gt;
&lt;li&gt;Parallel testing: Zuul can provision as many jobs as there are nodes available to run them.&lt;/li&gt;
&lt;li&gt;In-repository job configuration: each project can define its pipelines and jobs configuration in a file called .zuul.yaml.&lt;/li&gt;
&lt;li&gt;Pre-merge job loading: modifications to jobs definitions in the .zuul.yaml file
are loaded by Zuul and can be tested before being merged.&lt;/li&gt;
&lt;li&gt;Multi-node job support: Zuul can run jobs on complex topologies, for example when testing clients and servers.&lt;/li&gt;
&lt;li&gt;Ansible support: test jobs can be run outside of Zuul; and Zuul also comes with the ARA reporting tool to browse through playbooks outputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these features will be explained in more depth in following articles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-s-components"&gt;
&lt;h2&gt;Zuul's components&lt;/h2&gt;
&lt;p&gt;Zuul consists of multiple components that react to events coming from a Code Review
system. Here is a list of these components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;strong&gt;code review (CR) system&lt;/strong&gt; hosts the changes to gate with Zuul. Zuul supports Gerrit (code reviews) and Github (Pull Requests).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zuul-scheduler&lt;/strong&gt; receives events from remote CR systems, and schedules the execution of jobs
according to a project's job configuration; then reports job results to the CR system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zuul-executor&lt;/strong&gt; uses Ansible to execute jobs remotely on test nodes provided by Nodepool.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nodepool&lt;/strong&gt; launches, provisions and ultimately destroy nodes needed to run tests jobs (OpenStack instances
or OCI containers can be used in a Software Factory deployment).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zuul-web&lt;/strong&gt; is Zuul's Web frontend and provides a REST API.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure"&gt;
&lt;img alt="None" src="images/simple_zuul_arch.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;p&gt;You can find a full description of all the components in the &lt;a class="reference external" href="https://docs.openstack.org/infra/zuul/admin/components.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-in-software-factory"&gt;
&lt;h2&gt;Zuul in Software Factory&lt;/h2&gt;
&lt;p&gt;Zuul's components are configured using the &lt;em&gt;config&lt;/em&gt; repository, the configuration is
in the &lt;em&gt;zuul.d&lt;/em&gt; directory within that repository. You can clone this repository on your workstation, it will be used in
the next articles to configure Zuul:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone -c http.sslVerify&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; https://sftests.com/r/config
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming Software Factory has been deployed on a single server (all-in-one architecture),
the main configuration files for Zuul are located in &lt;em&gt;/etc/zuul&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;zuul.conf is the main configuration file for zuul.&lt;/li&gt;
&lt;li&gt;main.yaml contains the tenants, remote systems and repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These files are managed with the &lt;em&gt;sfconfig&lt;/em&gt; utility script, and should not be
edited manually!&lt;/p&gt;
&lt;p&gt;The log files for zuul components (scheduler, executor and web) are located in
&lt;em&gt;/var/log/zuul&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;On your SF deployment, you can access Zuul-web at &lt;a class="reference external" href="https://sftests.com/zuul/t/local/status.html"&gt;https://sftests.com/zuul/t/local/status.html&lt;/a&gt; and
the documentation at &lt;a class="reference external" href="https://sftests.com/docs/"&gt;https://sftests.com/docs/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="None" src="images/zuul_web.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;p&gt;Stay tuned for the next article, where we will create our first project in
Software Factory, and gate a first change via Gerrit and Zuul.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>How to setup a Software Factory sandbox</title><link href="https://www.softwarefactory-project.io/how-to-setup-a-software-factory-sandbox.html" rel="alternate"></link><published>2018-08-07T00:00:00+00:00</published><updated>2018-12-12T00:00:00+00:00</updated><author><name>Nicolas Hicher</name></author><id>tag:www.softwarefactory-project.io,2018-08-07:/how-to-setup-a-software-factory-sandbox.html</id><summary type="html">&lt;p&gt;In this article, we will explain how to setup a sandbox in order to experiment with
Software Factory. The following article explains how to setup a CentOS 7 virtual
machine guest based on VirtualBox. Feel free to adapt the following to
the hypervisor of your choice. The sandbox guest will …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, we will explain how to setup a sandbox in order to experiment with
Software Factory. The following article explains how to setup a CentOS 7 virtual
machine guest based on VirtualBox. Feel free to adapt the following to
the hypervisor of your choice. The sandbox guest will be configured to be accessible
from your host only.&lt;/p&gt;
&lt;p&gt;This article is part of the &lt;a class="reference external" href="https://www.softwarefactory-project.io/tag/zuul-hands-on-series.html"&gt;Zuul hands-on series&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="create-the-virtual-machine"&gt;
&lt;h2&gt;Create the virtual machine&lt;/h2&gt;
&lt;p&gt;The first step is to create a CentOS 7 virtual machine.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;download the &lt;a class="reference external" href="https://www.centos.org/download/"&gt;CentOS 7 minimal iso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;create the virtual machine using VirtualBox Manager with the following settings:&lt;ul&gt;
&lt;li&gt;20G HDD&lt;/li&gt;
&lt;li&gt;4G RAM&lt;/li&gt;
&lt;li&gt;hostname: sftests.com&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the installation process, do not forget to activate the network and
set the hostname in the &lt;em&gt;NETWORK &amp;amp; HOST NAME&lt;/em&gt; panel.&lt;/p&gt;
&lt;p&gt;After the installation, shut down the virtual machine to finalize the configuration.
For easy access to your instance from a terminal and browser,
open the virtual machine settings in VirtualBox and create an additional network
interface attached to the &lt;em&gt;Host-only adapter&lt;/em&gt; . Then start the virtual machine,
and type &lt;em&gt;ip address&lt;/em&gt; in the virtual machine's terminal to get the network
configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@managesf.sftests.com ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# ip a&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN group default qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    ...
&lt;span class="m"&gt;2&lt;/span&gt;: enp0s3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc pfifo_fast state UP group default qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/ether &lt;span class="m"&gt;08&lt;/span&gt;:00:27:c5:69:3c brd ff:ff:ff:ff:ff:ff
    inet &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15/24 brd &lt;span class="m"&gt;10&lt;/span&gt;.0.2.255 scope global noprefixroute dynamic enp0s3
       valid_lft 85327sec preferred_lft 85327sec
&lt;span class="m"&gt;3&lt;/span&gt;: enp0s8: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc pfifo_fast state UP group default qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/ether &lt;span class="m"&gt;08&lt;/span&gt;:00:27:23:d3:1b brd ff:ff:ff:ff:ff:ff
    inet &lt;span class="m"&gt;192&lt;/span&gt;.168.56.102/24 brd &lt;span class="m"&gt;192&lt;/span&gt;.168.56.255 scope global noprefixroute dynamic enp0s8
       valid_lft 1133sec preferred_lft 1133sec
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-access-to-the-virtual-machine"&gt;
&lt;h2&gt;Configure access to the virtual machine&lt;/h2&gt;
&lt;p&gt;Add the IP address of the second interface and the hostname in your /etc/hosts
file (ie on the VirtualBox host), for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.56.102 sftests.com
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-the-virtual-machine"&gt;
&lt;h2&gt;Configure the virtual machine&lt;/h2&gt;
&lt;p&gt;You can authorize your SSH public key with the root user to allow password-less
authentication:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-copy-id root@sftests.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Connect to your virtual machine from your host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh root@sftests.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Configure firewalld to allow http, https and gerrit access from your host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;firewall-cmd --add-service&lt;span class="o"&gt;=&lt;/span&gt;http --add-service&lt;span class="o"&gt;=&lt;/span&gt;https
firewall-cmd --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;29418&lt;/span&gt;/tcp
firewall-cmd --runtime-to-permanent
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-software-factory"&gt;
&lt;h2&gt;Install Software Factory&lt;/h2&gt;
&lt;p&gt;The next step is to install Software Factory. We will add &lt;em&gt;hypervisor-k1s&lt;/em&gt; to
the architecture file to enable containers in check and gating jobs:&lt;/p&gt;
&lt;p&gt;First, ensure the system is up to date before installing Software Factory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum update -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, install Software Factory, this will take ~15 minutes to
download, install and configure services:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y https://softwarefactory-project.io/repos/sf-release-3.8.rpm
yum update -y
yum install -y sf-config
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;      - hypervisor-k1s&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/software-factory/arch.yaml
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gateway_force_fqdn_redirection: False&amp;#39;&lt;/span&gt; &amp;gt; /etc/software-factory/custom-vars.yaml
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enable_insecure_workers: True&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/software-factory/custom-vars.yaml
sfconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="validate-https-access"&gt;
&lt;h2&gt;Validate https access&lt;/h2&gt;
&lt;p&gt;Connect to &lt;a class="reference external" href="https://sftests.com"&gt;https://sftests.com&lt;/a&gt; to access to the software factory web interface&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="None" src="images/sf_dashboard.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-admin-public-ssh-key"&gt;
&lt;h2&gt;Configure admin public SSH key&lt;/h2&gt;
&lt;p&gt;The next step is to add your SSH public key to the admin account, so that you
can submit reviews with the admin account. The
admin password is defined in the &lt;em&gt;/etc/software-factory/sfconfig.yaml&lt;/em&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk &lt;span class="s1"&gt;&amp;#39;/admin_password/ { print $2}&amp;#39;&lt;/span&gt; /etc/software-factory/sfconfig.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go to &lt;a class="reference external" href="https://sftests.com/auth/login"&gt;https://sftests.com/auth/login&lt;/a&gt; and log in as admin by clicking on
&lt;em&gt;Toggle login form&lt;/em&gt;. Then select the &lt;em&gt;Gerrit&lt;/em&gt; link in the top menu, and click on
&amp;quot;Settings&amp;quot; to edit the admin account:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="None" src="images/gerrit_settings.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;p&gt;Select &lt;em&gt;SSH Public Keys&lt;/em&gt; and add your public key (Do not delete the other
defined key, it's used for administrative tasks).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="snapshot-the-virtual-machine"&gt;
&lt;h2&gt;Snapshot the virtual machine&lt;/h2&gt;
&lt;p&gt;You can now snapshot the virtual machine to be able to quickly restore a known
state after testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Issue with `buildah` During `sfconfig` Execution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you encounter an error during the &lt;cite&gt;sfconfig&lt;/cite&gt; execution related to the &lt;cite&gt;buildah&lt;/cite&gt; process, follow these steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error creating build container: Error initializing source docker://registry.centos.org/centos:7: error pinging docker registry registry.centos.org...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This indicates a problem with accessing the &lt;cite&gt;registry.centos.org&lt;/cite&gt; repository. To resolve this issue:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Modify the Dockerfile at &lt;cite&gt;/root/config/containers/centos-7/Dockerfile&lt;/cite&gt; by changing the base image repository from &lt;cite&gt;registry.centos.org/centos:7&lt;/cite&gt; to &lt;cite&gt;quay.io/centos/centos:7&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;Commit and push these changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Using Gerrit as Admin for Merging Changes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After pushing the changes, you'll need to merge them using Gerrit:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Log in to Gerrit at &lt;a class="reference external" href="https://sftests.com/r/"&gt;https://sftests.com/r/&lt;/a&gt; using the admin account.&lt;/li&gt;
&lt;li&gt;Navigate to the 'Open' changes section and find your recent commit.&lt;/li&gt;
&lt;li&gt;Review the change to ensure it's correct.&lt;/li&gt;
&lt;li&gt;Use the 'Review' functionality in Gerrit to give a '+2'.&lt;/li&gt;
&lt;li&gt;Click on the 'Submit' button to merge the change into the repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the change is merged:&lt;/p&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Rerun the &lt;cite&gt;sfconfig&lt;/cite&gt; command on the machine where the setup was initially attempted.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These steps should help you resolve the issue related to the &lt;cite&gt;buildah&lt;/cite&gt; command in the &lt;cite&gt;sfconfig&lt;/cite&gt; execution and ensure the correct repository is used in the build process.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="zuul-hands-on-series"></category></entry><entry><title>Sprint 2018-30 summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-30-summary.html" rel="alternate"></link><published>2018-07-31T00:52:00+00:00</published><updated>2018-07-31T00:52:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-07-31:/sprint-2018-30-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We started to implement the new eng-on-duty role: &lt;a class="reference external" href="https://softwarefactory-project.io/etherpad/p/sf-ops"&gt;https://softwarefactory-project.io/etherpad/p/sf-ops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated a Zuul CI status page to show what jobs and what labels a tenant is using: &lt;a class="reference external" href="https://softwarefactory-project.io/ui/#/status/ci"&gt;https://softwarefactory-project.io/ui …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We started to implement the new eng-on-duty role: &lt;a class="reference external" href="https://softwarefactory-project.io/etherpad/p/sf-ops"&gt;https://softwarefactory-project.io/etherpad/p/sf-ops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated a Zuul CI status page to show what jobs and what labels a tenant is using: &lt;a class="reference external" href="https://softwarefactory-project.io/ui/#/status/ci"&gt;https://softwarefactory-project.io/ui/#/status/ci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We rewrote the log-classify web interface in patternfly-react: &lt;a class="reference external" href="https://softwarefactory-project.io/ui/#/status/ci"&gt;https://softwarefactory-project.io/ui/#/status/ci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We integrated automatic runC labels creations and update playbook through config-update&lt;/li&gt;
&lt;li&gt;With the last blocker fixed in zuul upstream, we are now waiting for the zuul-3.1.1 release to publish sf-3.1&lt;/li&gt;
&lt;li&gt;We have validated a real tenant deployment between the production sf-project.io and a tenant called &lt;a class="reference external" href="https://ansible-test.softwarefactory-project.io/"&gt;https://ansible-test.softwarefactory-project.io/&lt;/a&gt; (no gerrit / github only)&lt;/li&gt;
&lt;li&gt;We've started working on support for Zuul's JWT-protected endpoints in SF: we've implemented the httpd part where the gateway injects the token after reading it from the auth cookie.&lt;/li&gt;
&lt;li&gt;Releases 1.3.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We fixed a long standing issue with multi-tenancy view in zuul-ui: &lt;a class="reference external" href="https://review.openstack.org/579418"&gt;https://review.openstack.org/579418&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We proposed an implementation of the Zuul container build resources for openshift: &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:container-build-resources"&gt;https://review.openstack.org/#/q/topic:container-build-resources&lt;/a&gt; ( Result jobs artifact for simple pod and native workflow demoed here: &lt;a class="reference external" href="https://softwarefactory-project.io/logs/23/12723/6/check/sf-ci-openshift-integration/2e12903/job-logs/logs/1/1/1/check/"&gt;https://softwarefactory-project.io/logs/23/12723/6/check/sf-ci-openshift-integration/2e12903/job-logs/logs/1/1/1/check/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We reported a regression in Zuul non-voting jobs: &lt;a class="reference external" href="https://storyboard.openstack.org/#!/story/2003026"&gt;https://storyboard.openstack.org/#!/story/2003026&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We organized an initial meeting for the log-classify specs: &lt;a class="reference external" href="https://review.openstack.org/#/c/581214/1/specs/log_classify.rst"&gt;https://review.openstack.org/#/c/581214/1/specs/log_classify.rst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The patch adding a &amp;quot;dequeue&amp;quot; command in the CLI is ready for review: &lt;a class="reference external" href="https://review.openstack.org/#/c/95035/"&gt;https://review.openstack.org/#/c/95035/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The zuul tenant check patch is now (after multiple patchset) ready to merged 2+2 &lt;a class="reference external" href="https://review.openstack.org/#/c/574265/"&gt;https://review.openstack.org/#/c/574265/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed a 500 issues on zuul-web &lt;a class="reference external" href="https://review.openstack.org/#/c/581810/"&gt;https://review.openstack.org/#/c/581810/&lt;/a&gt;  &lt;a class="reference external" href="https://review.openstack.org/#/c/582200/"&gt;https://review.openstack.org/#/c/582200/&lt;/a&gt; ...&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-28 summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-28-summary.html" rel="alternate"></link><published>2018-07-12T21:56:00+00:00</published><updated>2018-07-12T21:56:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-07-12:/sprint-2018-28-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We moved forward to populate the 3.1 target of SF now mostly waiting for zuul upstream to release&lt;/li&gt;
&lt;li&gt;We experimented with master/tenant(github) - mainly for the ansible deployment - discovered some issues/fixed.&lt;/li&gt;
&lt;li&gt;We added …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We moved forward to populate the 3.1 target of SF now mostly waiting for zuul upstream to release&lt;/li&gt;
&lt;li&gt;We experimented with master/tenant(github) - mainly for the ansible deployment - discovered some issues/fixed.&lt;/li&gt;
&lt;li&gt;We added a better support for private repo in sf-config and cgit/repoxplorer/welcome page: the names of private repos won't be displayed in the welcome page anymore&lt;/li&gt;
&lt;li&gt;We fixed the openshift driver to prevent foreign openshift project deletions...&lt;/li&gt;
&lt;li&gt;We refresh the node redhat-offical deployment with new version of repoxplorer. We added some new project like RDO and OpenStack &lt;a class="reference external" href="https://redhat-oss-git-stats.softwarefactory-project.io/"&gt;https://redhat-oss-git-stats.softwarefactory-project.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've resumed work on this patch ( &lt;a class="reference external" href="https://review.openstack.org/95035"&gt;https://review.openstack.org/95035&lt;/a&gt; )  to add a dequeue command to the CLI (and ultimately in the web API). It needs to be extended to support dequeueing jobs not related to a change (post pipelines)&lt;/li&gt;
&lt;li&gt;We've been working on a patch ( &lt;a class="reference external" href="https://review.openstack.org/576907"&gt;https://review.openstack.org/576907&lt;/a&gt; ) offering tenant-scoped, JWT protected privileged API calls (autohold, enqueue)&lt;/li&gt;
&lt;li&gt;We've been working on a fix ( &lt;a class="reference external" href="https://review.openstack.org/581553"&gt;https://review.openstack.org/581553&lt;/a&gt; ) for periodic pipelines that enqueue un-necessary projects.&lt;/li&gt;
&lt;li&gt;We've proposed improvement to os-loganalyze ( &lt;a class="reference external" href="https://review.openstack.org/580891"&gt;https://review.openstack.org/580891&lt;/a&gt; ) to include an info line and support multi-lines selection.&lt;/li&gt;
&lt;li&gt;We've proposed a spec ( &lt;a class="reference external" href="https://review.openstack.org/581214"&gt;https://review.openstack.org/581214&lt;/a&gt; ) for a new log-classify service&lt;/li&gt;
&lt;li&gt;We proposed some changes to prevent zuul-web to return 500 errrors when tenant/project does not exist: &lt;a class="reference external" href="https://review.openstack.org/581793/"&gt;https://review.openstack.org/581793/&lt;/a&gt; &lt;a class="reference external" href="https://review.openstack.org/581810/"&gt;https://review.openstack.org/581810/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support zuul.child_jobs via zuul_return: &lt;a class="reference external" href="https://review.openstack.org/578230/"&gt;https://review.openstack.org/578230/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add zuul.child_jobs in ansible inventory file: &lt;a class="reference external" href="https://review.openstack.org/578181/"&gt;https://review.openstack.org/578181/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Started work to load jobs directly from upstream zuul.o.o into zuul.sf.io&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-26 summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-26-summary.html" rel="alternate"></link><published>2018-06-28T17:26:00+00:00</published><updated>2018-06-28T17:26:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-06-28:/sprint-2018-26-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We upgraded sf-project.io to the 3.1 candidate version in preparation of rdoproject.org migration to zuulv3 to avoid further downtime&lt;/li&gt;
&lt;li&gt;We finally found a long running issue with bubblewrap: &lt;a class="reference external" href="https://github.com/projectatomic/bubblewrap/issues/273"&gt;https://github.com/projectatomic/bubblewrap …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We upgraded sf-project.io to the 3.1 candidate version in preparation of rdoproject.org migration to zuulv3 to avoid further downtime&lt;/li&gt;
&lt;li&gt;We finally found a long running issue with bubblewrap: &lt;a class="reference external" href="https://github.com/projectatomic/bubblewrap/issues/273"&gt;https://github.com/projectatomic/bubblewrap/issues/273&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We wrote a blog post to explain the difference between SF and Zuul: &lt;a class="reference external" href="http://www.softwarefactory-project.io/what-is-the-difference-between-software-factory-and-zuul.html"&gt;http://www.softwarefactory-project.io/what-is-the-difference-between-software-factory-and-zuul.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We integrated the Openshift driver as a tech-preview and wrote a sf-ci-openshift-integration test: &lt;a class="reference external" href="https://softwarefactory-project.io/r/12723"&gt;https://softwarefactory-project.io/r/12723&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added 4 Zuul merger and 2 executor to sf-project.io to scale services for the rdoproject.org migration&lt;/li&gt;
&lt;li&gt;We fixed many issues regarding to the upgrade, and successfully merge automatic repository change: &lt;a class="reference external" href="https://github.com/thoth-station/zuul-test-config/commit/6cb86d479bd233ddfd3e642b2f75457ac98c954b"&gt;https://github.com/thoth-station/zuul-test-config/commit/6cb86d479bd233ddfd3e642b2f75457ac98c954b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We rewrite the wait-for-other-jobs script as a ZuulV3 native task to be able to run koji based gate job in parallel&lt;/li&gt;
&lt;li&gt;We integrated repoxplorer 1.3.0 release to SF&lt;/li&gt;
&lt;li&gt;We wrote a doc about resources usage for building the zuul config from resources definition&lt;/li&gt;
&lt;li&gt;We worked on enabling the zuul configuration check in config-check and re-used the upstream patch &lt;a class="reference external" href="https://review.openstack.org/#/c/574265/"&gt;https://review.openstack.org/#/c/574265/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We extended the new configurations managesf's endpoint  to handle the repoxplorer config&lt;/li&gt;
&lt;li&gt;We wrote a blogpost (in review) Hands-on: Gate a first patch blog post &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/12590/"&gt;https://softwarefactory-project.io/r/#/c/12590/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added openstack providers for ansible-network and tripleo-ci projects on sf.io.&lt;/li&gt;
&lt;li&gt;We resize sf nodepool-builder instance for building images from sf, rdo, ansible.&lt;/li&gt;
&lt;li&gt;Release rexpoXplorer 1.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on extra-vars, ansible-tags and ansible-skip-tags Zuul job attributes: &lt;a class="reference external" href="https://review.openstack.org/546474"&gt;https://review.openstack.org/546474&lt;/a&gt; and &lt;a class="reference external" href="https://review.openstack.org/575672"&gt;https://review.openstack.org/575672&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We fixed issues after upgrading sf-project.io, namely, Zuul gerrit 2.14 connection schema number needed to be cast to str, Zuul configloader was not skipping single project empty includes and Nodepool repeatedely tried to remove node in ERROR.&lt;/li&gt;
&lt;li&gt;We continued to work on Zookeeper connection improvement to use Kazoo retry feature: &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:zookeeper-retry"&gt;https://review.openstack.org/#/q/topic:zookeeper-retry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We rebased all the extra drivers on top of the new Nodepool API and renamed OCI into RunC to be less confusing.&lt;/li&gt;
&lt;li&gt;We investigated issue with Nodepool handling of different pools using different labels set.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>What is the difference between Software Factory and Zuul?</title><link href="https://www.softwarefactory-project.io/what-is-the-difference-between-software-factory-and-zuul.html" rel="alternate"></link><published>2018-06-20T00:00:00+00:00</published><updated>2018-06-20T00:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-06-20:/what-is-the-difference-between-software-factory-and-zuul.html</id><summary type="html">&lt;p&gt;Here is a detailed answer to this frequently asked question.&lt;/p&gt;
&lt;div class="section" id="sf-integrates-zuul"&gt;
&lt;h2&gt;SF Integrates Zuul&lt;/h2&gt;
&lt;p&gt;SF is a superset of Zuul, which is similar to the openstack-infra architecture.
It provides a complete development forge including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Repository and code review (gerrit and cgit),&lt;/li&gt;
&lt;li&gt;A log server (httpd, os_loganalyze and ara),&lt;/li&gt;
&lt;li&gt;Collaborative tools (etherpad …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Here is a detailed answer to this frequently asked question.&lt;/p&gt;
&lt;div class="section" id="sf-integrates-zuul"&gt;
&lt;h2&gt;SF Integrates Zuul&lt;/h2&gt;
&lt;p&gt;SF is a superset of Zuul, which is similar to the openstack-infra architecture.
It provides a complete development forge including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Repository and code review (gerrit and cgit),&lt;/li&gt;
&lt;li&gt;A log server (httpd, os_loganalyze and ara),&lt;/li&gt;
&lt;li&gt;Collaborative tools (etherpad, lodgeit and mumble),&lt;/li&gt;
&lt;li&gt;Issue tracking (storyboard),&lt;/li&gt;
&lt;li&gt;Artifact analysis (logstash and logreduce),&lt;/li&gt;
&lt;li&gt;Repository analysis (repoXplorer, code-search), and&lt;/li&gt;
&lt;li&gt;System metrics (grafana, influxdb, telegraf, statsd).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most components are optional and version 3.1 includes a zuul-minimal
architecture to only deploy Zuul.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-distributes-zuul"&gt;
&lt;h2&gt;SF Distributes Zuul&lt;/h2&gt;
&lt;p&gt;We can say that SF is for Zuul what Openshift is for Kubernetes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is a repository of packages to deploy Zuul on EL7. See this previous
article: &lt;a class="reference external" href="https://www.softwarefactory-project.io/using-system-packages-instead-of-pip.html"&gt;Using system packages instead of pip&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It comes with a &amp;quot;cluster up&amp;quot; command called sfconfig that deploys the services.&lt;/li&gt;
&lt;li&gt;It integrates the service with working default settings so that it is usable out of the box.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sf-contributes-to-zuul"&gt;
&lt;h2&gt;SF Contributes to Zuul&lt;/h2&gt;
&lt;p&gt;Over the years we developed new features in Zuul to improve the user experience.
We are dedicated to working with upstream to integrate them in the Zuul source
code directly. Here is a highlight list:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/274445"&gt;GerritWatcher: add poll_timeout&lt;/a&gt; and
&lt;a class="reference external" href="https://review.openstack.org/466453"&gt;Read all Gerrit events from poll interruption&lt;/a&gt;.
These were two tricky bugs because they were hard to reproduce since they
mostly happen when the Gerrit service is not busy.&lt;/li&gt;
&lt;li&gt;As SF moved away from Jenkins, we needed to provide a seamless user experience
and we have heavily used the SQL reporter. In the process we found and fixed
numerous issues, for example &lt;a class="reference external" href="https://review.openstack.org/466457"&gt;sql-reporter: add support for Ref change&lt;/a&gt;
and &lt;a class="reference external" href="https://review.openstack.org/466506"&gt;merger/executor: configure source connections only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To simplify Zuul's automatic configuration, SF relies on directory based configuration
instead of a single flat file. The initial &lt;a class="reference external" href="https://review.openstack.org/152290"&gt;implementation&lt;/a&gt;
in ZuulV2 was not accepted. Eventually the zuul.d support was contributed to ZuulV3
&lt;a class="reference external" href="https://review.openstack.org/473764"&gt;Add support for zuul.d configuration split&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tenant restriction to mitigate trivial abuse:
&lt;a class="reference external" href="https://review.openstack.org/489481"&gt;Add max-nodes-per-job tenant setting&lt;/a&gt; and
&lt;a class="reference external" href="https://review.openstack.org/502332"&gt;Add max-job-timeout tenant setting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One important feature without Jenkins was a dashboard of the jobs list and previous builds.
We drove the zuul-web effort in order to implement those features in Zuul:
&lt;a class="reference external" href="https://review.openstack.org/503270"&gt;web: add /{tenant}/jobs route&lt;/a&gt; and
&lt;a class="reference external" href="https://review.openstack.org/466561"&gt;web: add /{tenant}/builds route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/525614"&gt;Git driver&lt;/a&gt; to support simple re-use of
the zuul-jobs collections.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/535509"&gt;Do not call merger:cat when all config items are excluded&lt;/a&gt;
to improve startup time.&lt;/li&gt;
&lt;li&gt;Thanks to sf-ci, a global POST_FAILURE was prevented with
&lt;a class="reference external" href="https://review.openstack.org/553147"&gt;Revert &amp;quot;Don't store references to secret objects from jobs&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dynamic tenant configuration
&lt;a class="reference external" href="https://review.openstack.org/535878"&gt;Tenant config can be read from an external script&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/535543"&gt;mqtt: add basic reporter&lt;/a&gt; to implement
external log processing jobs.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/570006"&gt;Fix new depends-on format matching for prefixed gerrit ui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/535511"&gt;Make Zuul able to start with a broken config&lt;/a&gt;,
this contribution prevents Zuul from breaking if a tenant merges a bad commit.&lt;/li&gt;
&lt;li&gt;Nodepool &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:nodepool-drivers"&gt;driver interface&lt;/a&gt;
to initialy implement static node supports.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="future-contributions"&gt;
&lt;h2&gt;Future Contributions&lt;/h2&gt;
&lt;p&gt;Here is the list of features we picked in the Software Factory version of Zuul
and Nodepool that are still under review upstream.
We are confident these features will eventually land upstream, but they might
evolve by then. They should therefore be considered a &amp;quot;tech preview&amp;quot;,
although we will do our best to integrate these in the least disruptive way
possible.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/537870"&gt;dashboard: add /{tenant}/projects.html web page&lt;/a&gt;
to list the project configured in zuul see this &lt;a class="reference external" href="https://softwarefactory-project.io/zuul/t/local/projects.html"&gt;projects page&lt;/a&gt;.
Clicking on a project shows a page with the configured jobs as well as d3js graph rendering of the pipeline.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/535545"&gt;dashboard: add /{tenant}/job.html page to display job details&lt;/a&gt;
to show the job details see this &lt;a class="reference external" href="https://softwarefactory-project.io/zuul/t/local/job.html?job_name=sf-rpm-build"&gt;job page&lt;/a&gt;.
There is another d3js graph rendering of the jobs' relationships.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/553979"&gt;dashboard: add /{tenant}/labels.html web page&lt;/a&gt; and
&lt;a class="reference external" href="https://review.openstack.org/553999"&gt;dashboard: add /{tenant}/nodes.html web page&lt;/a&gt; to
show the nodepool information.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/#/q/topic:zookeeper-retry"&gt;topic: zk-retry&lt;/a&gt; to improve
system operation when zookeeper connection is restarted.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/535560"&gt;config: add statsd-server config parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/535556"&gt;Implement a Runc driver&lt;/a&gt; to enable thin
container environments.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/535557"&gt;Implement a Kubernetes driver&lt;/a&gt;
to spawn test instances in a k8s namespace.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/#/q/topic:openshift-zuul-build-resource"&gt;Implement an OpenShift resource provider&lt;/a&gt;
to use OpenShift as a resource provider.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-24 summary</title><link href="https://www.softwarefactory-project.io/sprint-2018-24-summary.html" rel="alternate"></link><published>2018-06-18T11:34:00+00:00</published><updated>2018-06-18T11:34:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-06-18:/sprint-2018-24-summary.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We packaged new zuul requirements cherrypy, ws4py and routes.&lt;/li&gt;
&lt;li&gt;We reworked zuul packaging to build webui using a node_modules cache.&lt;/li&gt;
&lt;li&gt;We worked on guide and blog posts:&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.softwarefactory-project.io/how-to-record-feature-demo.html"&gt;http://www.softwarefactory-project.io/how-to-record-feature-demo.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.softwarefactory-project.io/using-system-packages-instead-of-pip.html"&gt;http://www.softwarefactory-project …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We packaged new zuul requirements cherrypy, ws4py and routes.&lt;/li&gt;
&lt;li&gt;We reworked zuul packaging to build webui using a node_modules cache.&lt;/li&gt;
&lt;li&gt;We worked on guide and blog posts:&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.softwarefactory-project.io/how-to-record-feature-demo.html"&gt;http://www.softwarefactory-project.io/how-to-record-feature-demo.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.softwarefactory-project.io/using-system-packages-instead-of-pip.html"&gt;http://www.softwarefactory-project.io/using-system-packages-instead-of-pip.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.softwarefactory-project.io/feature-remote-config-location-on-github.html"&gt;http://www.softwarefactory-project.io/feature-remote-config-location-on-github.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We had a look at JWT (JSON Web Tokens) for zuul web admin, this may require to discard authpub_tkt to replace it with JWT in the future. This will depend on how upstream wants to proceed.&lt;/li&gt;
&lt;li&gt;We brainstormed and started a blog post series called &amp;quot;Hands-on Zuul&amp;quot; (will be published on SF blog)&lt;/li&gt;
&lt;li&gt;We have integrated latest repoXplorer version in SF&lt;/li&gt;
&lt;li&gt;We finished the changes to allow operators to update fqdn for a SF deployment (code, CI and documentation)&lt;/li&gt;
&lt;li&gt;We added dib images in sf-nodepool tenants for zuul3 migration on sf.io (upstream-centos-7, rdo-fedora-38 and rdo-centos-7).&lt;/li&gt;
&lt;li&gt;We're working on upgrading ARA to 0.15 and implementing the sqlite middleware&lt;/li&gt;
&lt;li&gt;We have finalized the support of the user backend and cauth integration [demo]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed and fixed issues with the angular6 patch.&lt;/li&gt;
&lt;li&gt;We rebased zuul-routes and zuul-ui patch on top of cherrypy and angular6.&lt;/li&gt;
&lt;li&gt;We helped the API working group to get started with GraphQL on Neutron (&lt;a class="reference external" href="https://review.openstack.org/574543"&gt;https://review.openstack.org/574543&lt;/a&gt;) and conducted an experiment in zuul-web: &lt;a class="reference external" href="https://review.openstack.org/#/c/574625/3/zuul/graphql.py"&gt;https://review.openstack.org/#/c/574625/3/zuul/graphql.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We succeed to have the prefix gerrit ui support in Zuul &lt;a class="reference external" href="https://review.openstack.org/#/c/570006/"&gt;https://review.openstack.org/#/c/570006/&lt;/a&gt; merged&lt;/li&gt;
&lt;li&gt;We succeed to have the broken config patch for Zuul merged &lt;a class="reference external" href="https://review.openstack.org/#/c/535511/"&gt;https://review.openstack.org/#/c/535511/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have proposed to patch to add a check tenant file option to Zuul scheduler: &lt;a class="reference external" href="https://review.openstack.org/#/c/574265/"&gt;https://review.openstack.org/#/c/574265/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Feature: remote config location on GitHub</title><link href="https://www.softwarefactory-project.io/feature-remote-config-location-on-github.html" rel="alternate"></link><published>2018-06-11T00:00:00+00:00</published><updated>2018-06-11T00:00:00+00:00</updated><author><name>Tristan de Cacqueray</name></author><id>tag:www.softwarefactory-project.io,2018-06-11:/feature-remote-config-location-on-github.html</id><summary type="html">&lt;p&gt;This post presents a new feature coming in SF version 3.1. The
remote config location option lets operator setup SF using an
external git server such as Github or an existing Gerrit service.&lt;/p&gt;
&lt;p&gt;The video below shows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Setup of the new zuul-minimal architecture without the internal Gerrit;&lt;/li&gt;
&lt;li&gt;Creation of …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This post presents a new feature coming in SF version 3.1. The
remote config location option lets operator setup SF using an
external git server such as Github or an existing Gerrit service.&lt;/p&gt;
&lt;p&gt;The video below shows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Setup of the new zuul-minimal architecture without the internal Gerrit;&lt;/li&gt;
&lt;li&gt;Creation of a GitHub application;&lt;/li&gt;
&lt;li&gt;Usage of the config-location option to provision the config repository;&lt;/li&gt;
&lt;li&gt;Adding a new demo-project to the Zuul configuration; and&lt;/li&gt;
&lt;li&gt;Setting the .zuul.yaml CI configuration for this new project.&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;video width="945" height="531" controls&gt;
  &lt;source src="https://softwarefactory-project.io/static/sf-gh.webm" type="video/webm"&gt;
  I'm sorry; your browser doesn't support HTML5 video in WebM with VP8/VP9.
&lt;/video&gt;&lt;/center&gt;</content><category term="blog"></category></entry><entry><title>Using system packages instead of pip</title><link href="https://www.softwarefactory-project.io/using-system-packages-instead-of-pip.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Tristan de Cacqueray</name></author><id>tag:www.softwarefactory-project.io,2018-06-10:/using-system-packages-instead-of-pip.html</id><summary type="html">&lt;p&gt;Software Factory integrates softwares as RPM packages and this article presents
three reasons why it does not use pip, or any other language specific package
management system.&lt;/p&gt;
&lt;div class="section" id="system-integration-and-shared-libraries"&gt;
&lt;h2&gt;System integration and shared libraries&lt;/h2&gt;
&lt;p&gt;It is arguably useful to use virtualenvs and pip for development purposes.
However, when deploying and operating an …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Software Factory integrates softwares as RPM packages and this article presents
three reasons why it does not use pip, or any other language specific package
management system.&lt;/p&gt;
&lt;div class="section" id="system-integration-and-shared-libraries"&gt;
&lt;h2&gt;System integration and shared libraries&lt;/h2&gt;
&lt;p&gt;It is arguably useful to use virtualenvs and pip for development purposes.
However, when deploying and operating an application in a production
environment, virtualenvs adds a lot of complexicity that can be avoided.&lt;/p&gt;
&lt;p&gt;First, there is no need to maintain and update each and every virtualenvs.
For example, a security fix only needs to be installed once.&lt;/p&gt;
&lt;p&gt;Then, shared libraries are available to every user of the system. There is
no need to add extra PYTHONPATH environments to each service.
Moreover, shared libraries reduce disk/memory usage and they are a bit
faster to load.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="less-moving-parts-and-reproducibility"&gt;
&lt;h2&gt;Less moving parts and reproducibility&lt;/h2&gt;
&lt;p&gt;When installing software using pip, one ends up pulling the latest version
of every dependency. For example, a Zuul virtualenv currently contains 57
packages. The list may keep on growing whenever one of those packages adds
a new dependency in its next version.
All it takes is one of the many package maintainers to tag and release a
new version to get its code in your systems.&lt;/p&gt;
&lt;p&gt;Without taking into account the security consideration of this workflow,
the biggest issue is the lack of reproducibility. Without careful tooling to
freeze the environment, two pip installations may differ and the one which is
deployed may very well be broken by an untested release of one of the
dependencies.
Looking at the requirements.txt git log shows many instances of such
un-controlled breakage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="re-use-distribution-package-manager"&gt;
&lt;h2&gt;Re-use distribution package manager&lt;/h2&gt;
&lt;p&gt;Finally, using system packages lets one re-use the package manager included in
the Linux distribution. It features battle-tested dependency management
and comes with many features that may not be implemented in language specific
package management systems like pip:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rollback;&lt;/li&gt;
&lt;li&gt;Tracability;&lt;/li&gt;
&lt;li&gt;Integrity verification;&lt;/li&gt;
&lt;li&gt;Consistency accross all system packages; and&lt;/li&gt;
&lt;li&gt;Security updates.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Setting up the system to build and distribute system packages may take
some time, see this &lt;a class="reference external" href="https://www.softwarefactory-project.io/overview-of-a-cicd-workflow-with-zuul.html"&gt;previous article&lt;/a&gt;.
But it is a one time cost and has been a much benefical decision for the
Software Factory project as it solved all the above mentioned issues.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>How-to record feature demo</title><link href="https://www.softwarefactory-project.io/how-to-record-feature-demo.html" rel="alternate"></link><published>2018-06-02T00:00:00+00:00</published><updated>2018-06-02T00:00:00+00:00</updated><author><name>Tristan de Cacqueray</name></author><id>tag:www.softwarefactory-project.io,2018-06-02:/how-to-record-feature-demo.html</id><summary type="html">&lt;p&gt;This post documents my process to record video of new features.&lt;/p&gt;
&lt;div class="section" id="prepare-the-environment"&gt;
&lt;h2&gt;Prepare the environment&lt;/h2&gt;
&lt;p&gt;The first step is to cherry-pick the feature and verify it works as expected.
I do some tests to get comfortable with the content and rehearse before
recording. Then I revert the environment to a clean …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This post documents my process to record video of new features.&lt;/p&gt;
&lt;div class="section" id="prepare-the-environment"&gt;
&lt;h2&gt;Prepare the environment&lt;/h2&gt;
&lt;p&gt;The first step is to cherry-pick the feature and verify it works as expected.
I do some tests to get comfortable with the content and rehearse before
recording. Then I revert the environment to a clean state and setup the window
environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="record"&gt;
&lt;h2&gt;Record&lt;/h2&gt;
&lt;p&gt;I record the desktop and microphone using this ffmpeg command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
ffmpeg -f alsa -i pulse -f x11grab -s 1920x1080 -r &lt;span class="m"&gt;25&lt;/span&gt; -i :0+0 -q:v &lt;span class="m"&gt;8&lt;/span&gt; record.mp4
&lt;/pre&gt;
&lt;p&gt;It may takes a few attempts to get a satisfactory result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="edit"&gt;
&lt;h2&gt;Edit&lt;/h2&gt;
&lt;p&gt;Then I edit the recording to remove the blank content. For example I cut the
actions that takes more than 10 seconds to complete.
Using &lt;a class="reference external" href="https://github.com/jliljebl/flowblade"&gt;flowblade&lt;/a&gt; video editor press 'I' and 'O' to mark section and then
click the 'slice out' button.&lt;/p&gt;
&lt;p&gt;Finaly I render a lossless.avi file using the &amp;quot;HD 720p 25 fps&amp;quot; profile and
&amp;quot;Lossless H.264 / .mp4&amp;quot; format. This is because the webm export is sub-optimal
and this export method is pretty fast.&lt;/p&gt;
&lt;img alt="None" src="images/flowblade.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="final-encoding"&gt;
&lt;h2&gt;Final encoding&lt;/h2&gt;
&lt;p&gt;Base on this &lt;a class="reference external" href="https://sites.google.com/a/webmproject.org/wiki/ffmpeg/vp9-encoding-guide"&gt;vp9 encoding guide&lt;/a&gt;
I encode the final video using this command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;BITRATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;500K
ffmpeg -i lossless.mp4 -c:v libvpx-vp9 -pass &lt;span class="m"&gt;1&lt;/span&gt; -b:v &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BITRATE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -threads &lt;span class="m"&gt;8&lt;/span&gt; -speed &lt;span class="m"&gt;4&lt;/span&gt; -r &lt;span class="m"&gt;25&lt;/span&gt; -tile-columns &lt;span class="m"&gt;6&lt;/span&gt; -frame-parallel &lt;span class="m"&gt;1&lt;/span&gt;  -an -f webm /dev/null
ffmpeg -i lossless.mp4 -c:v libvpx-vp9 -pass &lt;span class="m"&gt;2&lt;/span&gt; -b:v &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BITRATE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -threads &lt;span class="m"&gt;8&lt;/span&gt; -speed &lt;span class="m"&gt;1&lt;/span&gt; -tile-columns &lt;span class="m"&gt;6&lt;/span&gt; -frame-parallel &lt;span class="m"&gt;1&lt;/span&gt; -auto-alt-ref &lt;span class="m"&gt;1&lt;/span&gt; -lag-in-frames &lt;span class="m"&gt;25&lt;/span&gt;   -c:a libvorbis -b:a 64k -f webm out.webm
&lt;/pre&gt;
&lt;p&gt;The resulting file is well compressed, about 3MB per minutes, and usable with the native html5 video player.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-22</title><link href="https://www.softwarefactory-project.io/sprint-2018-22.html" rel="alternate"></link><published>2018-05-31T17:00:00+00:00</published><updated>2018-05-31T17:00:00+00:00</updated><author><name>The Software Factory Team</name></author><id>tag:www.softwarefactory-project.io,2018-05-31:/sprint-2018-22.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued the work on tenant (zuul-less) and external gerrit (gerrit-less) deployment mode. See this &lt;a class="reference external" href="images/sf-master-tenant.png"&gt;architecture schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added python-openshift client to the SCL.&lt;/li&gt;
&lt;li&gt;We worked on anomaly detection in triple-o ci jobs, example report: &lt;a class="reference external" href="http://38.145.32.112/logreduce/d3a45f7.html"&gt;http …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last sprint.&lt;/p&gt;
&lt;p&gt;Regarding Software Factory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued the work on tenant (zuul-less) and external gerrit (gerrit-less) deployment mode. See this &lt;a class="reference external" href="images/sf-master-tenant.png"&gt;architecture schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added python-openshift client to the SCL.&lt;/li&gt;
&lt;li&gt;We worked on anomaly detection in triple-o ci jobs, example report: &lt;a class="reference external" href="http://38.145.32.112/logreduce/d3a45f7.html"&gt;http://38.145.32.112/logreduce/d3a45f7.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We finalize reviews to allow operator to change the fdqn for a deployment (configuration, ci job and documentation).&lt;/li&gt;
&lt;li&gt;We fixed a configuration issue with the new version of telegraf, all our configuration is now stored in /etc/telegraf.d.&lt;/li&gt;
&lt;li&gt;We've fixed a problem with the SAML configuration at upgrade time&lt;/li&gt;
&lt;li&gt;We're fixing an error in sfconfig when using a &amp;quot;known gerrit&amp;quot; configuration (this is still in progress)&lt;/li&gt;
&lt;li&gt;Some progress with user backend + cauth integration (I was able to deploy a standalone cauth) User auth in repoxplorer via cauth and the new cauth's repoxplorer driver register its emails to repoxplorer User backend. (Can be re-used into a SF deployment)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding our contributions to Zuul and Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We worked on adding Project Test Interface documentation to Zuul.&lt;/li&gt;
&lt;li&gt;We implemented an OpenShift Nodepool provider as follow-up to the Summit discussion about the container specs: &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:openshift-zuul-build-resource"&gt;https://review.openstack.org/#/q/topic:openshift-zuul-build-resource&lt;/a&gt; , blog post draft is available here: &lt;a class="reference external" href="http://www.softwarefactory-project.io/draft/zuul-openshift.html"&gt;http://www.softwarefactory-project.io/draft/zuul-openshift.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The ANSI coloring patch in os_loganalyze is ready upstream: &lt;a class="reference external" href="https://review.openstack.org/#/c/563947/"&gt;https://review.openstack.org/#/c/563947/&lt;/a&gt; and we have cherry-picked it for SF (in review): &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/q/topic:ansi_coloring"&gt;https://softwarefactory-project.io/r/#/q/topic:ansi_coloring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fix proposal for Zuul bug where prefixed Gerrit UIs are not support by Zuul new depends-on format: &lt;a class="reference external" href="https://review.openstack.org/#/c/570006"&gt;https://review.openstack.org/#/c/570006&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-16</title><link href="https://www.softwarefactory-project.io/sprint-2018-16.html" rel="alternate"></link><published>2018-04-20T18:40:00+00:00</published><updated>2018-04-20T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-04-20:/sprint-2018-16.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the etherpad version to include a security fix.&lt;/li&gt;
&lt;li&gt;We continued the integration of gerrit-2.14 by removing deprecated code from managesf and sf-config.&lt;/li&gt;
&lt;li&gt;We updated the Zuul package to the 3.0.1 version and …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We updated the etherpad version to include a security fix.&lt;/li&gt;
&lt;li&gt;We continued the integration of gerrit-2.14 by removing deprecated code from managesf and sf-config.&lt;/li&gt;
&lt;li&gt;We updated the Zuul package to the 3.0.1 version and added further requirements for the next releases (python-re2).&lt;/li&gt;
&lt;li&gt;We have updated the rdopkg/dlrn SF packages and packaged the dlrnapi_client&lt;/li&gt;
&lt;li&gt;We have finalized a first functional Zuul/DLRN roles &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11810/"&gt;https://softwarefactory-project.io/r/#/c/11810/&lt;/a&gt; for SF and setup a two nodes sandbox to continue the experiments. Architecture schema: &lt;a class="reference external" href="https://drive.google.com/file/d/1mMb2O7Th6gTvk4WONWD7wQvzowonyeTn/view?usp=sharing"&gt;https://drive.google.com/file/d/1mMb2O7Th6gTvk4WONWD7wQvzowonyeTn/view?usp=sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We finalized to test how to build rhel image with diskimage-builder for testing and found a solution to avoid to have the REG_PASSWORD in the config repo (explain in sf documentation)&lt;/li&gt;
&lt;li&gt;We tested installing software-factory on rhel 7.4 and 7.5 using sf and openstack-pike mirror.&lt;/li&gt;
&lt;li&gt;We have investigated how to handle the Dynamic loading feature of Zuul in SF via a taiga story: &lt;a class="reference external" href="https://tree.taiga.io/project/morucci-software-factory/us/1203"&gt;https://tree.taiga.io/project/morucci-software-factory/us/1203&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding upstream contribution to Zuul/Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We reviewed the angular-v5 patch for zuul-web&lt;/li&gt;
&lt;li&gt;We worked on the MQTT publisher Zuul driver&lt;/li&gt;
&lt;li&gt;We updated ansible jobs (lint, review and upload-to-galaxy) zuul-jobs&lt;/li&gt;
&lt;li&gt;We reviewed the Zuul container spec&lt;/li&gt;
&lt;li&gt;Dynamic loading feature has been merged upstream and landed in 3.0.1&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-14</title><link href="https://www.softwarefactory-project.io/sprint-2018-14.html" rel="alternate"></link><published>2018-04-09T18:40:00+00:00</published><updated>2018-04-09T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-04-09:/sprint-2018-14.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed changes to enforce username unicity in Software Factory &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11751/"&gt;https://softwarefactory-project.io/r/#/c/11751/&lt;/a&gt; &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11744/"&gt;https://softwarefactory-project.io/r/#/c/11744/&lt;/a&gt; (and &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11779/"&gt;https://softwarefactory-project.io/r/#/c/11779/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We released the version 3.0 9h30 after …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed changes to enforce username unicity in Software Factory &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11751/"&gt;https://softwarefactory-project.io/r/#/c/11751/&lt;/a&gt; &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11744/"&gt;https://softwarefactory-project.io/r/#/c/11744/&lt;/a&gt; (and &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11779/"&gt;https://softwarefactory-project.io/r/#/c/11779/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We released the version 3.0 9h30 after upstream released zuul and nodepool. The delay was due to a major refactor in zuul-web api routes that landed right before the tag.&lt;/li&gt;
&lt;li&gt;We investigate adding automatic github gate configuration.&lt;/li&gt;
&lt;li&gt;We updated python-twine to the last version to fix upload-to-pypi jobs.&lt;/li&gt;
&lt;li&gt;We worked on adding support for gerrit-2.14.7 &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/q/topic:gerrit-2.14"&gt;https://softwarefactory-project.io/r/#/q/topic:gerrit-2.14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We finished to clean up all references to jenkins, zuulv2 and nodepool2 in our config and ci repositories.&lt;/li&gt;
&lt;li&gt;We started to work on integrating DLRN build and import jobs/roles into Software Factory based on jpena POC and a static nodepool node, this is still a WIP. Found two issues with DLRN &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11700/"&gt;https://softwarefactory-project.io/r/#/c/11700/&lt;/a&gt; and rdopkg &lt;a class="reference external" href="https://softwarefactory-project.io/r/#/c/11694/"&gt;https://softwarefactory-project.io/r/#/c/11694/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding upstream contribution to Zuul/Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We proposed a spec about Zuul's tenant-scoped admin web API: &lt;a class="reference external" href="https://review.openstack.org/558468"&gt;https://review.openstack.org/558468&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated the MQTT zuul driver and follow-up the openci cross community protocol RFC &lt;a class="reference external" href="https://gitlab.openci.io/openci/community/issues/3"&gt;https://gitlab.openci.io/openci/community/issues/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We packaged Nodepool for fedora rawhide, f28 and f27&lt;/li&gt;
&lt;li&gt;We updated the broken config patch to improve user experience at dynamic reloading (tenant configuration error not returned to user if a .zuul.yaml proposed does not trigger an issue)&lt;/li&gt;
&lt;li&gt;We finally finished adding the Limestone nodepool provider upstream, there are still some issues and we are troubleshooting those.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-12</title><link href="https://www.softwarefactory-project.io/sprint-2018-12.html" rel="alternate"></link><published>2018-03-26T18:40:00+00:00</published><updated>2018-03-26T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-03-26:/sprint-2018-12.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We enabled the code-search service on the production deployment &lt;a class="reference external" href="https://softwarefactory-project.io/codesearch/"&gt;https://softwarefactory-project.io/codesearch/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We branched stable/3.0 to start working on the next version 3.1 on the master branch.&lt;/li&gt;
&lt;li&gt;We started to work on tenant …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We enabled the code-search service on the production deployment &lt;a class="reference external" href="https://softwarefactory-project.io/codesearch/"&gt;https://softwarefactory-project.io/codesearch/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We branched stable/3.0 to start working on the next version 3.1 on the master branch.&lt;/li&gt;
&lt;li&gt;We started to work on tenant deployment for ansible-network connected to a central zuul/nodepool service &lt;a class="reference external" href="https://ansible.softwarefactory-project.io"&gt;https://ansible.softwarefactory-project.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We improved the gerrit REST api access to use Cauth API-KEY instead of basic http password. This was needed to make the next Gerrit version works as it doesn't have the external_ids database table SF is using for service management.&lt;/li&gt;
&lt;li&gt;We investigated adding a &amp;quot;reenqueue&amp;quot; button to the zuul builds page, using the zuul web admin patch.&lt;/li&gt;
&lt;li&gt;We investigated triggering autoholds with a comment in gerrit.&lt;/li&gt;
&lt;li&gt;We refactored the documentation to have a clear view for each main landing page (operator, user, contributor and faq). We also added pages to describe all components not described in the previous documentation (elk, metrics, hound, repoxlorer ...)&lt;/li&gt;
&lt;li&gt;We've continued to remove jenkins references in sf-config and to ensure all tasks are in the right role.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding upstream contribution to Zuul/Nodepool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued to investigate Kazoo retry logic to mitigate ConnectionLost issues with zookeeper &lt;a class="reference external" href="https://review.openstack.org/#/c/556335/"&gt;https://review.openstack.org/#/c/556335/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We found an issue with secret handling making base job failed with POST_FAILURE, change has been reverted and a test has been proposed to detect the bug.&lt;/li&gt;
&lt;li&gt;We worked on a nodepool-web interface to display labels and nodes status &lt;a class="reference external" href="https://softwarefactory-project.io/zuul/local/labels.html"&gt;https://softwarefactory-project.io/zuul/local/labels.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We worked on job trigger driver to implement a &amp;quot;Build job&amp;quot; button on the web interface with custom job variables.&lt;/li&gt;
&lt;li&gt;We investigated an Azure and VMWare/ESX nodepool driver &lt;a class="reference external" href="https://review.openstack.org/#/c/554432/"&gt;https://review.openstack.org/#/c/554432/&lt;/a&gt; and &lt;a class="reference external" href="https://review.openstack.org/#/c/554463/"&gt;https://review.openstack.org/#/c/554463/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We submitted mqtt publishing roles to zuul-jobs, they allow operators to publish build status (START, SUCCESS, FAILURE) and other details to a firehose-like event queue. &lt;a class="reference external" href="https://review.openstack.org/#/c/551329/"&gt;https://review.openstack.org/#/c/551329/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We updated the broken config patch and implemented two followup patches to report loading errors in zuul-web &lt;a class="reference external" href="https://review.openstack.org/#/q/topic:broken-config"&gt;https://review.openstack.org/#/q/topic:broken-config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-10</title><link href="https://www.softwarefactory-project.io/sprint-2018-10.html" rel="alternate"></link><published>2018-03-13T18:40:00+00:00</published><updated>2018-03-13T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-03-13:/sprint-2018-10.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We finalized the version 3.0 release, now waiting for openstack-infra tags of zuul and nodepool to tag the final repo.&lt;/li&gt;
&lt;li&gt;We upgraded softwarefactory-project.io to the candidate repo and validated all the new features are working …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We finalized the version 3.0 release, now waiting for openstack-infra tags of zuul and nodepool to tag the final repo.&lt;/li&gt;
&lt;li&gt;We upgraded softwarefactory-project.io to the candidate repo and validated all the new features are working as expected.&lt;/li&gt;
&lt;li&gt;We integrated the etsy/hound code-search service&lt;/li&gt;
&lt;li&gt;We integrated DLRN as a SF component and managed to have an implementation that allow multiple DLRN's projects on the same host (DLRN projects defined  in the config repo, gateway path to the repo and api by project)&lt;/li&gt;
&lt;li&gt;We started to discuss the use of DLRN for the SF build workflow and here is a workflow proposal workflow: &lt;a class="reference external" href="https://drive.google.com/file/d/1vWcZxJao4Sb3ZrrslRL6H2M3SGY2Rggm/view?usp=sharing"&gt;https://drive.google.com/file/d/1vWcZxJao4Sb3ZrrslRL6H2M3SGY2Rggm/view?usp=sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We are still working on revamping firehooks to support failed job autohold from gerrit comment&lt;/li&gt;
&lt;li&gt;We worked on the last review due for the version Zuul 3 release: the javascript tooling and the zuul_stream refactor.&lt;/li&gt;
&lt;li&gt;We discovered zookeeper issues on Zuul after discussing the kazoo retry patch.&lt;/li&gt;
&lt;li&gt;We continued to work on the Zuul patch to read a tenant config from an external script (&lt;a class="reference external" href="https://review.openstack.org/#/c/535878/"&gt;https://review.openstack.org/#/c/535878/&lt;/a&gt;) to have it merged soon.&lt;/li&gt;
&lt;li&gt;We Created a patch to have notifications from zuul on the firehose at pre- and post- stages during a job build: &lt;a class="reference external" href="https://review.openstack.org/#/c/551329/"&gt;https://review.openstack.org/#/c/551329/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We worked on a log-classify presentation and an initial integration within zuul-jobs.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-08</title><link href="https://www.softwarefactory-project.io/sprint-2018-08.html" rel="alternate"></link><published>2018-02-22T18:40:00+00:00</published><updated>2018-02-22T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-02-22:/sprint-2018-08.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We're working on a Proof-of-Concept Zuul Web Admin&lt;/li&gt;
&lt;li&gt;We've finalize the script to automatically generate Zuul and Nodepool dashboards. We updated softwarefactory-project.io to validate grafs with real data (&lt;a class="reference external" href="https://softwarefactory-project.io/grafana/?orgId=1"&gt;https://softwarefactory-project.io/grafana/?orgId=1&lt;/a&gt; ). We also …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We're working on a Proof-of-Concept Zuul Web Admin&lt;/li&gt;
&lt;li&gt;We've finalize the script to automatically generate Zuul and Nodepool dashboards. We updated softwarefactory-project.io to validate grafs with real data (&lt;a class="reference external" href="https://softwarefactory-project.io/grafana/?orgId=1"&gt;https://softwarefactory-project.io/grafana/?orgId=1&lt;/a&gt; ). We also added in the config repo a metric directory to allow users to add custom dashboards.&lt;/li&gt;
&lt;li&gt;We have published a first version &lt;a class="reference external" href="http://www.softwarefactory-project.io"&gt;http://www.softwarefactory-project.io&lt;/a&gt; using CI/CD via the pages feature&lt;/li&gt;
&lt;li&gt;We have integrated last repoxplorer version 1.2.0 to SF&lt;/li&gt;
&lt;li&gt;We have enabled two periodic jobs to validate SF install (last stable) on centos and centos CR&lt;/li&gt;
&lt;li&gt;We have moved the SF backup node on the private PCTT cloud&lt;/li&gt;
&lt;li&gt;We deployed a real pre-production called trysf.io to validate the 2.7-&amp;gt;3.0 (candidate) upgrade and we upgraded the production deploymented: new zuul dashboard, new statsd metrics and elk stash working with zuulv3 jobs&lt;/li&gt;
&lt;li&gt;A patch letting operators define a default maximum holding time for nodepool was merged upstream: &lt;a class="reference external" href="https://review.openstack.org/#/c/536295/"&gt;https://review.openstack.org/#/c/536295/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Addressed an issue that crashed ARA during devstack runs: &lt;a class="reference external" href="https://review.openstack.org/#/c/546029/"&gt;https://review.openstack.org/#/c/546029/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patch to improve zuul loading speed merged &lt;a class="reference external" href="https://review.openstack.org/#/c/535509/"&gt;https://review.openstack.org/#/c/535509/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Worked on making zuul compatible with Ansible 2.4, ended up create a backport to 2.4: &lt;a class="reference external" href="https://github.com/ansible/ansible/pull/36572"&gt;https://github.com/ansible/ansible/pull/36572&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry><entry><title>Overview of a CI/CD workflow with Zuul</title><link href="https://www.softwarefactory-project.io/overview-of-a-cicd-workflow-with-zuul.html" rel="alternate"></link><published>2018-01-22T00:00:00+00:00</published><updated>2018-01-22T00:00:00+00:00</updated><author><name>tristanC</name></author><id>tag:www.softwarefactory-project.io,2018-01-22:/overview-of-a-cicd-workflow-with-zuul.html</id><summary type="html">&lt;p&gt;The upcoming version of &lt;a class="reference external" href="https://docs.openstack.org/infra/zuul/"&gt;Zuul&lt;/a&gt;
has many new features that allow one to create powerful continuous
integration and continuous deployment pipelines.&lt;/p&gt;
&lt;p&gt;This article presents some mechanisms to create such pipelines.
As a practical example, I demonstrate the Software Factory project
development workflow we use to continously build, test and deliver …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The upcoming version of &lt;a class="reference external" href="https://docs.openstack.org/infra/zuul/"&gt;Zuul&lt;/a&gt;
has many new features that allow one to create powerful continuous
integration and continuous deployment pipelines.&lt;/p&gt;
&lt;p&gt;This article presents some mechanisms to create such pipelines.
As a practical example, I demonstrate the Software Factory project
development workflow we use to continously build, test and deliver
rpm packages through code review.&lt;/p&gt;
&lt;div class="section" id="build-job"&gt;
&lt;h2&gt;Build job&lt;/h2&gt;
&lt;p&gt;The first stage of this workflow is to build a new package for each change.&lt;/p&gt;
&lt;div class="section" id="build-job-definition"&gt;
&lt;h3&gt;Build job definition&lt;/h3&gt;
&lt;p&gt;The build job is defined in a zuul.yaml
&lt;a class="reference external" href="https://softwarefactory-project.io/r/gitweb?p=software-factory/sfinfo.git;a=blob;f=zuul.d/jobs.yaml"&gt;file&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Build Software Factory rpm package&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;playbooks/rpmbuild.yaml&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;required-projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;software-factory/sfinfo&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;mock-host&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;centos-7&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;required-projects&lt;/em&gt; option declare projects that are needed to run the
job. In this case, the package metadata, such as the software collection
targets are defined in the sfinfo project.
This mean that everytime this job is executed, the sfinfo project will be
copied to the test instance.&lt;/p&gt;
&lt;p&gt;Extra required-projects can be added per project, for example the cauth package
requires the cauth-distgit project to build a working package.
The cauth pipeline can be defined as:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;software-factory/cauth&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;required-projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;software-factory/cauth-distgit&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Most of the job parameters can be modified when added to a
project pipeline. In the case of the &lt;em&gt;required-projects&lt;/em&gt; the list isn't replaced
but extended. This means a change on the cauth project results in the
sf-rpm-build job running with the sfinfo and cauth-distgit projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-job-playbook"&gt;
&lt;h3&gt;Build job playbook&lt;/h3&gt;
&lt;p&gt;The build job is an Ansible
&lt;a class="reference external" href="https://softwarefactory-project.io/r/gitweb?p=software-factory/sfinfo.git;a=blob;f=playbooks/rpmbuild.yaml"&gt;playbook&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;mock-host&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;# Get sfinfo location&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;sfinfo_path_query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[?name=='software-factory/sfinfo'].src_dir&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;sfinfo_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p-Indicator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="no"&gt;{{ (zuul.projects.values() | list | json_query(sfinfo_path_query))[0] }}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;# Get workspace path to run zuul_rpm_* commands&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;sfnamespace_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sfinfo_path&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;dirname&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;dirname&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Copy rpm-gpg keys&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rsync&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sfinfo_path&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/rpm-gpg/&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/etc/pki/rpm-gpg/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Run zuul_rpm_build.py&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p-Indicator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="no"&gt;./software-factory/sfinfo/zuul_rpm_build.py&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="no"&gt;--distro-info ./software-factory/sfinfo/sf-{{ zuul.branch }}.yaml&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="no"&gt;--zuulv3&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="no"&gt;{% for item in zuul['items'] %}&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;--project {{ item.project.name }}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="no"&gt;{% endfor %}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sfnamespace_path&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Fetch zuul-rpm-build repository&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;synchronize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sfnamespace_path&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/zuul-rpm-build/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul.executor.log_root&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/buildset/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;pull&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;First, the variables use JMES query to discover the path of the sfinfo project
location on the test instance. Indeed the Zuul executor prepares the workspace
using relative paths constructed from the connection hostname. For reference,
the playbook starts with a &lt;em&gt;zuul.projects&lt;/em&gt; variable like the one below:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="nt"&gt;zuul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;managesf.softwarefactory-project.io/software-factory/sfinfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;software-factory/sfinfo&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;src_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;src/gerrit.softwarefactory-project.io/software-factory/sfinfo&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then the job runs the package building command using a loop on
Zuul items. This enables the cross repository dependencies feature of Zuul
where this job needs to build all the projects that are added as depends-on.
Note that this is automatically done by the &amp;quot;tox&amp;quot; job, see
the &lt;a class="reference external" href="http://git.openstack.org/cgit/openstack-infra/zuul-jobs/tree/roles/tox/tasks/siblings.yaml"&gt;install_sibling task&lt;/a&gt;.
For reference, the playbook starts with a &lt;em&gt;zuul.items&lt;/em&gt; variable like the one
below:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="nt"&gt;zuul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;change_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;https://softwarefactory-project.io/r/10736&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;scl/zuul-jobs-distgit&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;change_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;https://softwarefactory-project.io/r/10599&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;software-factory/sf-config&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;change_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;https://softwarefactory-project.io/r/10605&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;software-factory/sf-ci&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In this example, the depends-on list includes three changes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pages roles added to zuul-jobs-distgit,&lt;/li&gt;
&lt;li&gt;Pages jobs configured in sf-config, and&lt;/li&gt;
&lt;li&gt;Functional tests added to sf-ci.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sf-rpm-build job will build a new package for each of these changes.&lt;/p&gt;
&lt;p&gt;The last task fetches the resulting rpm repository to the job logs.
Any jobs, playbooks or tasks can synchronize artifacts to the
&lt;em&gt;zuul.executor.log_root&lt;/em&gt; directory.
Having the packages exported with the job logs is convenient for the end users
to easily install the packages built in the CI.
Moreover, this will also be used by the integration jobs below.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-pipeline"&gt;
&lt;h2&gt;Integration pipeline&lt;/h2&gt;
&lt;p&gt;The second stage of the workflow is to test the packages built by the
sf-rpm-build job.&lt;/p&gt;
&lt;div class="section" id="share-zuul-artifacts-between-jobs"&gt;
&lt;h3&gt;Share Zuul artifacts between jobs&lt;/h3&gt;
&lt;p&gt;Child jobs can inherit data produced by a parent job when using the
&lt;em&gt;zuul_return&lt;/em&gt; Ansible module. The
&lt;a class="reference external" href="https://review.openstack.org/530679"&gt;buildset-artifacts-location&lt;/a&gt; role
automatically set the artifacts job logs url using this task:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Define buildset artifacts location&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;delegate_to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;localhost&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;zuul_return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;buildset_artifacts_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul_log_url&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;zuul_log_path&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/buildset&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Software Factory configures this role along the upload-logs to transparently
define this &lt;em&gt;buildset_artifacts_url&lt;/em&gt; variable when there is a &lt;em&gt;buildset&lt;/em&gt;
directory in the logs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-pipeline-definition"&gt;
&lt;h3&gt;Integration pipeline definition&lt;/h3&gt;
&lt;p&gt;The integration pipeline is defined in a
&lt;a class="reference external" href="https://softwarefactory-project.io/r/gitweb?p=software-factory/sfinfo.git;a=blob;f=zuul.d/templates.yaml"&gt;zuul.yaml file&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project-template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-jobs&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-ci-functional-minimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-ci-upgrade-minimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-ci-functional-allinone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-ci-upgrade-allinone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The functional and upgrade jobs use the &lt;em&gt;dependencies&lt;/em&gt; option to
declare that they only run after the rpm-build job is finished.
The functional and upgrade jobs use new packages using the task below:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Add CI packages repository&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;yum_repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zuul-built&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;baseurl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;buildset_artifacts_url&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;gpgcheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="projects-definition"&gt;
&lt;h3&gt;Projects definition&lt;/h3&gt;
&lt;p&gt;The sfinfo project is a &lt;em&gt;config-project&lt;/em&gt; in Zuul configuration.
It enables the defining of all the projects' jobs without requiring the
addition of a zuul.yaml file in each project.
Config-projects are allowed to configure foreign projects' jobs, for example:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;scl/zuul-jobs-distgit&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-jobs&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A good design for this workflow defines common jobs in a dedicated repository
and the common pipeline definitions in a config-projects.
&lt;em&gt;Untrusted-projects&lt;/em&gt; can still add local jobs if needed and can even
add dependencies to the common pipelines. For example, the cauth project
extends the required-projects for the sf-rpm-build.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment-pipeline"&gt;
&lt;h2&gt;Deployment pipeline&lt;/h2&gt;
&lt;p&gt;When a change succeeds the integration tests the reviewer can approve it to
trigger the deployment pipeline. The first thing to understand is how to
use secrets in the deployment job.&lt;/p&gt;
&lt;div class="section" id="using-secrets-in-jobs"&gt;
&lt;h3&gt;Using secrets in jobs&lt;/h3&gt;
&lt;p&gt;Zuul can securely manage secrets using public key cryptography. Zuul
manages a private key for each project and the user can encrypt secrets with
the public key to store them in the repository along with the job. That
means encryption is a one-way operation for the user and only the Zuul
scheduler can decrypt the secret.&lt;/p&gt;
&lt;p&gt;To create a new secret the user runs the &lt;a class="reference external" href="http://git.openstack.org/cgit/openstack-infra/zuul/tree/tools/encrypt_secret.py"&gt;encrypt_secret&lt;/a&gt; tool:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="c1"&gt;# encrypt_secret.py --infile secret.data &amp;lt;zuul-web-url&amp;gt;/keys/&amp;lt;tenant-name&amp;gt; &amp;lt;project-name&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;&amp;lt;secret-name&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;variable-name&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;!encrypted/pkcs1-oaep&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;ENCRYPTED-DATA-HERE&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Once a secret is added to a job the playbook will have access to its
decrypted content. However, there are a few caveats:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The secret and the playbook need to be defined in a &lt;strong&gt;single job&lt;/strong&gt;
stored in the &lt;strong&gt;same project&lt;/strong&gt;. Note that this may change in the
&lt;a class="reference external" href="http://lists.zuul-ci.org/pipermail/zuul-discuss/2018-January/000010.html"&gt;future&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If the secret is defined in an &lt;em&gt;untrusted-project&lt;/em&gt;,
then the job is automatically converted to &lt;em&gt;post-review&lt;/em&gt;.
That means jobs using secrets can only run in post, periodic or release
pipelines. This prevents speculative job modifications from leaking
the secret content.&lt;/li&gt;
&lt;li&gt;Alternatively, if the secret is defined in a &lt;em&gt;config-project&lt;/em&gt;, then the
job can be used in any pipeline because config-projects don't allow
speculative execution on new patchset.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment-pipeline-definition"&gt;
&lt;h3&gt;Deployment pipeline definition&lt;/h3&gt;
&lt;p&gt;In the Software Factory project, the deployment is a
&lt;a class="reference external" href="https://fedoraproject.org/wiki/Koji"&gt;koji&lt;/a&gt; build and
is performed as part of the gate pipeline.
That means the change isn't merged if it is not deployed.
Another strategy is to deploy in the post pipeline after the change is
merged, or in the release pipeline after a tag is submitted.&lt;/p&gt;
&lt;p&gt;The deployment pipeline is defined as below:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;project-template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-jobs&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-ci-functional-minimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-ci-upgrade-minimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-ci-functional-allinone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-ci-upgrade-allinone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-build&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sf-rpm-publish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-ci-functional-minimal&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-ci-upgrade-minimal&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-ci-functional-allinone&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-ci-upgrade-allinone&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The deployment pipeline needs to use the &lt;em&gt;queue&lt;/em&gt; option to group all the
approved changes in dependent order.
When multiple changes are approved in parallel, they will all be tested
together before being merged, as if they were submitted with a
depends-on relationship.&lt;/p&gt;
&lt;p&gt;The deployment pipeline is similar to the integration pipeline, it just adds
a publish job that will only run if all the integration tests succeed.
This ensures that changes are consistently tested with the projects' current
state before being deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment-job-definition"&gt;
&lt;h3&gt;Deployment job definition&lt;/h3&gt;
&lt;p&gt;The job is declared in a zuul.yaml file as below:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf-rpm-publish&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Publish Software Factory rpm to koji&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;playbooks/rpmpublish.yaml&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;hold-following-changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;required-projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;software-factory/sfinfo&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;sf_koji_configuration&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This job is using the &lt;em&gt;hold-following-changes&lt;/em&gt; setting to ensure that only
the top of the gate gets published. If the deployement is happening in the
post or release pipeline, then this setting can be replaced by a &lt;em&gt;semaphore&lt;/em&gt;
instead, for example:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;deployment&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;semaphore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;production-access&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;semaphore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;production-access&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This prevents concurrency issues when multiple changes are approved in parallel.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zuul-concepts-summary"&gt;
&lt;h2&gt;Zuul concepts summary&lt;/h2&gt;
&lt;p&gt;This article covered the following concepts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Project types:&lt;ul&gt;
&lt;li&gt;&lt;em&gt;config-projects&lt;/em&gt;: hold deployment secrets and set projects' pipelines.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;untrusted-projects&lt;/em&gt;: the projects being tested and deployed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Playbook variables:&lt;ul&gt;
&lt;li&gt;&lt;em&gt;zuul.projects&lt;/em&gt;: the projects installed on the test instance,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;zuul.items&lt;/em&gt;: the list of changes being tested with depends-on,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;zuul.executor.log_root&lt;/em&gt;: the location of job artifacts, and&lt;/li&gt;
&lt;li&gt;&lt;em&gt;zuul_return&lt;/em&gt;: an Ansible module to share data between jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Job options:&lt;ul&gt;
&lt;li&gt;&lt;em&gt;required-projects&lt;/em&gt;: the list of projects to copy on the test instance,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;dependencies&lt;/em&gt;: the list of jobs to wait for,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;secret&lt;/em&gt;: the deployment job's secret,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;post-review&lt;/em&gt;: prevents a job from running speculatively,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;hold-following-changes&lt;/em&gt;: makes dependent pipelines run in serial, and&lt;/li&gt;
&lt;li&gt;&lt;em&gt;semaphore&lt;/em&gt;: prevents concurrent deployment of different changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipeline options:&lt;ul&gt;
&lt;li&gt;Job settings can be modified per project, and&lt;/li&gt;
&lt;li&gt;&lt;em&gt;queue&lt;/em&gt; makes all the projects depend on each other automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Zuul can be used to effectively manage complex continous integration and
deployment pipelines with powerfull cross repository dependencies management.&lt;/p&gt;
&lt;p&gt;This article presented the Software Factory workflow where rpm packages are
being continously built, tested and delivered through code review.
A similar workflow can be created for other types of projects such as golang
or container based software.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Software Factory is 4 years old!</title><link href="https://www.softwarefactory-project.io/software-factory-is-4-years-old.html" rel="alternate"></link><published>2018-01-21T06:48:00+00:00</published><updated>2018-01-21T06:48:00+00:00</updated><author><name>sf</name></author><id>tag:www.softwarefactory-project.io,2018-01-21:/software-factory-is-4-years-old.html</id><content type="html">&lt;p&gt;The first commit was merged Tuesday, January 21 2014.
Here are visualisations of the development history using &lt;a class="reference external" href="http://gource.io"&gt;Gource&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;From 2014 to 2016:&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tvm2VbkY6TY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;ul class="simple"&gt;
&lt;li&gt;From 2016 to 2018:&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/kxSviTBoLDE" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Happy anniversary SF!&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Sprint 2018-06</title><link href="https://www.softwarefactory-project.io/sprint-2018-06.html" rel="alternate"></link><published>2018-01-07T18:40:00+00:00</published><updated>2018-01-07T18:40:00+00:00</updated><author><name>Fabien Boucher</name></author><id>tag:www.softwarefactory-project.io,2018-01-07:/sprint-2018-06.html</id><summary type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have played around with Kerberos, leading to the grooming of a future implementation: &lt;a class="reference external" href="https://tree.taiga.io/project/morucci-software-factory/epic/951"&gt;https://tree.taiga.io/project/morucci-software-factory/epic/951&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have move the resources engine API under the new managesf API v2 endpoint&lt;/li&gt;
&lt;li&gt;We …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Below are the tasks we worked on during our last 2 weeks sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have played around with Kerberos, leading to the grooming of a future implementation: &lt;a class="reference external" href="https://tree.taiga.io/project/morucci-software-factory/epic/951"&gt;https://tree.taiga.io/project/morucci-software-factory/epic/951&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We have move the resources engine API under the new managesf API v2 endpoint&lt;/li&gt;
&lt;li&gt;We have investigated a solution to make the resources engine apply call asynchronuous and discuss with team and finally decided a new solution w/o passing through the manageSF API&lt;/li&gt;
&lt;li&gt;We have changed the sf-ops backup playbook to facilitate old backup deletion with bup.&lt;/li&gt;
&lt;li&gt;We have boostrapped a website for Software Factory with static pages and blog based on pelican &lt;a class="reference external" href="https://softwarefactory-project.io/logs/71/11171/6/check/build-pages/1b4a02a/pages/"&gt;https://softwarefactory-project.io/logs/71/11171/6/check/build-pages/1b4a02a/pages/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We investigated gerrit-2.14 integration, though database schema changed and managesf/initialization needs to be adapted to use the REST api&lt;/li&gt;
&lt;li&gt;We integrated ara in sfconfig so that all ansible-playbook execution are stored&lt;/li&gt;
&lt;li&gt;We removed zuulV2/nodepoolV2 and Jenkins and dropped the version prefix in zuul/nodepool.&lt;/li&gt;
&lt;li&gt;We updated the zuul and nodepool package to use the new Javascript tooling stack.&lt;/li&gt;
&lt;li&gt;We added dynamic collections of zuul and nodepool configuration to generate grafana dashboard.&lt;/li&gt;
&lt;li&gt;We abandoned the graphite integration to avoid to have two metrics backends in SF. We started to prepare a script to automatically generate nodepool and zuul graph based on yaml file.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="blog"></category></entry></feed>